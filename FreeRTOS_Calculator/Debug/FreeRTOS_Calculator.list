
FreeRTOS_Calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f5c  08008f5c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f5c  08008f5c  00018f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f64  08008f64  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f68  08008f68  00018f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145f0  2000006c  08008fd8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001465c  08008fd8  0002465c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015fea  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003695  00000000  00000000  000360c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  00039760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd8  00000000  00000000  0003ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224af  00000000  00000000  0003bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019656  00000000  00000000  0005e08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de3da  00000000  00000000  000776e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b44  00000000  00000000  00155ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d4  00000000  00000000  0015b604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d58 	.word	0x08008d58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08008d58 	.word	0x08008d58

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ed8 	.word	0x20012ed8
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f103 0208 	add.w	r2, r3, #8
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f04f 32ff 	mov.w	r2, #4294967295
 8000664:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f103 0208 	add.w	r2, r3, #8
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f103 0208 	add.w	r2, r3, #8
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80006a6:	b480      	push	{r7}
 80006a8:	b085      	sub	sp, #20
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006ee:	b480      	push	{r7}
 80006f0:	b085      	sub	sp, #20
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000704:	d103      	bne.n	800070e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e00c      	b.n	8000728 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3308      	adds	r3, #8
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e002      	b.n	800071c <vListInsert+0x2e>
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	429a      	cmp	r2, r3
 8000726:	d2f6      	bcs.n	8000716 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	601a      	str	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	6892      	ldr	r2, [r2, #8]
 8000776:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	6852      	ldr	r2, [r2, #4]
 8000780:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	d103      	bne.n	8000794 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1e5a      	subs	r2, r3, #1
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10a      	bne.n	80007e2 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d0:	f383 8811 	msr	BASEPRI, r3
 80007d4:	f3bf 8f6f 	isb	sy
 80007d8:	f3bf 8f4f 	dsb	sy
 80007dc:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007de:	bf00      	nop
 80007e0:	e7fe      	b.n	80007e0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d05d      	beq.n	80008a4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d059      	beq.n	80008a4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f8:	2100      	movs	r1, #0
 80007fa:	fba3 2302 	umull	r2, r3, r3, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d000      	beq.n	8000804 <xQueueGenericReset+0x50>
 8000802:	2101      	movs	r1, #1
 8000804:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000806:	2b00      	cmp	r3, #0
 8000808:	d14c      	bne.n	80008a4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800080a:	f002 fb7b 	bl	8002f04 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000816:	6939      	ldr	r1, [r7, #16]
 8000818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800081a:	fb01 f303 	mul.w	r3, r1, r3
 800081e:	441a      	add	r2, r3
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	2200      	movs	r2, #0
 8000828:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800083a:	3b01      	subs	r3, #1
 800083c:	6939      	ldr	r1, [r7, #16]
 800083e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000840:	fb01 f303 	mul.w	r3, r1, r3
 8000844:	441a      	add	r2, r3
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	22ff      	movs	r2, #255	; 0xff
 800084e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d114      	bne.n	800088a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d01a      	beq.n	800089e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	3310      	adds	r3, #16
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fa2b 	bl	8001cc8 <xTaskRemoveFromEventList>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d012      	beq.n	800089e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <xQueueGenericReset+0x11c>)
 800087a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	f3bf 8f6f 	isb	sy
 8000888:	e009      	b.n	800089e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	3310      	adds	r3, #16
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fedc 	bl	800064c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	3324      	adds	r3, #36	; 0x24
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fed7 	bl	800064c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800089e:	f002 fb61 	bl	8002f64 <vPortExitCritical>
 80008a2:	e001      	b.n	80008a8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10a      	bne.n	80008c4 <xQueueGenericReset+0x110>
        __asm volatile
 80008ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b2:	f383 8811 	msr	BASEPRI, r3
 80008b6:	f3bf 8f6f 	isb	sy
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	60bb      	str	r3, [r7, #8]
    }
 80008c0:	bf00      	nop
 80008c2:	e7fe      	b.n	80008c2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80008c4:	697b      	ldr	r3, [r7, #20]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000ed04 	.word	0xe000ed04

080008d4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af02      	add	r7, sp, #8
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	4613      	mov	r3, r2
 80008e0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d02e      	beq.n	800094a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008ec:	2100      	movs	r1, #0
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	fba3 2302 	umull	r2, r3, r3, r2
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <xQueueGenericCreate+0x28>
 80008fa:	2101      	movs	r1, #1
 80008fc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d123      	bne.n	800094a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800090a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800090e:	d81c      	bhi.n	800094a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	fb02 f303 	mul.w	r3, r2, r3
 8000918:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	3350      	adds	r3, #80	; 0x50
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fc1c 	bl	800315c <pvPortMalloc>
 8000924:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d01c      	beq.n	8000966 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3350      	adds	r3, #80	; 0x50
 8000934:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	4613      	mov	r3, r2
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f000 f814 	bl	8000970 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000948:	e00d      	b.n	8000966 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10a      	bne.n	8000966 <xQueueGenericCreate+0x92>
        __asm volatile
 8000950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	613b      	str	r3, [r7, #16]
    }
 8000962:	bf00      	nop
 8000964:	e7fe      	b.n	8000964 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000966:	69fb      	ldr	r3, [r7, #28]
    }
 8000968:	4618      	mov	r0, r3
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d103      	bne.n	800098c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	e002      	b.n	8000992 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800099e:	2101      	movs	r1, #1
 80009a0:	69b8      	ldr	r0, [r7, #24]
 80009a2:	f7ff ff07 	bl	80007b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	78fa      	ldrb	r2, [r7, #3]
 80009aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	68f9      	ldr	r1, [r7, #12]
 80009b4:	2073      	movs	r0, #115	; 0x73
 80009b6:	f004 fb33 	bl	8005020 <SEGGER_SYSVIEW_RecordU32x3>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80009da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10a      	bne.n	80009f6 <xQueueGenericSend+0x32>
        __asm volatile
 80009e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e4:	f383 8811 	msr	BASEPRI, r3
 80009e8:	f3bf 8f6f 	isb	sy
 80009ec:	f3bf 8f4f 	dsb	sy
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80009f2:	bf00      	nop
 80009f4:	e7fe      	b.n	80009f4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d103      	bne.n	8000a04 <xQueueGenericSend+0x40>
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d101      	bne.n	8000a08 <xQueueGenericSend+0x44>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <xQueueGenericSend+0x46>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10a      	bne.n	8000a24 <xQueueGenericSend+0x60>
        __asm volatile
 8000a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a12:	f383 8811 	msr	BASEPRI, r3
 8000a16:	f3bf 8f6f 	isb	sy
 8000a1a:	f3bf 8f4f 	dsb	sy
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000a20:	bf00      	nop
 8000a22:	e7fe      	b.n	8000a22 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d103      	bne.n	8000a32 <xQueueGenericSend+0x6e>
 8000a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d101      	bne.n	8000a36 <xQueueGenericSend+0x72>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <xQueueGenericSend+0x74>
 8000a36:	2300      	movs	r3, #0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10a      	bne.n	8000a52 <xQueueGenericSend+0x8e>
        __asm volatile
 8000a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a40:	f383 8811 	msr	BASEPRI, r3
 8000a44:	f3bf 8f6f 	isb	sy
 8000a48:	f3bf 8f4f 	dsb	sy
 8000a4c:	623b      	str	r3, [r7, #32]
    }
 8000a4e:	bf00      	nop
 8000a50:	e7fe      	b.n	8000a50 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a52:	f001 fb4b 	bl	80020ec <xTaskGetSchedulerState>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <xQueueGenericSend+0x9e>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <xQueueGenericSend+0xa2>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <xQueueGenericSend+0xa4>
 8000a66:	2300      	movs	r3, #0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10a      	bne.n	8000a82 <xQueueGenericSend+0xbe>
        __asm volatile
 8000a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a70:	f383 8811 	msr	BASEPRI, r3
 8000a74:	f3bf 8f6f 	isb	sy
 8000a78:	f3bf 8f4f 	dsb	sy
 8000a7c:	61fb      	str	r3, [r7, #28]
    }
 8000a7e:	bf00      	nop
 8000a80:	e7fe      	b.n	8000a80 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a82:	f002 fa3f 	bl	8002f04 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d302      	bcc.n	8000a98 <xQueueGenericSend+0xd4>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d136      	bne.n	8000b06 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 ffee 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	4601      	mov	r1, r0
 8000aac:	205a      	movs	r0, #90	; 0x5a
 8000aae:	f004 fb2d 	bl	800510c <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ab8:	f000 f9d8 	bl	8000e6c <prvCopyDataToQueue>
 8000abc:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d010      	beq.n	8000ae8 <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	3324      	adds	r3, #36	; 0x24
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f8fc 	bl	8001cc8 <xTaskRemoveFromEventList>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d013      	beq.n	8000afe <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <xQueueGenericSend+0x248>)
 8000ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	f3bf 8f4f 	dsb	sy
 8000ae2:	f3bf 8f6f 	isb	sy
 8000ae6:	e00a      	b.n	8000afe <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d007      	beq.n	8000afe <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000aee:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <xQueueGenericSend+0x248>)
 8000af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	f3bf 8f4f 	dsb	sy
 8000afa:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000afe:	f002 fa31 	bl	8002f64 <vPortExitCritical>
                return pdPASS;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e07d      	b.n	8000c02 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d110      	bne.n	8000b2e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b0c:	f002 fa2a 	bl	8002f64 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 ffb2 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	460b      	mov	r3, r1
 8000b22:	4601      	mov	r1, r0
 8000b24:	205a      	movs	r0, #90	; 0x5a
 8000b26:	f004 faf1 	bl	800510c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e069      	b.n	8000c02 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d106      	bne.n	8000b42 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f99d 	bl	8001e78 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b42:	f002 fa0f 	bl	8002f64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b46:	f000 fd9b 	bl	8001680 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b4a:	f002 f9db 	bl	8002f04 <vPortEnterCritical>
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5a:	d103      	bne.n	8000b64 <xQueueGenericSend+0x1a0>
 8000b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d103      	bne.n	8000b7a <xQueueGenericSend+0x1b6>
 8000b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b7a:	f002 f9f3 	bl	8002f64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b7e:	1d3a      	adds	r2, r7, #4
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 f98c 	bl	8001ea4 <xTaskCheckForTimeOut>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d124      	bne.n	8000bdc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b94:	f000 fa62 	bl	800105c <prvIsQueueFull>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d018      	beq.n	8000bd0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f822 	bl	8001bf0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bae:	f000 f9ed 	bl	8000f8c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000bb2:	f000 fd73 	bl	800169c <xTaskResumeAll>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f47f af62 	bne.w	8000a82 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <xQueueGenericSend+0x248>)
 8000bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	f3bf 8f4f 	dsb	sy
 8000bca:	f3bf 8f6f 	isb	sy
 8000bce:	e758      	b.n	8000a82 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bd2:	f000 f9db 	bl	8000f8c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000bd6:	f000 fd61 	bl	800169c <xTaskResumeAll>
 8000bda:	e752      	b.n	8000a82 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bde:	f000 f9d5 	bl	8000f8c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000be2:	f000 fd5b 	bl	800169c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 ff47 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4601      	mov	r1, r0
 8000bfa:	205a      	movs	r0, #90	; 0x5a
 8000bfc:	f004 fa86 	bl	800510c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000c00:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3738      	adds	r7, #56	; 0x38
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000ed04 	.word	0xe000ed04

08000c10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b08f      	sub	sp, #60	; 0x3c
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10a      	bne.n	8000c40 <xQueueReceive+0x30>
        __asm volatile
 8000c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2e:	f383 8811 	msr	BASEPRI, r3
 8000c32:	f3bf 8f6f 	isb	sy
 8000c36:	f3bf 8f4f 	dsb	sy
 8000c3a:	623b      	str	r3, [r7, #32]
    }
 8000c3c:	bf00      	nop
 8000c3e:	e7fe      	b.n	8000c3e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d103      	bne.n	8000c4e <xQueueReceive+0x3e>
 8000c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <xQueueReceive+0x42>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <xQueueReceive+0x44>
 8000c52:	2300      	movs	r3, #0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10a      	bne.n	8000c6e <xQueueReceive+0x5e>
        __asm volatile
 8000c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c5c:	f383 8811 	msr	BASEPRI, r3
 8000c60:	f3bf 8f6f 	isb	sy
 8000c64:	f3bf 8f4f 	dsb	sy
 8000c68:	61fb      	str	r3, [r7, #28]
    }
 8000c6a:	bf00      	nop
 8000c6c:	e7fe      	b.n	8000c6c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c6e:	f001 fa3d 	bl	80020ec <xTaskGetSchedulerState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <xQueueReceive+0x6e>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <xQueueReceive+0x72>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <xQueueReceive+0x74>
 8000c82:	2300      	movs	r3, #0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10a      	bne.n	8000c9e <xQueueReceive+0x8e>
        __asm volatile
 8000c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8c:	f383 8811 	msr	BASEPRI, r3
 8000c90:	f3bf 8f6f 	isb	sy
 8000c94:	f3bf 8f4f 	dsb	sy
 8000c98:	61bb      	str	r3, [r7, #24]
    }
 8000c9a:	bf00      	nop
 8000c9c:	e7fe      	b.n	8000c9c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c9e:	f002 f931 	bl	8002f04 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d02f      	beq.n	8000d0e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cb2:	f000 f945 	bl	8000f40 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 fedf 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f004 fedb 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2101      	movs	r1, #1
 8000ccc:	9100      	str	r1, [sp, #0]
 8000cce:	4621      	mov	r1, r4
 8000cd0:	205c      	movs	r0, #92	; 0x5c
 8000cd2:	f004 fa1b 	bl	800510c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	1e5a      	subs	r2, r3, #1
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00f      	beq.n	8000d06 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce8:	3310      	adds	r3, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 ffec 	bl	8001cc8 <xTaskRemoveFromEventList>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <xQueueReceive+0x21c>)
 8000cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	f3bf 8f4f 	dsb	sy
 8000d02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d06:	f002 f92d 	bl	8002f64 <vPortExitCritical>
                return pdPASS;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e08a      	b.n	8000e24 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d113      	bne.n	8000d3c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d14:	f002 f926 	bl	8002f64 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 feae 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000d20:	4604      	mov	r4, r0
 8000d22:	2000      	movs	r0, #0
 8000d24:	f004 feaa 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	9100      	str	r1, [sp, #0]
 8000d30:	4621      	mov	r1, r4
 8000d32:	205c      	movs	r0, #92	; 0x5c
 8000d34:	f004 f9ea 	bl	800510c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e073      	b.n	8000e24 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d106      	bne.n	8000d50 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 f896 	bl	8001e78 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d50:	f002 f908 	bl	8002f64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d54:	f000 fc94 	bl	8001680 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d58:	f002 f8d4 	bl	8002f04 <vPortEnterCritical>
 8000d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d103      	bne.n	8000d72 <xQueueReceive+0x162>
 8000d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7e:	d103      	bne.n	8000d88 <xQueueReceive+0x178>
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d88:	f002 f8ec 	bl	8002f64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d8c:	1d3a      	adds	r2, r7, #4
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 f885 	bl	8001ea4 <xTaskCheckForTimeOut>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d124      	bne.n	8000dea <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000da2:	f000 f945 	bl	8001030 <prvIsQueueEmpty>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d018      	beq.n	8000dde <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	3324      	adds	r3, #36	; 0x24
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 ff1b 	bl	8001bf0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dbc:	f000 f8e6 	bl	8000f8c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000dc0:	f000 fc6c 	bl	800169c <xTaskResumeAll>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f47f af69 	bne.w	8000c9e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <xQueueReceive+0x21c>)
 8000dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	f3bf 8f4f 	dsb	sy
 8000dd8:	f3bf 8f6f 	isb	sy
 8000ddc:	e75f      	b.n	8000c9e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000de0:	f000 f8d4 	bl	8000f8c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000de4:	f000 fc5a 	bl	800169c <xTaskResumeAll>
 8000de8:	e759      	b.n	8000c9e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dec:	f000 f8ce 	bl	8000f8c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000df0:	f000 fc54 	bl	800169c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000df6:	f000 f91b 	bl	8001030 <prvIsQueueEmpty>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f43f af4e 	beq.w	8000c9e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 fe39 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f004 fe35 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8000e12:	4602      	mov	r2, r0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2101      	movs	r1, #1
 8000e18:	9100      	str	r1, [sp, #0]
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	205c      	movs	r0, #92	; 0x5c
 8000e1e:	f004 f975 	bl	800510c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e22:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3734      	adds	r7, #52	; 0x34
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000ed04 	.word	0xe000ed04

08000e30 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10a      	bne.n	8000e54 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8000e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e42:	f383 8811 	msr	BASEPRI, r3
 8000e46:	f3bf 8f6f 	isb	sy
 8000e4a:	f3bf 8f4f 	dsb	sy
 8000e4e:	60bb      	str	r3, [r7, #8]
    }
 8000e50:	bf00      	nop
 8000e52:	e7fe      	b.n	8000e52 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8000e54:	f002 f856 	bl	8002f04 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8000e5e:	f002 f881 	bl	8002f64 <vPortExitCritical>

    return uxReturn;
 8000e62:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e80:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10d      	bne.n	8000ea6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d14d      	bne.n	8000f2e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 f946 	bl	8002128 <xTaskPriorityDisinherit>
 8000e9c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	e043      	b.n	8000f2e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d119      	bne.n	8000ee0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6858      	ldr	r0, [r3, #4]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	f007 faf0 	bl	800849c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	441a      	add	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d32b      	bcc.n	8000f2e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	e026      	b.n	8000f2e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	68d8      	ldr	r0, [r3, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	f007 fad6 	bl	800849c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	68da      	ldr	r2, [r3, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	425b      	negs	r3, r3
 8000efa:	441a      	add	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	425b      	negs	r3, r3
 8000f16:	441a      	add	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d105      	bne.n	8000f2e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000f36:	697b      	ldr	r3, [r7, #20]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d018      	beq.n	8000f84 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	441a      	add	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d303      	bcc.n	8000f74 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68d9      	ldr	r1, [r3, #12]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f007 fa8c 	bl	800849c <memcpy>
    }
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f94:	f001 ffb6 	bl	8002f04 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f9e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fa0:	e011      	b.n	8000fc6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d012      	beq.n	8000fd0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3324      	adds	r3, #36	; 0x24
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fe8a 	bl	8001cc8 <xTaskRemoveFromEventList>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000fba:	f000 ffd9 	bl	8001f70 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dce9      	bgt.n	8000fa2 <prvUnlockQueue+0x16>
 8000fce:	e000      	b.n	8000fd2 <prvUnlockQueue+0x46>
                    break;
 8000fd0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	22ff      	movs	r2, #255	; 0xff
 8000fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000fda:	f001 ffc3 	bl	8002f64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000fde:	f001 ff91 	bl	8002f04 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fe8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fea:	e011      	b.n	8001010 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d012      	beq.n	800101a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fe65 	bl	8001cc8 <xTaskRemoveFromEventList>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001004:	f000 ffb4 	bl	8001f70 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	3b01      	subs	r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dce9      	bgt.n	8000fec <prvUnlockQueue+0x60>
 8001018:	e000      	b.n	800101c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800101a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001024:	f001 ff9e 	bl	8002f64 <vPortExitCritical>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001038:	f001 ff64 	bl	8002f04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001044:	2301      	movs	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e001      	b.n	800104e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800104e:	f001 ff89 	bl	8002f64 <vPortExitCritical>

    return xReturn;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001064:	f001 ff4e 	bl	8002f04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001070:	429a      	cmp	r2, r3
 8001072:	d102      	bne.n	800107a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e001      	b.n	800107e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800107e:	f001 ff71 	bl	8002f64 <vPortExitCritical>

    return xReturn;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80010a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a4:	f383 8811 	msr	BASEPRI, r3
 80010a8:	f3bf 8f6f 	isb	sy
 80010ac:	f3bf 8f4f 	dsb	sy
 80010b0:	60fb      	str	r3, [r7, #12]
    }
 80010b2:	bf00      	nop
 80010b4:	e7fe      	b.n	80010b4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d024      	beq.n	8001106 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e01e      	b.n	8001100 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <vQueueAddToRegistry+0xa8>)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d105      	bne.n	80010de <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <vQueueAddToRegistry+0xa8>)
 80010d8:	4413      	add	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
                    break;
 80010dc:	e013      	b.n	8001106 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10a      	bne.n	80010fa <vQueueAddToRegistry+0x6e>
 80010e4:	4a13      	ldr	r2, [pc, #76]	; (8001134 <vQueueAddToRegistry+0xa8>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <vQueueAddToRegistry+0xa8>)
 80010f6:	4413      	add	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b07      	cmp	r3, #7
 8001104:	d9dd      	bls.n	80010c2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00f      	beq.n	800112c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	f004 fcae 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8001120:	4601      	mov	r1, r0
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	2071      	movs	r0, #113	; 0x71
 8001128:	f003 ff20 	bl	8004f6c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000088 	.word	0x20000088

08001138 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001148:	f001 fedc 	bl	8002f04 <vPortEnterCritical>
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d103      	bne.n	8001162 <vQueueWaitForMessageRestricted+0x2a>
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001168:	b25b      	sxtb	r3, r3
 800116a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116e:	d103      	bne.n	8001178 <vQueueWaitForMessageRestricted+0x40>
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001178:	f001 fef4 	bl	8002f64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	2b00      	cmp	r3, #0
 8001182:	d106      	bne.n	8001192 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3324      	adds	r3, #36	; 0x24
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fd53 	bl	8001c38 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff fefa 	bl	8000f8c <prvUnlockQueue>
    }
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 ffd1 	bl	800315c <pvPortMalloc>
 80011ba:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011c2:	2058      	movs	r0, #88	; 0x58
 80011c4:	f001 ffca 	bl	800315c <pvPortMalloc>
 80011c8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d008      	beq.n	80011e2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80011d0:	2258      	movs	r2, #88	; 0x58
 80011d2:	2100      	movs	r1, #0
 80011d4:	69f8      	ldr	r0, [r7, #28]
 80011d6:	f007 f933 	bl	8008440 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
 80011e0:	e005      	b.n	80011ee <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f002 f874 	bl	80032d0 <vPortFree>
 80011e8:	e001      	b.n	80011ee <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d013      	beq.n	800121c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	2300      	movs	r3, #0
 80011f8:	9303      	str	r3, [sp, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 f80e 	bl	800122c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001210:	69f8      	ldr	r0, [r7, #28]
 8001212:	f000 f899 	bl	8001348 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	e002      	b.n	8001222 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001222:	69bb      	ldr	r3, [r7, #24]
    }
 8001224:	4618      	mov	r0, r3
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800123a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	461a      	mov	r2, r3
 8001244:	21a5      	movs	r1, #165	; 0xa5
 8001246:	f007 f8fb 	bl	8008440 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001254:	3b01      	subs	r3, #1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	f023 0307 	bic.w	r3, r3, #7
 8001262:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00a      	beq.n	8001284 <prvInitialiseNewTask+0x58>
        __asm volatile
 800126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001272:	f383 8811 	msr	BASEPRI, r3
 8001276:	f3bf 8f6f 	isb	sy
 800127a:	f3bf 8f4f 	dsb	sy
 800127e:	617b      	str	r3, [r7, #20]
    }
 8001280:	bf00      	nop
 8001282:	e7fe      	b.n	8001282 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d01e      	beq.n	80012c8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	e012      	b.n	80012b6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4413      	add	r3, r2
 8001296:	7819      	ldrb	r1, [r3, #0]
 8001298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	4413      	add	r3, r2
 800129e:	3334      	adds	r3, #52	; 0x34
 80012a0:	460a      	mov	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	3301      	adds	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d9e9      	bls.n	8001290 <prvInitialiseNewTask+0x64>
 80012bc:	e000      	b.n	80012c0 <prvInitialiseNewTask+0x94>
            {
                break;
 80012be:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d90a      	bls.n	80012e4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80012ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d2:	f383 8811 	msr	BASEPRI, r3
 80012d6:	f3bf 8f6f 	isb	sy
 80012da:	f3bf 8f4f 	dsb	sy
 80012de:	613b      	str	r3, [r7, #16]
    }
 80012e0:	bf00      	nop
 80012e2:	e7fe      	b.n	80012e2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d901      	bls.n	80012ee <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012ea:	2304      	movs	r3, #4
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80012f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fc:	3304      	adds	r3, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f9c4 	bl	800068c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	3318      	adds	r3, #24
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f9bf 	bl	800068c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001312:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	f1c3 0205 	rsb	r2, r3, #5
 800131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	68f9      	ldr	r1, [r7, #12]
 8001328:	69b8      	ldr	r0, [r7, #24]
 800132a:	f001 fc3d 	bl	8002ba8 <pxPortInitialiseStack>
 800132e:	4602      	mov	r2, r0
 8001330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001332:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800133e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001350:	f001 fdd8 	bl	8002f04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <prvAddNewTaskToReadyList+0x14c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <prvAddNewTaskToReadyList+0x14c>)
 800135c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800135e:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <prvAddNewTaskToReadyList+0x150>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001366:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <prvAddNewTaskToReadyList+0x150>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800136c:	4b49      	ldr	r3, [pc, #292]	; (8001494 <prvAddNewTaskToReadyList+0x14c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d110      	bne.n	8001396 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001374:	f000 fe20 	bl	8001fb8 <prvInitialiseTaskLists>
 8001378:	e00d      	b.n	8001396 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800137a:	4b48      	ldr	r3, [pc, #288]	; (800149c <prvAddNewTaskToReadyList+0x154>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <prvAddNewTaskToReadyList+0x150>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	429a      	cmp	r2, r3
 800138e:	d802      	bhi.n	8001396 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001390:	4a41      	ldr	r2, [pc, #260]	; (8001498 <prvAddNewTaskToReadyList+0x150>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <prvAddNewTaskToReadyList+0x158>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a40      	ldr	r2, [pc, #256]	; (80014a0 <prvAddNewTaskToReadyList+0x158>)
 800139e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <prvAddNewTaskToReadyList+0x158>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d016      	beq.n	80013dc <prvAddNewTaskToReadyList+0x94>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fa9d 	bl	80058f0 <SEGGER_SYSVIEW_OnTaskCreate>
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	461d      	mov	r5, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	461c      	mov	r4, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	1ae3      	subs	r3, r4, r3
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	462b      	mov	r3, r5
 80013d8:	f002 f93c 	bl	8003654 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 fb0a 	bl	80059f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	2201      	movs	r2, #1
 80013ea:	409a      	lsls	r2, r3
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <prvAddNewTaskToReadyList+0x15c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	4a2c      	ldr	r2, [pc, #176]	; (80014a4 <prvAddNewTaskToReadyList+0x15c>)
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fa:	492b      	ldr	r1, [pc, #172]	; (80014a8 <prvAddNewTaskToReadyList+0x160>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	3204      	adds	r2, #4
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1d1a      	adds	r2, r3, #4
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <prvAddNewTaskToReadyList+0x160>)
 800143a:	441a      	add	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	615a      	str	r2, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001444:	4918      	ldr	r1, [pc, #96]	; (80014a8 <prvAddNewTaskToReadyList+0x160>)
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <prvAddNewTaskToReadyList+0x160>)
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4403      	add	r3, r0
 8001460:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001462:	f001 fd7f 	bl	8002f64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <prvAddNewTaskToReadyList+0x154>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00e      	beq.n	800148c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <prvAddNewTaskToReadyList+0x150>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <prvAddNewTaskToReadyList+0x164>)
 800147e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	f3bf 8f4f 	dsb	sy
 8001488:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bdb0      	pop	{r4, r5, r7, pc}
 8001494:	200001a0 	.word	0x200001a0
 8001498:	200000c8 	.word	0x200000c8
 800149c:	200001ac 	.word	0x200001ac
 80014a0:	200001bc 	.word	0x200001bc
 80014a4:	200001a8 	.word	0x200001a8
 80014a8:	200000cc 	.word	0x200000cc
 80014ac:	e000ed04 	.word	0xe000ed04

080014b0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10a      	bne.n	80014da <xTaskDelayUntil+0x2a>
        __asm volatile
 80014c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c8:	f383 8811 	msr	BASEPRI, r3
 80014cc:	f3bf 8f6f 	isb	sy
 80014d0:	f3bf 8f4f 	dsb	sy
 80014d4:	617b      	str	r3, [r7, #20]
    }
 80014d6:	bf00      	nop
 80014d8:	e7fe      	b.n	80014d8 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10a      	bne.n	80014f6 <xTaskDelayUntil+0x46>
        __asm volatile
 80014e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e4:	f383 8811 	msr	BASEPRI, r3
 80014e8:	f3bf 8f6f 	isb	sy
 80014ec:	f3bf 8f4f 	dsb	sy
 80014f0:	613b      	str	r3, [r7, #16]
    }
 80014f2:	bf00      	nop
 80014f4:	e7fe      	b.n	80014f4 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <xTaskDelayUntil+0xf8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00a      	beq.n	8001514 <xTaskDelayUntil+0x64>
        __asm volatile
 80014fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001502:	f383 8811 	msr	BASEPRI, r3
 8001506:	f3bf 8f6f 	isb	sy
 800150a:	f3bf 8f4f 	dsb	sy
 800150e:	60fb      	str	r3, [r7, #12]
    }
 8001510:	bf00      	nop
 8001512:	e7fe      	b.n	8001512 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8001514:	f000 f8b4 	bl	8001680 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <xTaskDelayUntil+0xfc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	4413      	add	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a3a      	ldr	r2, [r7, #32]
 800152e:	429a      	cmp	r2, r3
 8001530:	d20b      	bcs.n	800154a <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	429a      	cmp	r2, r3
 800153a:	d211      	bcs.n	8001560 <xTaskDelayUntil+0xb0>
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	429a      	cmp	r2, r3
 8001542:	d90d      	bls.n	8001560 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8001544:	2301      	movs	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
 8001548:	e00a      	b.n	8001560 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	429a      	cmp	r2, r3
 8001552:	d303      	bcc.n	800155c <xTaskDelayUntil+0xac>
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	429a      	cmp	r2, r3
 800155a:	d901      	bls.n	8001560 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800155c:	2301      	movs	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 800156c:	2024      	movs	r0, #36	; 0x24
 800156e:	f003 fca3 	bl	8004eb8 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f001 f810 	bl	80025a0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8001580:	f000 f88c 	bl	800169c <xTaskResumeAll>
 8001584:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d107      	bne.n	800159c <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <xTaskDelayUntil+0x100>)
 800158e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f3bf 8f4f 	dsb	sy
 8001598:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800159e:	4618      	mov	r0, r3
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200001c8 	.word	0x200001c8
 80015ac:	200001a4 	.word	0x200001a4
 80015b0:	e000ed04 	.word	0xe000ed04

080015b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <vTaskStartScheduler+0xac>)
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	2282      	movs	r2, #130	; 0x82
 80015c6:	4927      	ldr	r1, [pc, #156]	; (8001664 <vTaskStartScheduler+0xb0>)
 80015c8:	4827      	ldr	r0, [pc, #156]	; (8001668 <vTaskStartScheduler+0xb4>)
 80015ca:	f7ff fde9 	bl	80011a0 <xTaskCreate>
 80015ce:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80015d6:	f001 f863 	bl	80026a0 <xTimerCreateTimerTask>
 80015da:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d129      	bne.n	8001636 <vTaskStartScheduler+0x82>
        __asm volatile
 80015e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e6:	f383 8811 	msr	BASEPRI, r3
 80015ea:	f3bf 8f6f 	isb	sy
 80015ee:	f3bf 8f4f 	dsb	sy
 80015f2:	60bb      	str	r3, [r7, #8]
    }
 80015f4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <vTaskStartScheduler+0xb8>)
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <vTaskStartScheduler+0xbc>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <vTaskStartScheduler+0xc0>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <vTaskStartScheduler+0xc4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3334      	adds	r3, #52	; 0x34
 8001610:	2205      	movs	r2, #5
 8001612:	4914      	ldr	r1, [pc, #80]	; (8001664 <vTaskStartScheduler+0xb0>)
 8001614:	4618      	mov	r0, r3
 8001616:	f006 ff03 	bl	8008420 <memcmp>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <vTaskStartScheduler+0x78>
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <vTaskStartScheduler+0xc4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f004 f9a5 	bl	8005974 <SEGGER_SYSVIEW_OnTaskStartExec>
 800162a:	e001      	b.n	8001630 <vTaskStartScheduler+0x7c>
 800162c:	f004 f944 	bl	80058b8 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001630:	f001 fb48 	bl	8002cc4 <xPortStartScheduler>
 8001634:	e00e      	b.n	8001654 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d10a      	bne.n	8001654 <vTaskStartScheduler+0xa0>
        __asm volatile
 800163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	607b      	str	r3, [r7, #4]
    }
 8001650:	bf00      	nop
 8001652:	e7fe      	b.n	8001652 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <vTaskStartScheduler+0xc8>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200001c4 	.word	0x200001c4
 8001664:	08008d70 	.word	0x08008d70
 8001668:	08001f89 	.word	0x08001f89
 800166c:	200001c0 	.word	0x200001c0
 8001670:	200001ac 	.word	0x200001ac
 8001674:	200001a4 	.word	0x200001a4
 8001678:	200000c8 	.word	0x200000c8
 800167c:	20000000 	.word	0x20000000

08001680 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <vTaskSuspendAll+0x18>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <vTaskSuspendAll+0x18>)
 800168c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	200001c8 	.word	0x200001c8

0800169c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80016aa:	4b73      	ldr	r3, [pc, #460]	; (8001878 <xTaskResumeAll+0x1dc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10a      	bne.n	80016c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80016b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b6:	f383 8811 	msr	BASEPRI, r3
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	607b      	str	r3, [r7, #4]
    }
 80016c4:	bf00      	nop
 80016c6:	e7fe      	b.n	80016c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80016c8:	f001 fc1c 	bl	8002f04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <xTaskResumeAll+0x1dc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	4a69      	ldr	r2, [pc, #420]	; (8001878 <xTaskResumeAll+0x1dc>)
 80016d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016d6:	4b68      	ldr	r3, [pc, #416]	; (8001878 <xTaskResumeAll+0x1dc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 80c4 	bne.w	8001868 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80016e0:	4b66      	ldr	r3, [pc, #408]	; (800187c <xTaskResumeAll+0x1e0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80bf 	beq.w	8001868 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016ea:	e08e      	b.n	800180a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016ec:	4b64      	ldr	r3, [pc, #400]	; (8001880 <xTaskResumeAll+0x1e4>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	6a12      	ldr	r2, [r2, #32]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	69d2      	ldr	r2, [r2, #28]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3318      	adds	r3, #24
 8001716:	429a      	cmp	r2, r3
 8001718:	d103      	bne.n	8001722 <xTaskResumeAll+0x86>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	2200      	movs	r2, #0
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	68d2      	ldr	r2, [r2, #12]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	6892      	ldr	r2, [r2, #8]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	3304      	adds	r3, #4
 8001754:	429a      	cmp	r2, r3
 8001756:	d103      	bne.n	8001760 <xTaskResumeAll+0xc4>
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	4618      	mov	r0, r3
 8001774:	f004 f940 	bl	80059f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	2201      	movs	r2, #1
 800177e:	409a      	lsls	r2, r3
 8001780:	4b40      	ldr	r3, [pc, #256]	; (8001884 <xTaskResumeAll+0x1e8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4313      	orrs	r3, r2
 8001786:	4a3f      	ldr	r2, [pc, #252]	; (8001884 <xTaskResumeAll+0x1e8>)
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178e:	493e      	ldr	r1, [pc, #248]	; (8001888 <xTaskResumeAll+0x1ec>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3304      	adds	r3, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	3204      	adds	r2, #4
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	1d1a      	adds	r2, r3, #4
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4a2e      	ldr	r2, [pc, #184]	; (8001888 <xTaskResumeAll+0x1ec>)
 80017ce:	441a      	add	r2, r3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	492b      	ldr	r1, [pc, #172]	; (8001888 <xTaskResumeAll+0x1ec>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1c59      	adds	r1, r3, #1
 80017e8:	4827      	ldr	r0, [pc, #156]	; (8001888 <xTaskResumeAll+0x1ec>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4403      	add	r3, r0
 80017f4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <xTaskResumeAll+0x1f0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	429a      	cmp	r2, r3
 8001802:	d302      	bcc.n	800180a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <xTaskResumeAll+0x1f4>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <xTaskResumeAll+0x1e4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f47f af6c 	bne.w	80016ec <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800181a:	f000 fc4b 	bl	80020b4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <xTaskResumeAll+0x1f8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d010      	beq.n	800184c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800182a:	f000 f859 	bl	80018e0 <xTaskIncrementTick>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <xTaskResumeAll+0x1f4>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3b01      	subs	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f1      	bne.n	800182a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <xTaskResumeAll+0x1f8>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <xTaskResumeAll+0x1f4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <xTaskResumeAll+0x1fc>)
 800185a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f3bf 8f4f 	dsb	sy
 8001864:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001868:	f001 fb7c 	bl	8002f64 <vPortExitCritical>

    return xAlreadyYielded;
 800186c:	69bb      	ldr	r3, [r7, #24]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001c8 	.word	0x200001c8
 800187c:	200001a0 	.word	0x200001a0
 8001880:	20000160 	.word	0x20000160
 8001884:	200001a8 	.word	0x200001a8
 8001888:	200000cc 	.word	0x200000cc
 800188c:	200000c8 	.word	0x200000c8
 8001890:	200001b4 	.word	0x200001b4
 8001894:	200001b0 	.word	0x200001b0
 8001898:	e000ed04 	.word	0xe000ed04

0800189c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <xTaskGetTickCount+0x1c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200001a4 	.word	0x200001a4

080018bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80018c2:	f001 fc0b 	bl	80030dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <xTaskGetTickCountFromISR+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80018d0:	683b      	ldr	r3, [r7, #0]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200001a4 	.word	0x200001a4

080018e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018ea:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <xTaskIncrementTick+0x208>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80f0 	bne.w	8001ad4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80018f4:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <xTaskIncrementTick+0x20c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80018fc:	4a7b      	ldr	r2, [pc, #492]	; (8001aec <xTaskIncrementTick+0x20c>)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d120      	bne.n	800194a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001908:	4b79      	ldr	r3, [pc, #484]	; (8001af0 <xTaskIncrementTick+0x210>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <xTaskIncrementTick+0x48>
        __asm volatile
 8001912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	607b      	str	r3, [r7, #4]
    }
 8001924:	bf00      	nop
 8001926:	e7fe      	b.n	8001926 <xTaskIncrementTick+0x46>
 8001928:	4b71      	ldr	r3, [pc, #452]	; (8001af0 <xTaskIncrementTick+0x210>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	4b71      	ldr	r3, [pc, #452]	; (8001af4 <xTaskIncrementTick+0x214>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6f      	ldr	r2, [pc, #444]	; (8001af0 <xTaskIncrementTick+0x210>)
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4a6f      	ldr	r2, [pc, #444]	; (8001af4 <xTaskIncrementTick+0x214>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b6e      	ldr	r3, [pc, #440]	; (8001af8 <xTaskIncrementTick+0x218>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a6d      	ldr	r2, [pc, #436]	; (8001af8 <xTaskIncrementTick+0x218>)
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	f000 fbb5 	bl	80020b4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800194a:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <xTaskIncrementTick+0x21c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6a3a      	ldr	r2, [r7, #32]
 8001950:	429a      	cmp	r2, r3
 8001952:	f0c0 80aa 	bcc.w	8001aaa <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001956:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <xTaskIncrementTick+0x210>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001960:	4b66      	ldr	r3, [pc, #408]	; (8001afc <xTaskIncrementTick+0x21c>)
 8001962:	f04f 32ff 	mov.w	r2, #4294967295
 8001966:	601a      	str	r2, [r3, #0]
                    break;
 8001968:	e09f      	b.n	8001aaa <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <xTaskIncrementTick+0x210>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	429a      	cmp	r2, r3
 8001980:	d203      	bcs.n	800198a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001982:	4a5e      	ldr	r2, [pc, #376]	; (8001afc <xTaskIncrementTick+0x21c>)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001988:	e08f      	b.n	8001aaa <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	68d2      	ldr	r2, [r2, #12]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	6892      	ldr	r2, [r2, #8]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	3304      	adds	r3, #4
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d103      	bne.n	80019b8 <xTaskIncrementTick+0xd8>
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1e5a      	subs	r2, r3, #1
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01e      	beq.n	8001a0e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	6a12      	ldr	r2, [r2, #32]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69d2      	ldr	r2, [r2, #28]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	3318      	adds	r3, #24
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d103      	bne.n	80019fe <xTaskIncrementTick+0x11e>
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	6a1a      	ldr	r2, [r3, #32]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2200      	movs	r2, #0
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	1e5a      	subs	r2, r3, #1
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fff1 	bl	80059f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <xTaskIncrementTick+0x220>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	4a36      	ldr	r2, [pc, #216]	; (8001b00 <xTaskIncrementTick+0x220>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2c:	4935      	ldr	r1, [pc, #212]	; (8001b04 <xTaskIncrementTick+0x224>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3304      	adds	r3, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	3204      	adds	r2, #4
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1d1a      	adds	r2, r3, #4
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <xTaskIncrementTick+0x224>)
 8001a6c:	441a      	add	r2, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a76:	4923      	ldr	r1, [pc, #140]	; (8001b04 <xTaskIncrementTick+0x224>)
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1c59      	adds	r1, r3, #1
 8001a86:	481f      	ldr	r0, [pc, #124]	; (8001b04 <xTaskIncrementTick+0x224>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4403      	add	r3, r0
 8001a92:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <xTaskIncrementTick+0x228>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	f67f af59 	bls.w	8001956 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aa8:	e755      	b.n	8001956 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <xTaskIncrementTick+0x228>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	4914      	ldr	r1, [pc, #80]	; (8001b04 <xTaskIncrementTick+0x224>)
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d901      	bls.n	8001ac6 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <xTaskIncrementTick+0x22c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	e004      	b.n	8001ade <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <xTaskIncrementTick+0x230>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <xTaskIncrementTick+0x230>)
 8001adc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200001c8 	.word	0x200001c8
 8001aec:	200001a4 	.word	0x200001a4
 8001af0:	20000158 	.word	0x20000158
 8001af4:	2000015c 	.word	0x2000015c
 8001af8:	200001b8 	.word	0x200001b8
 8001afc:	200001c0 	.word	0x200001c0
 8001b00:	200001a8 	.word	0x200001a8
 8001b04:	200000cc 	.word	0x200000cc
 8001b08:	200000c8 	.word	0x200000c8
 8001b0c:	200001b4 	.word	0x200001b4
 8001b10:	200001b0 	.word	0x200001b0

08001b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <vTaskSwitchContext+0xc4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <vTaskSwitchContext+0xc8>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001b28:	e052      	b.n	8001bd0 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <vTaskSwitchContext+0xc8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <vTaskSwitchContext+0xcc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	f1c3 031f 	rsb	r3, r3, #31
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	4927      	ldr	r1, [pc, #156]	; (8001be4 <vTaskSwitchContext+0xd0>)
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10a      	bne.n	8001b70 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	607b      	str	r3, [r7, #4]
    }
 8001b6c:	bf00      	nop
 8001b6e:	e7fe      	b.n	8001b6e <vTaskSwitchContext+0x5a>
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <vTaskSwitchContext+0xd0>)
 8001b7c:	4413      	add	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	3308      	adds	r3, #8
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d104      	bne.n	8001ba0 <vTaskSwitchContext+0x8c>
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <vTaskSwitchContext+0xd4>)
 8001ba8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <vTaskSwitchContext+0xd4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3334      	adds	r3, #52	; 0x34
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <vTaskSwitchContext+0xd8>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f006 fc33 	bl	8008420 <memcmp>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <vTaskSwitchContext+0xb8>
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <vTaskSwitchContext+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fed5 	bl	8005974 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001bca:	e001      	b.n	8001bd0 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8001bcc:	f003 fe74 	bl	80058b8 <SEGGER_SYSVIEW_OnIdle>
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200001c8 	.word	0x200001c8
 8001bdc:	200001b4 	.word	0x200001b4
 8001be0:	200001a8 	.word	0x200001a8
 8001be4:	200000cc 	.word	0x200000cc
 8001be8:	200000c8 	.word	0x200000c8
 8001bec:	08008d70 	.word	0x08008d70

08001bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c04:	f383 8811 	msr	BASEPRI, r3
 8001c08:	f3bf 8f6f 	isb	sy
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	60fb      	str	r3, [r7, #12]
    }
 8001c12:	bf00      	nop
 8001c14:	e7fe      	b.n	8001c14 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <vTaskPlaceOnEventList+0x44>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3318      	adds	r3, #24
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe fd65 	bl	80006ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c24:	2101      	movs	r1, #1
 8001c26:	6838      	ldr	r0, [r7, #0]
 8001c28:	f000 fcba 	bl	80025a0 <prvAddCurrentTaskToDelayedList>
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200000c8 	.word	0x200000c8

08001c38 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4e:	f383 8811 	msr	BASEPRI, r3
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	613b      	str	r3, [r7, #16]
    }
 8001c5c:	bf00      	nop
 8001c5e:	e7fe      	b.n	8001c5e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	61da      	str	r2, [r3, #28]
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	6892      	ldr	r2, [r2, #8]
 8001c76:	621a      	str	r2, [r3, #32]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	3218      	adds	r2, #24
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f103 0218 	add.w	r2, r3, #24
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001cae:	2024      	movs	r0, #36	; 0x24
 8001cb0:	f003 f902 	bl	8004eb8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	68b8      	ldr	r0, [r7, #8]
 8001cb8:	f000 fc72 	bl	80025a0 <prvAddCurrentTaskToDelayedList>
    }
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200000c8 	.word	0x200000c8

08001cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10a      	bne.n	8001cf4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce2:	f383 8811 	msr	BASEPRI, r3
 8001ce6:	f3bf 8f6f 	isb	sy
 8001cea:	f3bf 8f4f 	dsb	sy
 8001cee:	60fb      	str	r3, [r7, #12]
    }
 8001cf0:	bf00      	nop
 8001cf2:	e7fe      	b.n	8001cf2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	6a3a      	ldr	r2, [r7, #32]
 8001d00:	6a12      	ldr	r2, [r2, #32]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	6a3a      	ldr	r2, [r7, #32]
 8001d0a:	69d2      	ldr	r2, [r2, #28]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	3318      	adds	r3, #24
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d103      	bne.n	8001d22 <xTaskRemoveFromEventList+0x5a>
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	6a1a      	ldr	r2, [r3, #32]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	2200      	movs	r2, #0
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d32:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <xTaskRemoveFromEventList+0x198>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d162      	bne.n	8001e00 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	6a3a      	ldr	r2, [r7, #32]
 8001d46:	68d2      	ldr	r2, [r2, #12]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	6a3a      	ldr	r2, [r7, #32]
 8001d50:	6892      	ldr	r2, [r2, #8]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d103      	bne.n	8001d68 <xTaskRemoveFromEventList+0xa0>
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1e5a      	subs	r2, r3, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fe3c 	bl	80059f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	2201      	movs	r2, #1
 8001d86:	409a      	lsls	r2, r3
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <xTaskRemoveFromEventList+0x19c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	4a35      	ldr	r2, [pc, #212]	; (8001e64 <xTaskRemoveFromEventList+0x19c>)
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d96:	4934      	ldr	r1, [pc, #208]	; (8001e68 <xTaskRemoveFromEventList+0x1a0>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3304      	adds	r3, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	6a3a      	ldr	r2, [r7, #32]
 8001dbc:	3204      	adds	r2, #4
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	1d1a      	adds	r2, r3, #4
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <xTaskRemoveFromEventList+0x1a0>)
 8001dd6:	441a      	add	r2, r3
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	615a      	str	r2, [r3, #20]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	4921      	ldr	r1, [pc, #132]	; (8001e68 <xTaskRemoveFromEventList+0x1a0>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1c59      	adds	r1, r3, #1
 8001df0:	481d      	ldr	r0, [pc, #116]	; (8001e68 <xTaskRemoveFromEventList+0x1a0>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4403      	add	r3, r0
 8001dfc:	6019      	str	r1, [r3, #0]
 8001dfe:	e01b      	b.n	8001e38 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <xTaskRemoveFromEventList+0x1a4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	61da      	str	r2, [r3, #28]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	621a      	str	r2, [r3, #32]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	6a3a      	ldr	r2, [r7, #32]
 8001e1a:	3218      	adds	r2, #24
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f103 0218 	add.w	r2, r3, #24
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <xTaskRemoveFromEventList+0x1a4>)
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <xTaskRemoveFromEventList+0x1a4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <xTaskRemoveFromEventList+0x1a4>)
 8001e36:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <xTaskRemoveFromEventList+0x1a8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d905      	bls.n	8001e52 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001e46:	2301      	movs	r3, #1
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <xTaskRemoveFromEventList+0x1ac>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e001      	b.n	8001e56 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200001c8 	.word	0x200001c8
 8001e64:	200001a8 	.word	0x200001a8
 8001e68:	200000cc 	.word	0x200000cc
 8001e6c:	20000160 	.word	0x20000160
 8001e70:	200000c8 	.word	0x200000c8
 8001e74:	200001b4 	.word	0x200001b4

08001e78 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <vTaskInternalSetTimeOutState+0x24>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <vTaskInternalSetTimeOutState+0x28>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	605a      	str	r2, [r3, #4]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	200001b8 	.word	0x200001b8
 8001ea0:	200001a4 	.word	0x200001a4

08001ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	613b      	str	r3, [r7, #16]
    }
 8001ec6:	bf00      	nop
 8001ec8:	e7fe      	b.n	8001ec8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	60fb      	str	r3, [r7, #12]
    }
 8001ee2:	bf00      	nop
 8001ee4:	e7fe      	b.n	8001ee4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001ee6:	f001 f80d 	bl	8002f04 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <xTaskCheckForTimeOut+0xc4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f02:	d102      	bne.n	8001f0a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e026      	b.n	8001f58 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <xTaskCheckForTimeOut+0xc8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d00a      	beq.n	8001f2c <xTaskCheckForTimeOut+0x88>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d305      	bcc.n	8001f2c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e015      	b.n	8001f58 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20b      	bcs.n	8001f4e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	1ad2      	subs	r2, r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff98 	bl	8001e78 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e004      	b.n	8001f58 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001f58:	f001 f804 	bl	8002f64 <vPortExitCritical>

    return xReturn;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200001a4 	.word	0x200001a4
 8001f6c:	200001b8 	.word	0x200001b8

08001f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <vTaskMissedYield+0x14>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	200001b4 	.word	0x200001b4

08001f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f90:	f000 f852 	bl	8002038 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <prvIdleTask+0x28>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d9f9      	bls.n	8001f90 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <prvIdleTask+0x2c>)
 8001f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001fac:	e7f0      	b.n	8001f90 <prvIdleTask+0x8>
 8001fae:	bf00      	nop
 8001fb0:	200000cc 	.word	0x200000cc
 8001fb4:	e000ed04 	.word	0xe000ed04

08001fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	e00c      	b.n	8001fde <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <prvInitialiseTaskLists+0x60>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fb3a 	bl	800064c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d9ef      	bls.n	8001fc4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001fe4:	480d      	ldr	r0, [pc, #52]	; (800201c <prvInitialiseTaskLists+0x64>)
 8001fe6:	f7fe fb31 	bl	800064c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <prvInitialiseTaskLists+0x68>)
 8001fec:	f7fe fb2e 	bl	800064c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <prvInitialiseTaskLists+0x6c>)
 8001ff2:	f7fe fb2b 	bl	800064c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <prvInitialiseTaskLists+0x70>)
 8001ff8:	f7fe fb28 	bl	800064c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ffc:	480b      	ldr	r0, [pc, #44]	; (800202c <prvInitialiseTaskLists+0x74>)
 8001ffe:	f7fe fb25 	bl	800064c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <prvInitialiseTaskLists+0x78>)
 8002004:	4a05      	ldr	r2, [pc, #20]	; (800201c <prvInitialiseTaskLists+0x64>)
 8002006:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <prvInitialiseTaskLists+0x7c>)
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <prvInitialiseTaskLists+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200000cc 	.word	0x200000cc
 800201c:	20000130 	.word	0x20000130
 8002020:	20000144 	.word	0x20000144
 8002024:	20000160 	.word	0x20000160
 8002028:	20000174 	.word	0x20000174
 800202c:	2000018c 	.word	0x2000018c
 8002030:	20000158 	.word	0x20000158
 8002034:	2000015c 	.word	0x2000015c

08002038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800203e:	e019      	b.n	8002074 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002040:	f000 ff60 	bl	8002f04 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <prvCheckTasksWaitingTermination+0x50>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3304      	adds	r3, #4
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fb85 	bl	8000760 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <prvCheckTasksWaitingTermination+0x54>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3b01      	subs	r3, #1
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <prvCheckTasksWaitingTermination+0x54>)
 800205e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <prvCheckTasksWaitingTermination+0x58>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <prvCheckTasksWaitingTermination+0x58>)
 8002068:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800206a:	f000 ff7b 	bl	8002f64 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f810 	bl	8002094 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <prvCheckTasksWaitingTermination+0x58>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e1      	bne.n	8002040 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000174 	.word	0x20000174
 800208c:	200001a0 	.word	0x200001a0
 8002090:	20000188 	.word	0x20000188

08002094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 f915 	bl	80032d0 <vPortFree>
            vPortFree( pxTCB );
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f001 f912 	bl	80032d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <prvResetNextTaskUnblockTime+0x30>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <prvResetNextTaskUnblockTime+0x34>)
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80020ca:	e005      	b.n	80020d8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <prvResetNextTaskUnblockTime+0x30>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <prvResetNextTaskUnblockTime+0x34>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000158 	.word	0x20000158
 80020e8:	200001c0 	.word	0x200001c0

080020ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <xTaskGetSchedulerState+0x34>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80020fa:	2301      	movs	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	e008      	b.n	8002112 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <xTaskGetSchedulerState+0x38>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002108:	2302      	movs	r3, #2
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	e001      	b.n	8002112 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002112:	687b      	ldr	r3, [r7, #4]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	200001ac 	.word	0x200001ac
 8002124:	200001c8 	.word	0x200001c8

08002128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d068      	beq.n	8002210 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <xTaskPriorityDisinherit+0xf4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d00a      	beq.n	800215e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	60fb      	str	r3, [r7, #12]
    }
 800215a:	bf00      	nop
 800215c:	e7fe      	b.n	800215c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	60bb      	str	r3, [r7, #8]
    }
 8002178:	bf00      	nop
 800217a:	e7fe      	b.n	800217a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	429a      	cmp	r2, r3
 8002190:	d03e      	beq.n	8002210 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d13a      	bne.n	8002210 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	3304      	adds	r3, #4
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fade 	bl	8000760 <uxListRemove>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	2201      	movs	r2, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43da      	mvns	r2, r3
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <xTaskPriorityDisinherit+0xf8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4013      	ands	r3, r2
 80021bc:	4a18      	ldr	r2, [pc, #96]	; (8002220 <xTaskPriorityDisinherit+0xf8>)
 80021be:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4619      	mov	r1, r3
 80021c4:	204a      	movs	r0, #74	; 0x4a
 80021c6:	f002 fe95 	bl	8004ef4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f1c3 0205 	rsb	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	2201      	movs	r2, #1
 80021e4:	409a      	lsls	r2, r3
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <xTaskPriorityDisinherit+0xf8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <xTaskPriorityDisinherit+0xf8>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4a09      	ldr	r2, [pc, #36]	; (8002224 <xTaskPriorityDisinherit+0xfc>)
 80021fe:	441a      	add	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f7fe fa4d 	bl	80006a6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800220c:	2301      	movs	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002210:	697b      	ldr	r3, [r7, #20]
    }
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200000c8 	.word	0x200000c8
 8002220:	200001a8 	.word	0x200001a8
 8002224:	200000cc 	.word	0x200000cc

08002228 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	613b      	str	r3, [r7, #16]
    }
 800224e:	bf00      	nop
 8002250:	e7fe      	b.n	8002250 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002252:	f000 fe57 	bl	8002f04 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <xTaskGenericNotifyWait+0x108>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	3354      	adds	r3, #84	; 0x54
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d022      	beq.n	80022ae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <xTaskGenericNotifyWait+0x108>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	3214      	adds	r2, #20
 8002270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	43d2      	mvns	r2, r2
 8002278:	4011      	ands	r1, r2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	3214      	adds	r2, #20
 800227e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <xTaskGenericNotifyWait+0x108>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	3354      	adds	r3, #84	; 0x54
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002296:	2101      	movs	r1, #1
 8002298:	6a38      	ldr	r0, [r7, #32]
 800229a:	f000 f981 	bl	80025a0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800229e:	4b25      	ldr	r3, [pc, #148]	; (8002334 <xTaskGenericNotifyWait+0x10c>)
 80022a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80022ae:	f000 fe59 	bl	8002f64 <vPortExitCritical>

        taskENTER_CRITICAL();
 80022b2:	f000 fe27 	bl	8002f04 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	2040      	movs	r0, #64	; 0x40
 80022c4:	f002 ff22 	bl	800510c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <xTaskGenericNotifyWait+0x108>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	3214      	adds	r2, #20
 80022d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <xTaskGenericNotifyWait+0x108>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	3354      	adds	r3, #84	; 0x54
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d002      	beq.n	80022f6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e00e      	b.n	8002314 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <xTaskGenericNotifyWait+0x108>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	3214      	adds	r2, #20
 80022fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	43d2      	mvns	r2, r2
 8002306:	4011      	ands	r1, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	3214      	adds	r2, #20
 800230c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <xTaskGenericNotifyWait+0x108>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	3354      	adds	r3, #84	; 0x54
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002322:	f000 fe1f 	bl	8002f64 <vPortExitCritical>

        return xReturn;
 8002326:	697b      	ldr	r3, [r7, #20]
    }
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200000c8 	.word	0x200000c8
 8002334:	e000ed04 	.word	0xe000ed04

08002338 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002338:	b580      	push	{r7, lr}
 800233a:	b090      	sub	sp, #64	; 0x40
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002346:	2301      	movs	r3, #1
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <xTaskGenericNotify+0x2e>
        __asm volatile
 8002350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	623b      	str	r3, [r7, #32]
    }
 8002362:	bf00      	nop
 8002364:	e7fe      	b.n	8002364 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <xTaskGenericNotify+0x4a>
        __asm volatile
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	61fb      	str	r3, [r7, #28]
    }
 800237e:	bf00      	nop
 8002380:	e7fe      	b.n	8002380 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8002386:	f000 fdbd 	bl	8002f04 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800238a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	3214      	adds	r2, #20
 8002396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800239e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4413      	add	r3, r2
 80023a4:	3354      	adds	r3, #84	; 0x54
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80023ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	4413      	add	r3, r2
 80023b2:	3354      	adds	r3, #84	; 0x54
 80023b4:	2202      	movs	r2, #2
 80023b6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d83b      	bhi.n	8002436 <xTaskGenericNotify+0xfe>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <xTaskGenericNotify+0x8c>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	08002455 	.word	0x08002455
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023f5 	.word	0x080023f5
 80023d0:	0800240d 	.word	0x0800240d
 80023d4:	0800241b 	.word	0x0800241b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	3214      	adds	r2, #20
 80023de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	ea42 0103 	orr.w	r1, r2, r3
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	3214      	adds	r2, #20
 80023ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80023f2:	e032      	b.n	800245a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	3214      	adds	r2, #20
 80023fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	3214      	adds	r2, #20
 8002406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800240a:	e026      	b.n	800245a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	3214      	adds	r2, #20
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002418:	e01f      	b.n	800245a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800241a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800241e:	2b02      	cmp	r3, #2
 8002420:	d006      	beq.n	8002430 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	3214      	adds	r2, #20
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800242e:	e014      	b.n	800245a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8002430:	2300      	movs	r3, #0
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8002434:	e011      	b.n	800245a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002436:	4b55      	ldr	r3, [pc, #340]	; (800258c <xTaskGenericNotify+0x254>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <xTaskGenericNotify+0x120>
        __asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	61bb      	str	r3, [r7, #24]
    }
 8002450:	bf00      	nop
 8002452:	e7fe      	b.n	8002452 <xTaskGenericNotify+0x11a>
                    break;
 8002454:	bf00      	nop
 8002456:	e000      	b.n	800245a <xTaskGenericNotify+0x122>

                    break;
 8002458:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	4618      	mov	r0, r3
 800245e:	f003 fb0d 	bl	8005a7c <SEGGER_SYSVIEW_ShrinkId>
 8002462:	4601      	mov	r1, r0
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4613      	mov	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	203e      	movs	r0, #62	; 0x3e
 8002470:	f002 fe4c 	bl	800510c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002478:	2b01      	cmp	r3, #1
 800247a:	d17f      	bne.n	800257c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002492:	6892      	ldr	r2, [r2, #8]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	3304      	adds	r3, #4
 800249e:	429a      	cmp	r2, r3
 80024a0:	d103      	bne.n	80024aa <xTaskGenericNotify+0x172>
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	2200      	movs	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 fa9b 	bl	80059f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	2201      	movs	r2, #1
 80024c8:	409a      	lsls	r2, r3
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <xTaskGenericNotify+0x258>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	4a2f      	ldr	r2, [pc, #188]	; (8002590 <xTaskGenericNotify+0x258>)
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	492e      	ldr	r1, [pc, #184]	; (8002594 <xTaskGenericNotify+0x25c>)
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3304      	adds	r3, #4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024fe:	3204      	adds	r2, #4
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	1d1a      	adds	r2, r3, #4
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <xTaskGenericNotify+0x25c>)
 8002518:	441a      	add	r2, r3
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	615a      	str	r2, [r3, #20]
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002522:	491c      	ldr	r1, [pc, #112]	; (8002594 <xTaskGenericNotify+0x25c>)
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1c59      	adds	r1, r3, #1
 8002532:	4818      	ldr	r0, [pc, #96]	; (8002594 <xTaskGenericNotify+0x25c>)
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4403      	add	r3, r0
 800253e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <xTaskGenericNotify+0x226>
        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	617b      	str	r3, [r7, #20]
    }
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <xTaskGenericNotify+0x260>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	429a      	cmp	r2, r3
 800256a:	d907      	bls.n	800257c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <xTaskGenericNotify+0x264>)
 800256e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800257c:	f000 fcf2 	bl	8002f64 <vPortExitCritical>

        return xReturn;
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002582:	4618      	mov	r0, r3
 8002584:	3738      	adds	r7, #56	; 0x38
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200001a4 	.word	0x200001a4
 8002590:	200001a8 	.word	0x200001a8
 8002594:	200000cc 	.word	0x200000cc
 8002598:	200000c8 	.word	0x200000c8
 800259c:	e000ed04 	.word	0xe000ed04

080025a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80025aa:	4b36      	ldr	r3, [pc, #216]	; (8002684 <prvAddCurrentTaskToDelayedList+0xe4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3304      	adds	r3, #4
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe f8d2 	bl	8000760 <uxListRemove>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2201      	movs	r2, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	4b2e      	ldr	r3, [pc, #184]	; (800268c <prvAddCurrentTaskToDelayedList+0xec>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4013      	ands	r3, r2
 80025d6:	4a2d      	ldr	r2, [pc, #180]	; (800268c <prvAddCurrentTaskToDelayedList+0xec>)
 80025d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d124      	bne.n	800262c <prvAddCurrentTaskToDelayedList+0x8c>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d021      	beq.n	800262c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025e8:	4b29      	ldr	r3, [pc, #164]	; (8002690 <prvAddCurrentTaskToDelayedList+0xf0>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	3204      	adds	r2, #4
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1d1a      	adds	r2, r3, #4
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <prvAddCurrentTaskToDelayedList+0xf0>)
 800261c:	615a      	str	r2, [r3, #20]
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	4a1a      	ldr	r2, [pc, #104]	; (8002690 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800262a:	e026      	b.n	800267a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	429a      	cmp	r2, r3
 8002642:	d209      	bcs.n	8002658 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3304      	adds	r3, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7fe f84c 	bl	80006ee <vListInsert>
}
 8002656:	e010      	b.n	800267a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <prvAddCurrentTaskToDelayedList+0xf8>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <prvAddCurrentTaskToDelayedList+0xe8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3304      	adds	r3, #4
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f7fe f842 	bl	80006ee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <prvAddCurrentTaskToDelayedList+0xfc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	d202      	bcs.n	800267a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002674:	4a09      	ldr	r2, [pc, #36]	; (800269c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6013      	str	r3, [r2, #0]
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200001a4 	.word	0x200001a4
 8002688:	200000c8 	.word	0x200000c8
 800268c:	200001a8 	.word	0x200001a8
 8002690:	2000018c 	.word	0x2000018c
 8002694:	2000015c 	.word	0x2000015c
 8002698:	20000158 	.word	0x20000158
 800269c:	200001c0 	.word	0x200001c0

080026a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80026aa:	f000 fa47 	bl	8002b3c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <xTimerCreateTimerTask+0x54>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <xTimerCreateTimerTask+0x58>)
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2302      	movs	r3, #2
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026c4:	490d      	ldr	r1, [pc, #52]	; (80026fc <xTimerCreateTimerTask+0x5c>)
 80026c6:	480e      	ldr	r0, [pc, #56]	; (8002700 <xTimerCreateTimerTask+0x60>)
 80026c8:	f7fe fd6a 	bl	80011a0 <xTaskCreate>
 80026cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	603b      	str	r3, [r7, #0]
    }
 80026e6:	bf00      	nop
 80026e8:	e7fe      	b.n	80026e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80026ea:	687b      	ldr	r3, [r7, #4]
    }
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200001fc 	.word	0x200001fc
 80026f8:	20000200 	.word	0x20000200
 80026fc:	08008d78 	.word	0x08008d78
 8002700:	080027a9 	.word	0x080027a9

08002704 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002710:	e008      	b.n	8002724 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	4413      	add	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	18d1      	adds	r1, r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f8dd 	bl	80028f0 <prvInsertTimerInActiveList>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ea      	bne.n	8002712 <prvReloadTimer+0xe>
        }
    }
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <prvProcessExpiredTimer+0x5c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3304      	adds	r3, #4
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fffd 	bl	8000760 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ffc3 	bl	8002704 <prvReloadTimer>
 800277e:	e008      	b.n	8002792 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	4798      	blx	r3
    }
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200001f4 	.word	0x200001f4

080027a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f857 	bl	8002868 <prvGetNextExpireTime>
 80027ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4619      	mov	r1, r3
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f803 	bl	80027cc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80027c6:	f000 f8d5 	bl	8002974 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027ca:	e7f1      	b.n	80027b0 <prvTimerTask+0x8>

080027cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80027d6:	f7fe ff53 	bl	8001680 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f866 	bl	80028b0 <prvSampleTimeNow>
 80027e4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d130      	bne.n	800284e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <prvProcessTimerOrBlockTask+0x3c>
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d806      	bhi.n	8002808 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80027fa:	f7fe ff4f 	bl	800169c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027fe:	68f9      	ldr	r1, [r7, #12]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffa1 	bl	8002748 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002806:	e024      	b.n	8002852 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <prvProcessTimerOrBlockTask+0x90>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <prvProcessTimerOrBlockTask+0x50>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <prvProcessTimerOrBlockTask+0x52>
 800281c:	2300      	movs	r3, #0
 800281e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <prvProcessTimerOrBlockTask+0x94>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f7fe fc83 	bl	8001138 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002832:	f7fe ff33 	bl	800169c <xTaskResumeAll>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <prvProcessTimerOrBlockTask+0x98>)
 800283e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	f3bf 8f6f 	isb	sy
    }
 800284c:	e001      	b.n	8002852 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800284e:	f7fe ff25 	bl	800169c <xTaskResumeAll>
    }
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200001f8 	.word	0x200001f8
 8002860:	200001fc 	.word	0x200001fc
 8002864:	e000ed04 	.word	0xe000ed04

08002868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <prvGetNextExpireTime+0x44>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <prvGetNextExpireTime+0x16>
 800287a:	2201      	movs	r2, #1
 800287c:	e000      	b.n	8002880 <prvGetNextExpireTime+0x18>
 800287e:	2200      	movs	r2, #0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <prvGetNextExpireTime+0x44>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e001      	b.n	800289c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800289c:	68fb      	ldr	r3, [r7, #12]
    }
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	200001f4 	.word	0x200001f4

080028b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80028b8:	f7fe fff0 	bl	800189c <xTaskGetTickCount>
 80028bc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <prvSampleTimeNow+0x3c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d205      	bcs.n	80028d4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80028c8:	f000 f912 	bl	8002af0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e002      	b.n	80028da <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <prvSampleTimeNow+0x3c>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80028e0:	68fb      	ldr	r3, [r7, #12]
    }
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000204 	.word	0x20000204

080028f0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d812      	bhi.n	800293c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	1ad2      	subs	r2, r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002924:	2301      	movs	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e01b      	b.n	8002962 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <prvInsertTimerInActiveList+0x7c>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3304      	adds	r3, #4
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7fd feda 	bl	80006ee <vListInsert>
 800293a:	e012      	b.n	8002962 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d206      	bcs.n	8002952 <prvInsertTimerInActiveList+0x62>
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d302      	bcc.n	8002952 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800294c:	2301      	movs	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e007      	b.n	8002962 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <prvInsertTimerInActiveList+0x80>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3304      	adds	r3, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f7fd fec6 	bl	80006ee <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002962:	697b      	ldr	r3, [r7, #20]
    }
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200001f8 	.word	0x200001f8
 8002970:	200001f4 	.word	0x200001f4

08002974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800297a:	e0a6      	b.n	8002aca <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f2c0 80a3 	blt.w	8002aca <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3304      	adds	r3, #4
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fee3 	bl	8000760 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff87 	bl	80028b0 <prvSampleTimeNow>
 80029a2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	f200 808d 	bhi.w	8002ac8 <prvProcessReceivedCommands+0x154>
 80029ae:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <prvProcessReceivedCommands+0x40>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	080029d9 	.word	0x080029d9
 80029b8:	080029d9 	.word	0x080029d9
 80029bc:	08002a41 	.word	0x08002a41
 80029c0:	08002a55 	.word	0x08002a55
 80029c4:	08002a9f 	.word	0x08002a9f
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029d9 	.word	0x080029d9
 80029d0:	08002a41 	.word	0x08002a41
 80029d4:	08002a55 	.word	0x08002a55
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	18d1      	adds	r1, r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	69f8      	ldr	r0, [r7, #28]
 80029f8:	f7ff ff7a 	bl	80028f0 <prvInsertTimerInActiveList>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d063      	beq.n	8002aca <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d009      	beq.n	8002a24 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	69f8      	ldr	r0, [r7, #28]
 8002a1e:	f7ff fe71 	bl	8002704 <prvReloadTimer>
 8002a22:	e008      	b.n	8002a36 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	69f8      	ldr	r0, [r7, #28]
 8002a3c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002a3e:	e044      	b.n	8002aca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002a52:	e03a      	b.n	8002aca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	617b      	str	r3, [r7, #20]
    }
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	18d1      	adds	r1, r2, r3
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	69f8      	ldr	r0, [r7, #28]
 8002a98:	f7ff ff2a 	bl	80028f0 <prvInsertTimerInActiveList>
                        break;
 8002a9c:	e015      	b.n	8002aca <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002aac:	69f8      	ldr	r0, [r7, #28]
 8002aae:	f000 fc0f 	bl	80032d0 <vPortFree>
 8002ab2:	e00a      	b.n	8002aca <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002ac6:	e000      	b.n	8002aca <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002ac8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <prvProcessReceivedCommands+0x178>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f107 0108 	add.w	r1, r7, #8
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe f89b 	bl	8000c10 <xQueueReceive>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f af4d 	bne.w	800297c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200001fc 	.word	0x200001fc

08002af0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002af6:	e009      	b.n	8002b0c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <prvSwitchTimerLists+0x44>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002b02:	f04f 31ff 	mov.w	r1, #4294967295
 8002b06:	6838      	ldr	r0, [r7, #0]
 8002b08:	f7ff fe1e 	bl	8002748 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <prvSwitchTimerLists+0x44>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <prvSwitchTimerLists+0x44>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <prvSwitchTimerLists+0x48>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <prvSwitchTimerLists+0x44>)
 8002b22:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <prvSwitchTimerLists+0x48>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
    }
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200001f4 	.word	0x200001f4
 8002b38:	200001f8 	.word	0x200001f8

08002b3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b40:	f000 f9e0 	bl	8002f04 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <prvCheckForValidListAndQueue+0x54>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d11d      	bne.n	8002b88 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b4c:	4811      	ldr	r0, [pc, #68]	; (8002b94 <prvCheckForValidListAndQueue+0x58>)
 8002b4e:	f7fd fd7d 	bl	800064c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b52:	4811      	ldr	r0, [pc, #68]	; (8002b98 <prvCheckForValidListAndQueue+0x5c>)
 8002b54:	f7fd fd7a 	bl	800064c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <prvCheckForValidListAndQueue+0x60>)
 8002b5a:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <prvCheckForValidListAndQueue+0x58>)
 8002b5c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <prvCheckForValidListAndQueue+0x64>)
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <prvCheckForValidListAndQueue+0x5c>)
 8002b62:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002b64:	2200      	movs	r2, #0
 8002b66:	210c      	movs	r1, #12
 8002b68:	200a      	movs	r0, #10
 8002b6a:	f7fd feb3 	bl	80008d4 <xQueueGenericCreate>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <prvCheckForValidListAndQueue+0x54>)
 8002b72:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <prvCheckForValidListAndQueue+0x54>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <prvCheckForValidListAndQueue+0x54>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <prvCheckForValidListAndQueue+0x68>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fa82 	bl	800108c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b88:	f000 f9ec 	bl	8002f64 <vPortExitCritical>
    }
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200001fc 	.word	0x200001fc
 8002b94:	200001cc 	.word	0x200001cc
 8002b98:	200001e0 	.word	0x200001e0
 8002b9c:	200001f4 	.word	0x200001f4
 8002ba0:	200001f8 	.word	0x200001f8
 8002ba4:	08008d80 	.word	0x08008d80

08002ba8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bc0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3b04      	subs	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3b04      	subs	r3, #4
 8002bd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002bd8:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <pxPortInitialiseStack+0x64>)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3b14      	subs	r3, #20
 8002be2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3b04      	subs	r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f06f 0202 	mvn.w	r2, #2
 8002bf6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3b20      	subs	r3, #32
 8002bfc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	08002c11 	.word	0x08002c11

08002c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <prvTaskExitError+0x54>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d00a      	beq.n	8002c3a <prvTaskExitError+0x2a>
        __asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	60fb      	str	r3, [r7, #12]
    }
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <prvTaskExitError+0x28>
        __asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	60bb      	str	r3, [r7, #8]
    }
 8002c4c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c4e:	bf00      	nop
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0fc      	beq.n	8002c50 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	20000004 	.word	0x20000004
	...

08002c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <pxCurrentTCBConst2>)
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	6808      	ldr	r0, [r1, #0]
 8002c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7a:	f380 8809 	msr	PSP, r0
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f380 8811 	msr	BASEPRI, r0
 8002c8a:	4770      	bx	lr
 8002c8c:	f3af 8000 	nop.w

08002c90 <pxCurrentTCBConst2>:
 8002c90:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop

08002c98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c98:	4808      	ldr	r0, [pc, #32]	; (8002cbc <prvPortStartFirstTask+0x24>)
 8002c9a:	6800      	ldr	r0, [r0, #0]
 8002c9c:	6800      	ldr	r0, [r0, #0]
 8002c9e:	f380 8808 	msr	MSP, r0
 8002ca2:	f04f 0000 	mov.w	r0, #0
 8002ca6:	f380 8814 	msr	CONTROL, r0
 8002caa:	b662      	cpsie	i
 8002cac:	b661      	cpsie	f
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	df00      	svc	0
 8002cb8:	bf00      	nop
 8002cba:	0000      	.short	0x0000
 8002cbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop

08002cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cca:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <xPortStartScheduler+0x120>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a46      	ldr	r2, [pc, #280]	; (8002de8 <xPortStartScheduler+0x124>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d10a      	bne.n	8002cea <xPortStartScheduler+0x26>
        __asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	613b      	str	r3, [r7, #16]
    }
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cea:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <xPortStartScheduler+0x120>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3f      	ldr	r2, [pc, #252]	; (8002dec <xPortStartScheduler+0x128>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10a      	bne.n	8002d0a <xPortStartScheduler+0x46>
        __asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	60fb      	str	r3, [r7, #12]
    }
 8002d06:	bf00      	nop
 8002d08:	e7fe      	b.n	8002d08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d0a:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <xPortStartScheduler+0x12c>)
 8002d0c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <xPortStartScheduler+0x130>)
 8002d30:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d32:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <xPortStartScheduler+0x134>)
 8002d34:	2207      	movs	r2, #7
 8002d36:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d38:	e009      	b.n	8002d4e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002d3a:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <xPortStartScheduler+0x134>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <xPortStartScheduler+0x134>)
 8002d42:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d0ef      	beq.n	8002d3a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d5a:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <xPortStartScheduler+0x134>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f1c3 0307 	rsb	r3, r3, #7
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d00a      	beq.n	8002d7c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	60bb      	str	r3, [r7, #8]
    }
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <xPortStartScheduler+0x134>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <xPortStartScheduler+0x134>)
 8002d84:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <xPortStartScheduler+0x134>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <xPortStartScheduler+0x134>)
 8002d90:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <xPortStartScheduler+0x138>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <xPortStartScheduler+0x138>)
 8002da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <xPortStartScheduler+0x138>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <xPortStartScheduler+0x138>)
 8002dac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002db0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002db2:	f000 f963 	bl	800307c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <xPortStartScheduler+0x13c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002dbc:	f000 f982 	bl	80030c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <xPortStartScheduler+0x140>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <xPortStartScheduler+0x140>)
 8002dc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002dca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002dcc:	f7ff ff64 	bl	8002c98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002dd0:	f7fe fea0 	bl	8001b14 <vTaskSwitchContext>
    prvTaskExitError();
 8002dd4:	f7ff ff1c 	bl	8002c10 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00
 8002de8:	410fc271 	.word	0x410fc271
 8002dec:	410fc270 	.word	0x410fc270
 8002df0:	e000e400 	.word	0xe000e400
 8002df4:	20000208 	.word	0x20000208
 8002df8:	2000020c 	.word	0x2000020c
 8002dfc:	e000ed20 	.word	0xe000ed20
 8002e00:	20000004 	.word	0x20000004
 8002e04:	e000ef34 	.word	0xe000ef34

08002e08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e0e:	4b37      	ldr	r3, [pc, #220]	; (8002eec <vInitPrioGroupValue+0xe4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a37      	ldr	r2, [pc, #220]	; (8002ef0 <vInitPrioGroupValue+0xe8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10a      	bne.n	8002e2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	613b      	str	r3, [r7, #16]
    }
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <vInitPrioGroupValue+0xe4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <vInitPrioGroupValue+0xec>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d10a      	bne.n	8002e4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	60fb      	str	r3, [r7, #12]
    }
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <vInitPrioGroupValue+0xf0>)
 8002e50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <vInitPrioGroupValue+0xf4>)
 8002e74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <vInitPrioGroupValue+0xf8>)
 8002e78:	2207      	movs	r2, #7
 8002e7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e7c:	e009      	b.n	8002e92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <vInitPrioGroupValue+0xf8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <vInitPrioGroupValue+0xf8>)
 8002e86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d0ef      	beq.n	8002e7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <vInitPrioGroupValue+0xf8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f1c3 0307 	rsb	r3, r3, #7
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d00a      	beq.n	8002ec0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	60bb      	str	r3, [r7, #8]
    }
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <vInitPrioGroupValue+0xf8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <vInitPrioGroupValue+0xf8>)
 8002ec8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <vInitPrioGroupValue+0xf8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <vInitPrioGroupValue+0xf8>)
 8002ed4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000ed00 	.word	0xe000ed00
 8002ef0:	410fc271 	.word	0x410fc271
 8002ef4:	410fc270 	.word	0x410fc270
 8002ef8:	e000e400 	.word	0xe000e400
 8002efc:	20000208 	.word	0x20000208
 8002f00:	2000020c 	.word	0x2000020c

08002f04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
        __asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	607b      	str	r3, [r7, #4]
    }
 8002f1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <vPortEnterCritical+0x58>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <vPortEnterCritical+0x58>)
 8002f26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <vPortEnterCritical+0x58>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d10f      	bne.n	8002f50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <vPortEnterCritical+0x5c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	603b      	str	r3, [r7, #0]
    }
 8002f4c:	bf00      	nop
 8002f4e:	e7fe      	b.n	8002f4e <vPortEnterCritical+0x4a>
    }
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	20000004 	.word	0x20000004
 8002f60:	e000ed04 	.word	0xe000ed04

08002f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <vPortExitCritical+0x50>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <vPortExitCritical+0x24>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	607b      	str	r3, [r7, #4]
    }
 8002f84:	bf00      	nop
 8002f86:	e7fe      	b.n	8002f86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <vPortExitCritical+0x50>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <vPortExitCritical+0x50>)
 8002f90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <vPortExitCritical+0x50>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <vPortExitCritical+0x42>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002fa4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000004 	.word	0x20000004
	...

08002fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002fc0:	f3ef 8009 	mrs	r0, PSP
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	4b15      	ldr	r3, [pc, #84]	; (8003020 <pxCurrentTCBConst>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f01e 0f10 	tst.w	lr, #16
 8002fd0:	bf08      	it	eq
 8002fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fda:	6010      	str	r0, [r2, #0]
 8002fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fe4:	f380 8811 	msr	BASEPRI, r0
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f7fe fd90 	bl	8001b14 <vTaskSwitchContext>
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f380 8811 	msr	BASEPRI, r0
 8002ffc:	bc09      	pop	{r0, r3}
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	6808      	ldr	r0, [r1, #0]
 8003002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003006:	f01e 0f10 	tst.w	lr, #16
 800300a:	bf08      	it	eq
 800300c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003010:	f380 8809 	msr	PSP, r0
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	f3af 8000 	nop.w

08003020 <pxCurrentTCBConst>:
 8003020:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop

08003028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
        __asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	607b      	str	r3, [r7, #4]
    }
 8003040:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003042:	f002 fbbf 	bl	80057c4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003046:	f7fe fc4b 	bl	80018e0 <xTaskIncrementTick>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003050:	f002 fc16 	bl	8005880 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <SysTick_Handler+0x50>)
 8003056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e001      	b.n	8003062 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800305e:	f002 fbf3 	bl	8005848 <SEGGER_SYSVIEW_RecordExitISR>
 8003062:	2300      	movs	r3, #0
 8003064:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f383 8811 	msr	BASEPRI, r3
    }
 800306c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000ed04 	.word	0xe000ed04

0800307c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <vPortSetupTimerInterrupt+0x34>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <vPortSetupTimerInterrupt+0x38>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <vPortSetupTimerInterrupt+0x3c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <vPortSetupTimerInterrupt+0x40>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <vPortSetupTimerInterrupt+0x44>)
 800309a:	3b01      	subs	r3, #1
 800309c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <vPortSetupTimerInterrupt+0x34>)
 80030a0:	2207      	movs	r2, #7
 80030a2:	601a      	str	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e010 	.word	0xe000e010
 80030b4:	e000e018 	.word	0xe000e018
 80030b8:	20000010 	.word	0x20000010
 80030bc:	10624dd3 	.word	0x10624dd3
 80030c0:	e000e014 	.word	0xe000e014

080030c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80030c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030d4 <vPortEnableVFP+0x10>
 80030c8:	6801      	ldr	r1, [r0, #0]
 80030ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030ce:	6001      	str	r1, [r0, #0]
 80030d0:	4770      	bx	lr
 80030d2:	0000      	.short	0x0000
 80030d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop

080030dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80030e2:	f3ef 8305 	mrs	r3, IPSR
 80030e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	d914      	bls.n	8003118 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <vPortValidateInterruptPriority+0x70>)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <vPortValidateInterruptPriority+0x74>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	7afa      	ldrb	r2, [r7, #11]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d20a      	bcs.n	8003118 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	607b      	str	r3, [r7, #4]
    }
 8003114:	bf00      	nop
 8003116:	e7fe      	b.n	8003116 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <vPortValidateInterruptPriority+0x78>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <vPortValidateInterruptPriority+0x7c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d90a      	bls.n	800313e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	603b      	str	r3, [r7, #0]
    }
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <vPortValidateInterruptPriority+0x60>
    }
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000e3f0 	.word	0xe000e3f0
 8003150:	20000208 	.word	0x20000208
 8003154:	e000ed0c 	.word	0xe000ed0c
 8003158:	2000020c 	.word	0x2000020c

0800315c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003168:	f7fe fa8a 	bl	8001680 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800316c:	4b53      	ldr	r3, [pc, #332]	; (80032bc <pvPortMalloc+0x160>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003174:	f000 f908 	bl	8003388 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800317e:	2208      	movs	r2, #8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	3308      	adds	r3, #8
 800318a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	43db      	mvns	r3, r3
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d804      	bhi.n	80031a0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	4413      	add	r3, r2
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	e001      	b.n	80031a4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db70      	blt.n	800328c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d06d      	beq.n	800328c <pvPortMalloc+0x130>
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <pvPortMalloc+0x164>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d868      	bhi.n	800328c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031ba:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <pvPortMalloc+0x168>)
 80031bc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <pvPortMalloc+0x168>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031c4:	e004      	b.n	80031d0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d903      	bls.n	80031e2 <pvPortMalloc+0x86>
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f1      	bne.n	80031c6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <pvPortMalloc+0x160>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d04f      	beq.n	800328c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2208      	movs	r2, #8
 80031f2:	4413      	add	r3, r2
 80031f4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	1ad2      	subs	r2, r2, r3
 8003206:	2308      	movs	r3, #8
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	429a      	cmp	r2, r3
 800320c:	d91f      	bls.n	800324e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <pvPortMalloc+0xda>
        __asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	613b      	str	r3, [r7, #16]
    }
 8003232:	bf00      	nop
 8003234:	e7fe      	b.n	8003234 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	1ad2      	subs	r2, r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003248:	6978      	ldr	r0, [r7, #20]
 800324a:	f000 f8f9 	bl	8003440 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800324e:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <pvPortMalloc+0x164>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <pvPortMalloc+0x164>)
 800325a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800325c:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <pvPortMalloc+0x164>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <pvPortMalloc+0x16c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d203      	bcs.n	8003270 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <pvPortMalloc+0x164>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <pvPortMalloc+0x16c>)
 800326e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <pvPortMalloc+0x170>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	4a10      	ldr	r2, [pc, #64]	; (80032cc <pvPortMalloc+0x170>)
 800328a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800328c:	f7fe fa06 	bl	800169c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <pvPortMalloc+0x154>
        __asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	60fb      	str	r3, [r7, #12]
    }
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <pvPortMalloc+0x152>
    return pvReturn;
 80032b0:	69fb      	ldr	r3, [r7, #28]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3728      	adds	r7, #40	; 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20012e18 	.word	0x20012e18
 80032c0:	20012e1c 	.word	0x20012e1c
 80032c4:	20012e10 	.word	0x20012e10
 80032c8:	20012e20 	.word	0x20012e20
 80032cc:	20012e24 	.word	0x20012e24

080032d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d049      	beq.n	8003376 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032e2:	2308      	movs	r3, #8
 80032e4:	425b      	negs	r3, r3
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4413      	add	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	db0a      	blt.n	800330e <vPortFree+0x3e>
        __asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	60fb      	str	r3, [r7, #12]
    }
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <vPortFree+0x5c>
        __asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	60bb      	str	r3, [r7, #8]
    }
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0fdb      	lsrs	r3, r3, #31
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01c      	beq.n	8003376 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d118      	bne.n	8003376 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003350:	f7fe f996 	bl	8001680 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <vPortFree+0xb0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4413      	add	r3, r2
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <vPortFree+0xb0>)
 8003360:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003362:	6938      	ldr	r0, [r7, #16]
 8003364:	f000 f86c 	bl	8003440 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <vPortFree+0xb4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <vPortFree+0xb4>)
 8003370:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003372:	f7fe f993 	bl	800169c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20012e1c 	.word	0x20012e1c
 8003384:	20012e28 	.word	0x20012e28

08003388 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800338e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003392:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <prvHeapInit+0xa4>)
 8003396:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00c      	beq.n	80033bc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3307      	adds	r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0307 	bic.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <prvHeapInit+0xa4>)
 80033b8:	4413      	add	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <prvHeapInit+0xa8>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033c6:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <prvHeapInit+0xa8>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033d4:	2208      	movs	r2, #8
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a13      	ldr	r2, [pc, #76]	; (8003434 <prvHeapInit+0xac>)
 80033e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <prvHeapInit+0xac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <prvHeapInit+0xac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	1ad2      	subs	r2, r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <prvHeapInit+0xac>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a08      	ldr	r2, [pc, #32]	; (8003438 <prvHeapInit+0xb0>)
 8003416:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <prvHeapInit+0xb4>)
 800341e:	6013      	str	r3, [r2, #0]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	20000210 	.word	0x20000210
 8003430:	20012e10 	.word	0x20012e10
 8003434:	20012e18 	.word	0x20012e18
 8003438:	20012e20 	.word	0x20012e20
 800343c:	20012e1c 	.word	0x20012e1c

08003440 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <prvInsertBlockIntoFreeList+0xac>)
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <prvInsertBlockIntoFreeList+0x14>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	d8f7      	bhi.n	800344e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4413      	add	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d108      	bne.n	8003482 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	441a      	add	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	441a      	add	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d118      	bne.n	80034c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <prvInsertBlockIntoFreeList+0xb0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d00d      	beq.n	80034be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	441a      	add	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e008      	b.n	80034d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034be:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <prvInsertBlockIntoFreeList+0xb0>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e003      	b.n	80034d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d002      	beq.n	80034de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20012e10 	.word	0x20012e10
 80034f0:	20012e18 	.word	0x20012e18

080034f4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <_cbSendSystemDesc+0x14>)
 80034fa:	f002 f90d 	bl	8005718 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80034fe:	4803      	ldr	r0, [pc, #12]	; (800350c <_cbSendSystemDesc+0x18>)
 8003500:	f002 f90a 	bl	8005718 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08008d88 	.word	0x08008d88
 800350c:	08008dc4 	.word	0x08008dc4

08003510 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <SEGGER_SYSVIEW_Conf+0x20>)
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <SEGGER_SYSVIEW_Conf+0x20>)
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <SEGGER_SYSVIEW_Conf+0x24>)
 800351e:	4a06      	ldr	r2, [pc, #24]	; (8003538 <SEGGER_SYSVIEW_Conf+0x28>)
 8003520:	f001 fc76 	bl	8004e10 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003524:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003528:	f001 fcb6 	bl	8004e98 <SEGGER_SYSVIEW_SetRAMBase>
}
 800352c:	bf00      	nop
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000010 	.word	0x20000010
 8003534:	080034f5 	.word	0x080034f5
 8003538:	08008ea0 	.word	0x08008ea0

0800353c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353e:	b085      	sub	sp, #20
 8003540:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	e033      	b.n	80035b0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003548:	491e      	ldr	r1, [pc, #120]	; (80035c4 <_cbSendTaskList+0x88>)
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	491a      	ldr	r1, [pc, #104]	; (80035c4 <_cbSendTaskList+0x88>)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3304      	adds	r3, #4
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	4c16      	ldr	r4, [pc, #88]	; (80035c4 <_cbSendTaskList+0x88>)
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4423      	add	r3, r4
 8003578:	3308      	adds	r3, #8
 800357a:	681c      	ldr	r4, [r3, #0]
 800357c:	4d11      	ldr	r5, [pc, #68]	; (80035c4 <_cbSendTaskList+0x88>)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	442b      	add	r3, r5
 800358a:	330c      	adds	r3, #12
 800358c:	681d      	ldr	r5, [r3, #0]
 800358e:	4e0d      	ldr	r6, [pc, #52]	; (80035c4 <_cbSendTaskList+0x88>)
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4433      	add	r3, r6
 800359c:	3310      	adds	r3, #16
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	462b      	mov	r3, r5
 80035a4:	4622      	mov	r2, r4
 80035a6:	f000 f8bd 	bl	8003724 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3301      	adds	r3, #1
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <_cbSendTaskList+0x8c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d3c6      	bcc.n	8003548 <_cbSendTaskList+0xc>
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c4:	20012e2c 	.word	0x20012e2c
 80035c8:	20012ecc 	.word	0x20012ecc

080035cc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80035cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80035d4:	f7fe f972 	bl	80018bc <xTaskGetTickCountFromISR>
 80035d8:	4603      	mov	r3, r0
 80035da:	2200      	movs	r2, #0
 80035dc:	469a      	mov	sl, r3
 80035de:	4693      	mov	fp, r2
 80035e0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80035e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	f04f 0a00 	mov.w	sl, #0
 80035f0:	f04f 0b00 	mov.w	fp, #0
 80035f4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80035f8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80035fc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003600:	4652      	mov	r2, sl
 8003602:	465b      	mov	r3, fp
 8003604:	1a14      	subs	r4, r2, r0
 8003606:	eb63 0501 	sbc.w	r5, r3, r1
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	00ab      	lsls	r3, r5, #2
 8003614:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003618:	00a2      	lsls	r2, r4, #2
 800361a:	4614      	mov	r4, r2
 800361c:	461d      	mov	r5, r3
 800361e:	eb14 0800 	adds.w	r8, r4, r0
 8003622:	eb45 0901 	adc.w	r9, r5, r1
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800363a:	4690      	mov	r8, r2
 800363c:	4699      	mov	r9, r3
 800363e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003642:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003654 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003662:	2205      	movs	r2, #5
 8003664:	492b      	ldr	r1, [pc, #172]	; (8003714 <SYSVIEW_AddTask+0xc0>)
 8003666:	68b8      	ldr	r0, [r7, #8]
 8003668:	f004 feda 	bl	8008420 <memcmp>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d04b      	beq.n	800370a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <SYSVIEW_AddTask+0xc4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b07      	cmp	r3, #7
 8003678:	d903      	bls.n	8003682 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800367a:	4828      	ldr	r0, [pc, #160]	; (800371c <SYSVIEW_AddTask+0xc8>)
 800367c:	f002 fb08 	bl	8005c90 <SEGGER_SYSVIEW_Warn>
    return;
 8003680:	e044      	b.n	800370c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <SYSVIEW_AddTask+0xc4>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4926      	ldr	r1, [pc, #152]	; (8003720 <SYSVIEW_AddTask+0xcc>)
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <SYSVIEW_AddTask+0xc4>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4921      	ldr	r1, [pc, #132]	; (8003720 <SYSVIEW_AddTask+0xcc>)
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	3304      	adds	r3, #4
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <SYSVIEW_AddTask+0xc4>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	491b      	ldr	r1, [pc, #108]	; (8003720 <SYSVIEW_AddTask+0xcc>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3308      	adds	r3, #8
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <SYSVIEW_AddTask+0xc4>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4916      	ldr	r1, [pc, #88]	; (8003720 <SYSVIEW_AddTask+0xcc>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	330c      	adds	r3, #12
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <SYSVIEW_AddTask+0xc4>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4910      	ldr	r1, [pc, #64]	; (8003720 <SYSVIEW_AddTask+0xcc>)
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3310      	adds	r3, #16
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <SYSVIEW_AddTask+0xc4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a08      	ldr	r2, [pc, #32]	; (8003718 <SYSVIEW_AddTask+0xc4>)
 80036f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f80e 	bl	8003724 <SYSVIEW_SendTaskInfo>
 8003708:	e000      	b.n	800370c <SYSVIEW_AddTask+0xb8>
    return;
 800370a:	bf00      	nop

}
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	08008dd4 	.word	0x08008dd4
 8003718:	20012ecc 	.word	0x20012ecc
 800371c:	08008ddc 	.word	0x08008ddc
 8003720:	20012e2c 	.word	0x20012e2c

08003724 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	2214      	movs	r2, #20
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f004 fe80 	bl	8008440 <memset>
  TaskInfo.TaskID     = TaskID;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4618      	mov	r0, r3
 800375a:	f001 fee5 	bl	8005528 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800375e:	bf00      	nop
 8003760:	3728      	adds	r7, #40	; 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	db0b      	blt.n	8003792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	4907      	ldr	r1, [pc, #28]	; (80037a0 <__NVIC_EnableIRQ+0x38>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2001      	movs	r0, #1
 800378a:	fa00 f202 	lsl.w	r2, r0, r2
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000e100 	.word	0xe000e100

080037a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	db0a      	blt.n	80037ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	490c      	ldr	r1, [pc, #48]	; (80037f0 <__NVIC_SetPriority+0x4c>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	0112      	lsls	r2, r2, #4
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	440b      	add	r3, r1
 80037c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037cc:	e00a      	b.n	80037e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4908      	ldr	r1, [pc, #32]	; (80037f4 <__NVIC_SetPriority+0x50>)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	3b04      	subs	r3, #4
 80037dc:	0112      	lsls	r2, r2, #4
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	440b      	add	r3, r1
 80037e2:	761a      	strb	r2, [r3, #24]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000e100 	.word	0xe000e100
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80037fe:	f002 faa3 	bl	8005d48 <SEGGER_SYSVIEW_IsStarted>
 8003802:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800380a:	f001 fd11 	bl	8005230 <SEGGER_SYSVIEW_Start>
  }
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <_cbOnUARTRx+0x3c>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d806      	bhi.n	8003838 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <_cbOnUARTRx+0x3c>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b08      	ldr	r3, [pc, #32]	; (8003854 <_cbOnUARTRx+0x3c>)
 8003834:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003836:	e009      	b.n	800384c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003838:	f7ff ffde 	bl	80037f8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <_cbOnUARTRx+0x3c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4618      	mov	r0, r3
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	2201      	movs	r2, #1
 8003846:	4619      	mov	r1, r3
 8003848:	f000 fb9c 	bl	8003f84 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800384c:	bf00      	nop
}
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000008 	.word	0x20000008

08003858 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <_cbOnUARTTx+0x5c>)
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d80f      	bhi.n	8003888 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <_cbOnUARTTx+0x5c>)
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	461a      	mov	r2, r3
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <_cbOnUARTTx+0x60>)
 8003870:	5c9a      	ldrb	r2, [r3, r2]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <_cbOnUARTTx+0x5c>)
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	3301      	adds	r3, #1
 800387c:	b2da      	uxtb	r2, r3
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <_cbOnUARTTx+0x5c>)
 8003880:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003886:	e00f      	b.n	80038a8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <_cbOnUARTTx+0x5c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fa1b 	bl	8003ccc <SEGGER_RTT_ReadUpBufferNoLock>
 8003896:	4603      	mov	r3, r0
 8003898:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	da02      	bge.n	80038a6 <_cbOnUARTTx+0x4e>
    r = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e000      	b.n	80038a8 <_cbOnUARTTx+0x50>
  }
Done:
 80038a6:	bf00      	nop
  return r;
 80038a8:	68fb      	ldr	r3, [r7, #12]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000008 	.word	0x20000008
 80038b8:	08008ea8 	.word	0x08008ea8

080038bc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <SEGGER_UART_init+0x1c>)
 80038c6:	4905      	ldr	r1, [pc, #20]	; (80038dc <SEGGER_UART_init+0x20>)
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f863 	bl	8003994 <HIF_UART_Init>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	08003819 	.word	0x08003819
 80038dc:	08003859 	.word	0x08003859

080038e0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <USART2_IRQHandler+0x80>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d011      	beq.n	800391a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80038f6:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <USART2_IRQHandler+0x84>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 030b 	and.w	r3, r3, #11
 8003904:	2b00      	cmp	r3, #0
 8003906:	d108      	bne.n	800391a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <USART2_IRQHandler+0x88>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003910:	4b15      	ldr	r3, [pc, #84]	; (8003968 <USART2_IRQHandler+0x88>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	79fa      	ldrb	r2, [r7, #7]
 8003916:	4610      	mov	r0, r2
 8003918:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01a      	beq.n	800395a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <USART2_IRQHandler+0x8c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d015      	beq.n	8003958 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <USART2_IRQHandler+0x8c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1dfa      	adds	r2, r7, #7
 8003932:	4610      	mov	r0, r2
 8003934:	4798      	blx	r3
 8003936:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <USART2_IRQHandler+0x90>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <USART2_IRQHandler+0x90>)
 8003944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e006      	b.n	800395a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <USART2_IRQHandler+0x80>)
 800394e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003950:	79fa      	ldrb	r2, [r7, #7]
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <USART2_IRQHandler+0x84>)
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e000      	b.n	800395a <USART2_IRQHandler+0x7a>
      return;
 8003958:	bf00      	nop
    }
  }
}
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40004400 	.word	0x40004400
 8003964:	40004404 	.word	0x40004404
 8003968:	20012ed0 	.word	0x20012ed0
 800396c:	20012ed4 	.word	0x20012ed4
 8003970:	4000440c 	.word	0x4000440c

08003974 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800397e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	4000440c 	.word	0x4000440c

08003994 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <HIF_UART_Init+0xc8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2d      	ldr	r2, [pc, #180]	; (8003a5c <HIF_UART_Init+0xc8>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039aa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80039ac:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <HIF_UART_Init+0xcc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <HIF_UART_Init+0xcc>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <HIF_UART_Init+0xd0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80039cc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80039ce:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <HIF_UART_Init+0xd0>)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80039d4:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HIF_UART_Init+0xd4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80039e8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80039ea:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HIF_UART_Init+0xd4>)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80039f0:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <HIF_UART_Init+0xd8>)
 80039f2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80039f6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HIF_UART_Init+0xdc>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HIF_UART_Init+0xe0>)
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003a0a:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HIF_UART_Init+0xe4>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a22:	d302      	bcc.n	8003a2a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003a24:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a28:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <HIF_UART_Init+0xe8>)
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <HIF_UART_Init+0xec>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003a40:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <HIF_UART_Init+0xf0>)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003a46:	2106      	movs	r1, #6
 8003a48:	2026      	movs	r0, #38	; 0x26
 8003a4a:	f7ff feab 	bl	80037a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003a4e:	2026      	movs	r0, #38	; 0x26
 8003a50:	f7ff fe8a 	bl	8003768 <__NVIC_EnableIRQ>
}
 8003a54:	bf00      	nop
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023840 	.word	0x40023840
 8003a60:	40023830 	.word	0x40023830
 8003a64:	40020020 	.word	0x40020020
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	4000440c 	.word	0x4000440c
 8003a70:	40004410 	.word	0x40004410
 8003a74:	40004414 	.word	0x40004414
 8003a78:	0501bd00 	.word	0x0501bd00
 8003a7c:	40004408 	.word	0x40004408
 8003a80:	20012ed0 	.word	0x20012ed0
 8003a84:	20012ed4 	.word	0x20012ed4

08003a88 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003a8e:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <_DoInit+0xa0>)
 8003a90:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003a92:	22a8      	movs	r2, #168	; 0xa8
 8003a94:	2100      	movs	r1, #0
 8003a96:	6838      	ldr	r0, [r7, #0]
 8003a98:	f004 fcd2 	bl	8008440 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <_DoInit+0xa4>)
 8003aac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <_DoInit+0xa8>)
 8003ab2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2200      	movs	r2, #0
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <_DoInit+0xa4>)
 8003ad2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <_DoInit+0xac>)
 8003ad8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2210      	movs	r2, #16
 8003ade:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003af2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	e00c      	b.n	8003b16 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f1c3 030f 	rsb	r3, r3, #15
 8003b02:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <_DoInit+0xb0>)
 8003b04:	5cd1      	ldrb	r1, [r2, r3]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3301      	adds	r3, #1
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b0f      	cmp	r3, #15
 8003b1a:	d9ef      	bls.n	8003afc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b1c:	f3bf 8f5f 	dmb	sy
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20012ed8 	.word	0x20012ed8
 8003b2c:	08008e2c 	.word	0x08008e2c
 8003b30:	20012f80 	.word	0x20012f80
 8003b34:	20013380 	.word	0x20013380
 8003b38:	08008eac 	.word	0x08008eac

08003b3c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d905      	bls.n	8003b6c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	e007      	b.n	8003b7c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	1acb      	subs	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b86:	4293      	cmp	r3, r2
 8003b88:	bf28      	it	cs
 8003b8a:	4613      	movcs	r3, r2
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4293      	cmp	r3, r2
 8003b94:	bf28      	it	cs
 8003b96:	4613      	movcs	r3, r2
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	6978      	ldr	r0, [r7, #20]
 8003baa:	f004 fc77 	bl	800849c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003bae:	6a3a      	ldr	r2, [r7, #32]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	4413      	add	r3, r2
 8003bb4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	4413      	add	r3, r2
 8003bbc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	4413      	add	r3, r2
 8003bcc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d101      	bne.n	8003bdc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003bdc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1b2      	bne.n	8003b52 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003bec:	6a3b      	ldr	r3, [r7, #32]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b088      	sub	sp, #32
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d911      	bls.n	8003c3e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	6938      	ldr	r0, [r7, #16]
 8003c2a:	f004 fc37 	bl	800849c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c2e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	441a      	add	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003c3c:	e01f      	b.n	8003c7e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	6938      	ldr	r0, [r7, #16]
 8003c52:	f004 fc23 	bl	800849c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	4413      	add	r3, r2
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6938      	ldr	r0, [r7, #16]
 8003c70:	f004 fc14 	bl	800849c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c74:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	60da      	str	r2, [r3, #12]
}
 8003c7e:	bf00      	nop
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003c86:	b480      	push	{r7}
 8003c88:	b087      	sub	sp, #28
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d808      	bhi.n	8003cb4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad2      	subs	r2, r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4413      	add	r3, r2
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e004      	b.n	8003cbe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003cbe:	697b      	ldr	r3, [r7, #20]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08c      	sub	sp, #48	; 0x30
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b53      	cmp	r3, #83	; 0x53
 8003ce4:	d001      	beq.n	8003cea <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003ce6:	f7ff fecf 	bl	8003a88 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4a37      	ldr	r2, [pc, #220]	; (8003dd4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003cf8:	4413      	add	r3, r2
 8003cfa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d92b      	bls.n	8003d70 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4293      	cmp	r3, r2
 8003d28:	bf28      	it	cs
 8003d2a:	4613      	movcs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	4413      	add	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	6939      	ldr	r1, [r7, #16]
 8003d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d3e:	f004 fbad 	bl	800849c <memcpy>
    NumBytesRead += NumBytesRem;
 8003d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4413      	add	r3, r2
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4413      	add	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4413      	add	r3, r2
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d101      	bne.n	8003d70 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	bf28      	it	cs
 8003d80:	4613      	movcs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d019      	beq.n	8003dbe <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	4413      	add	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	6939      	ldr	r1, [r7, #16]
 8003d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d9a:	f004 fb7f 	bl	800849c <memcpy>
    NumBytesRead += NumBytesRem;
 8003d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	4413      	add	r3, r2
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3730      	adds	r7, #48	; 0x30
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20012ed8 	.word	0x20012ed8

08003dd8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08c      	sub	sp, #48	; 0x30
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003de4:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b53      	cmp	r3, #83	; 0x53
 8003df0:	d001      	beq.n	8003df6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003df2:	f7ff fe49 	bl	8003a88 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	3360      	adds	r3, #96	; 0x60
 8003e02:	4a37      	ldr	r2, [pc, #220]	; (8003ee0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e04:	4413      	add	r3, r2
 8003e06:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d92b      	bls.n	8003e7c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4293      	cmp	r3, r2
 8003e34:	bf28      	it	cs
 8003e36:	4613      	movcs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	4413      	add	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e4a:	f004 fb27 	bl	800849c <memcpy>
    NumBytesRead += NumBytesRem;
 8003e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	4413      	add	r3, r2
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d101      	bne.n	8003e7c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	bf28      	it	cs
 8003e8c:	4613      	movcs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d019      	beq.n	8003eca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	4413      	add	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	6939      	ldr	r1, [r7, #16]
 8003ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ea6:	f004 faf9 	bl	800849c <memcpy>
    NumBytesRead += NumBytesRem;
 8003eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4413      	add	r3, r2
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3730      	adds	r7, #48	; 0x30
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20012ed8 	.word	0x20012ed8

08003ee4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	3360      	adds	r3, #96	; 0x60
 8003f00:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003f02:	4413      	add	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d029      	beq.n	8003f62 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d82e      	bhi.n	8003f70 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d013      	beq.n	8003f42 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003f1a:	e029      	b.n	8003f70 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f7ff feb2 	bl	8003c86 <_GetAvailWriteSpace>
 8003f22:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d202      	bcs.n	8003f32 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f30:	e021      	b.n	8003f76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	69b9      	ldr	r1, [r7, #24]
 8003f3a:	6978      	ldr	r0, [r7, #20]
 8003f3c:	f7ff fe5b 	bl	8003bf6 <_WriteNoCheck>
    break;
 8003f40:	e019      	b.n	8003f76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f7ff fe9f 	bl	8003c86 <_GetAvailWriteSpace>
 8003f48:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	bf28      	it	cs
 8003f52:	4613      	movcs	r3, r2
 8003f54:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff fe4b 	bl	8003bf6 <_WriteNoCheck>
    break;
 8003f60:	e009      	b.n	8003f76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	69b9      	ldr	r1, [r7, #24]
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff fde8 	bl	8003b3c <_WriteBlocking>
 8003f6c:	61f8      	str	r0, [r7, #28]
    break;
 8003f6e:	e002      	b.n	8003f76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
    break;
 8003f74:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f76:	69fb      	ldr	r3, [r7, #28]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20012ed8 	.word	0x20012ed8

08003f84 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b53      	cmp	r3, #83	; 0x53
 8003f9c:	d001      	beq.n	8003fa2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003f9e:	f7ff fd73 	bl	8003a88 <_DoInit>
  SEGGER_RTT_LOCK();
 8003fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8003fa6:	f04f 0120 	mov.w	r1, #32
 8003faa:	f381 8811 	msr	BASEPRI, r1
 8003fae:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ff95 	bl	8003ee4 <SEGGER_RTT_WriteDownBufferNoLock>
 8003fba:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003fc2:	697b      	ldr	r3, [r7, #20]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20012ed8 	.word	0x20012ed8

08003fd0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b53      	cmp	r3, #83	; 0x53
 8003fea:	d001      	beq.n	8003ff0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003fec:	f7ff fd4c 	bl	8003a88 <_DoInit>
  SEGGER_RTT_LOCK();
 8003ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff4:	f04f 0120 	mov.w	r1, #32
 8003ff8:	f381 8811 	msr	BASEPRI, r1
 8003ffc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ffe:	4b35      	ldr	r3, [pc, #212]	; (80040d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004000:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004006:	6939      	ldr	r1, [r7, #16]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	440b      	add	r3, r1
 8004016:	3304      	adds	r3, #4
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3301      	adds	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	429a      	cmp	r2, r3
 800402c:	dbeb      	blt.n	8004006 <SEGGER_RTT_AllocUpBuffer+0x36>
 800402e:	e000      	b.n	8004032 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004030:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	429a      	cmp	r2, r3
 800403a:	da3f      	bge.n	80040bc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800403c:	6939      	ldr	r1, [r7, #16]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	440b      	add	r3, r1
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004050:	6939      	ldr	r1, [r7, #16]
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	440b      	add	r3, r1
 8004060:	3304      	adds	r3, #4
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004066:	6939      	ldr	r1, [r7, #16]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	3320      	adds	r3, #32
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	440b      	add	r3, r1
 8004088:	3328      	adds	r3, #40	; 0x28
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800408e:	6939      	ldr	r1, [r7, #16]
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	440b      	add	r3, r1
 800409c:	3324      	adds	r3, #36	; 0x24
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80040a2:	6939      	ldr	r1, [r7, #16]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	440b      	add	r3, r1
 80040b0:	332c      	adds	r3, #44	; 0x2c
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040b6:	f3bf 8f5f 	dmb	sy
 80040ba:	e002      	b.n	80040c2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
 80040c0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80040c8:	69fb      	ldr	r3, [r7, #28]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20012ed8 	.word	0x20012ed8

080040d8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b53      	cmp	r3, #83	; 0x53
 80040f2:	d001      	beq.n	80040f8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80040f4:	f7ff fcc8 	bl	8003a88 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040f8:	4b1c      	ldr	r3, [pc, #112]	; (800416c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80040fa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d82c      	bhi.n	800415c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004102:	f3ef 8311 	mrs	r3, BASEPRI
 8004106:	f04f 0120 	mov.w	r1, #32
 800410a:	f381 8811 	msr	BASEPRI, r1
 800410e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	3360      	adds	r3, #96	; 0x60
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2200      	movs	r2, #0
 800413e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2200      	movs	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800414c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	e002      	b.n	8004162 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004164:	4618      	mov	r0, r3
 8004166:	3728      	adds	r7, #40	; 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20012ed8 	.word	0x20012ed8

08004170 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	60fa      	str	r2, [r7, #12]
 8004186:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d90a      	bls.n	80041a4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004192:	e007      	b.n	80041a4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	1c53      	adds	r3, r2, #1
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1c59      	adds	r1, r3, #1
 800419e:	60f9      	str	r1, [r7, #12]
 80041a0:	7812      	ldrb	r2, [r2, #0]
 80041a2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	1e5a      	subs	r2, r3, #1
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <_EncodeStr+0x46>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1ee      	bne.n	8004194 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3307      	adds	r3, #7
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <_HandleIncomingPacket+0xd8>)
 80041f0:	7e1b      	ldrb	r3, [r3, #24]
 80041f2:	4618      	mov	r0, r3
 80041f4:	1cfb      	adds	r3, r7, #3
 80041f6:	2201      	movs	r2, #1
 80041f8:	4619      	mov	r1, r3
 80041fa:	f7ff fded 	bl	8003dd8 <SEGGER_RTT_ReadNoLock>
 80041fe:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d057      	beq.n	80042b6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d031      	beq.n	8004270 <_HandleIncomingPacket+0x88>
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	dc40      	bgt.n	8004292 <_HandleIncomingPacket+0xaa>
 8004210:	2b07      	cmp	r3, #7
 8004212:	dc15      	bgt.n	8004240 <_HandleIncomingPacket+0x58>
 8004214:	2b00      	cmp	r3, #0
 8004216:	dd3c      	ble.n	8004292 <_HandleIncomingPacket+0xaa>
 8004218:	3b01      	subs	r3, #1
 800421a:	2b06      	cmp	r3, #6
 800421c:	d839      	bhi.n	8004292 <_HandleIncomingPacket+0xaa>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <_HandleIncomingPacket+0x3c>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004247 	.word	0x08004247
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004253 	.word	0x08004253
 8004230:	08004259 	.word	0x08004259
 8004234:	0800425f 	.word	0x0800425f
 8004238:	08004265 	.word	0x08004265
 800423c:	0800426b 	.word	0x0800426b
 8004240:	2b7f      	cmp	r3, #127	; 0x7f
 8004242:	d033      	beq.n	80042ac <_HandleIncomingPacket+0xc4>
 8004244:	e025      	b.n	8004292 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004246:	f000 fff3 	bl	8005230 <SEGGER_SYSVIEW_Start>
      break;
 800424a:	e034      	b.n	80042b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800424c:	f001 f8ac 	bl	80053a8 <SEGGER_SYSVIEW_Stop>
      break;
 8004250:	e031      	b.n	80042b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004252:	f001 fa85 	bl	8005760 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004256:	e02e      	b.n	80042b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004258:	f001 fa4a 	bl	80056f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800425c:	e02b      	b.n	80042b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800425e:	f001 f8c9 	bl	80053f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004262:	e028      	b.n	80042b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004264:	f001 fcc2 	bl	8005bec <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004268:	e025      	b.n	80042b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800426a:	f001 fca1 	bl	8005bb0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800426e:	e022      	b.n	80042b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <_HandleIncomingPacket+0xd8>)
 8004272:	7e1b      	ldrb	r3, [r3, #24]
 8004274:	4618      	mov	r0, r3
 8004276:	1cfb      	adds	r3, r7, #3
 8004278:	2201      	movs	r2, #1
 800427a:	4619      	mov	r1, r3
 800427c:	f7ff fdac 	bl	8003dd8 <SEGGER_RTT_ReadNoLock>
 8004280:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	4618      	mov	r0, r3
 800428c:	f001 fc06 	bl	8005a9c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004290:	e00e      	b.n	80042b0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	b25b      	sxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	da0c      	bge.n	80042b4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <_HandleIncomingPacket+0xd8>)
 800429c:	7e1b      	ldrb	r3, [r3, #24]
 800429e:	4618      	mov	r0, r3
 80042a0:	1cfb      	adds	r3, r7, #3
 80042a2:	2201      	movs	r2, #1
 80042a4:	4619      	mov	r1, r3
 80042a6:	f7ff fd97 	bl	8003dd8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80042aa:	e003      	b.n	80042b4 <_HandleIncomingPacket+0xcc>
      break;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <_HandleIncomingPacket+0xce>
      break;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <_HandleIncomingPacket+0xce>
      break;
 80042b4:	bf00      	nop
    }
  }
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20014398 	.word	0x20014398

080042c4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08c      	sub	sp, #48	; 0x30
 80042c8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80042ca:	2301      	movs	r3, #1
 80042cc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	3301      	adds	r3, #1
 80042d2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d8:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <_TrySendOverflowPacket+0xe0>)
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	e00b      	b.n	80042f8 <_TrySendOverflowPacket+0x34>
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	1c59      	adds	r1, r3, #1
 80042e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	09db      	lsrs	r3, r3, #7
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	2b7f      	cmp	r3, #127	; 0x7f
 80042fc:	d8f0      	bhi.n	80042e0 <_TrySendOverflowPacket+0x1c>
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800430e:	4b26      	ldr	r3, [pc, #152]	; (80043a8 <_TrySendOverflowPacket+0xe4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <_TrySendOverflowPacket+0xe0>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	623b      	str	r3, [r7, #32]
 8004326:	e00b      	b.n	8004340 <_TrySendOverflowPacket+0x7c>
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	6279      	str	r1, [r7, #36]	; 0x24
 8004332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	09db      	lsrs	r3, r3, #7
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	2b7f      	cmp	r3, #127	; 0x7f
 8004344:	d8f0      	bhi.n	8004328 <_TrySendOverflowPacket+0x64>
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	627a      	str	r2, [r7, #36]	; 0x24
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <_TrySendOverflowPacket+0xe0>)
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	4618      	mov	r0, r3
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	461a      	mov	r2, r3
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	4619      	mov	r1, r3
 8004368:	f7fb ff52 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800436c:	4603      	mov	r3, r0
 800436e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004370:	f7ff fb00 	bl	8003974 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <_TrySendOverflowPacket+0xe0>)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <_TrySendOverflowPacket+0xe0>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	3b01      	subs	r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <_TrySendOverflowPacket+0xe0>)
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e004      	b.n	8004398 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <_TrySendOverflowPacket+0xe0>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	3301      	adds	r3, #1
 8004394:	4a03      	ldr	r2, [pc, #12]	; (80043a4 <_TrySendOverflowPacket+0xe0>)
 8004396:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004398:	693b      	ldr	r3, [r7, #16]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3730      	adds	r7, #48	; 0x30
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20014398 	.word	0x20014398
 80043a8:	e0001004 	.word	0xe0001004

080043ac <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80043b8:	4b96      	ldr	r3, [pc, #600]	; (8004614 <_SendPacket+0x268>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d010      	beq.n	80043e2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80043c0:	4b94      	ldr	r3, [pc, #592]	; (8004614 <_SendPacket+0x268>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8130 	beq.w	800462a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80043ca:	4b92      	ldr	r3, [pc, #584]	; (8004614 <_SendPacket+0x268>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d109      	bne.n	80043e6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80043d2:	f7ff ff77 	bl	80042c4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80043d6:	4b8f      	ldr	r3, [pc, #572]	; (8004614 <_SendPacket+0x268>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	f040 8127 	bne.w	800462e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80043e0:	e001      	b.n	80043e6 <_SendPacket+0x3a>
    goto Send;
 80043e2:	bf00      	nop
 80043e4:	e000      	b.n	80043e8 <_SendPacket+0x3c>
Send:
 80043e6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b1f      	cmp	r3, #31
 80043ec:	d809      	bhi.n	8004402 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80043ee:	4b89      	ldr	r3, [pc, #548]	; (8004614 <_SendPacket+0x268>)
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 8118 	bne.w	8004632 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b17      	cmp	r3, #23
 8004406:	d807      	bhi.n	8004418 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3b01      	subs	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e0c4      	b.n	80045a2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b7f      	cmp	r3, #127	; 0x7f
 8004424:	d912      	bls.n	800444c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	09da      	lsrs	r2, r3, #7
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3b01      	subs	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	3a01      	subs	r2, #1
 800443e:	60fa      	str	r2, [r7, #12]
 8004440:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	e006      	b.n	800445a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3b01      	subs	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b7e      	cmp	r3, #126	; 0x7e
 800445e:	d807      	bhi.n	8004470 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3b01      	subs	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e098      	b.n	80045a2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004476:	d212      	bcs.n	800449e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	09da      	lsrs	r2, r3, #7
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	3a01      	subs	r2, #1
 8004490:	60fa      	str	r2, [r7, #12]
 8004492:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e081      	b.n	80045a2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a4:	d21d      	bcs.n	80044e2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0b9a      	lsrs	r2, r3, #14
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	09db      	lsrs	r3, r3, #7
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	3a01      	subs	r2, #1
 80044c0:	60fa      	str	r2, [r7, #12]
 80044c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	3a01      	subs	r2, #1
 80044d4:	60fa      	str	r2, [r7, #12]
 80044d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	701a      	strb	r2, [r3, #0]
 80044e0:	e05f      	b.n	80045a2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e8:	d228      	bcs.n	800453c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0d5a      	lsrs	r2, r3, #21
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0b9b      	lsrs	r3, r3, #14
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	3a01      	subs	r2, #1
 8004504:	60fa      	str	r2, [r7, #12]
 8004506:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	09db      	lsrs	r3, r3, #7
 8004514:	b2db      	uxtb	r3, r3
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	3a01      	subs	r2, #1
 800451a:	60fa      	str	r2, [r7, #12]
 800451c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	3a01      	subs	r2, #1
 800452e:	60fa      	str	r2, [r7, #12]
 8004530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e032      	b.n	80045a2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0f1a      	lsrs	r2, r3, #28
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3b01      	subs	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0d5b      	lsrs	r3, r3, #21
 8004550:	b2db      	uxtb	r3, r3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	3a01      	subs	r2, #1
 8004556:	60fa      	str	r2, [r7, #12]
 8004558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0b9b      	lsrs	r3, r3, #14
 8004566:	b2db      	uxtb	r3, r3
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	3a01      	subs	r2, #1
 800456c:	60fa      	str	r2, [r7, #12]
 800456e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	09db      	lsrs	r3, r3, #7
 800457c:	b2db      	uxtb	r3, r3
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	3a01      	subs	r2, #1
 8004582:	60fa      	str	r2, [r7, #12]
 8004584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	3a01      	subs	r2, #1
 8004596:	60fa      	str	r2, [r7, #12]
 8004598:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <_SendPacket+0x26c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <_SendPacket+0x268>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	623b      	str	r3, [r7, #32]
 80045ba:	e00b      	b.n	80045d4 <_SendPacket+0x228>
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	6279      	str	r1, [r7, #36]	; 0x24
 80045c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	09db      	lsrs	r3, r3, #7
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2b7f      	cmp	r3, #127	; 0x7f
 80045d8:	d8f0      	bhi.n	80045bc <_SendPacket+0x210>
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	627a      	str	r2, [r7, #36]	; 0x24
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <_SendPacket+0x268>)
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	4618      	mov	r0, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	f7fb fe09 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045fe:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004600:	f7ff f9b8 	bl	8003974 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800460a:	4a02      	ldr	r2, [pc, #8]	; (8004614 <_SendPacket+0x268>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	60d3      	str	r3, [r2, #12]
 8004610:	e010      	b.n	8004634 <_SendPacket+0x288>
 8004612:	bf00      	nop
 8004614:	20014398 	.word	0x20014398
 8004618:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800461c:	4b19      	ldr	r3, [pc, #100]	; (8004684 <_SendPacket+0x2d8>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	4b17      	ldr	r3, [pc, #92]	; (8004684 <_SendPacket+0x2d8>)
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	e004      	b.n	8004634 <_SendPacket+0x288>
    goto SendDone;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <_SendPacket+0x288>
      goto SendDone;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <_SendPacket+0x288>
      goto SendDone;
 8004632:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004634:	4b13      	ldr	r3, [pc, #76]	; (8004684 <_SendPacket+0x2d8>)
 8004636:	7e1b      	ldrb	r3, [r3, #24]
 8004638:	4619      	mov	r1, r3
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <_SendPacket+0x2dc>)
 800463c:	460b      	mov	r3, r1
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	440b      	add	r3, r1
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	336c      	adds	r3, #108	; 0x6c
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <_SendPacket+0x2d8>)
 800464c:	7e1b      	ldrb	r3, [r3, #24]
 800464e:	4618      	mov	r0, r3
 8004650:	490d      	ldr	r1, [pc, #52]	; (8004688 <_SendPacket+0x2dc>)
 8004652:	4603      	mov	r3, r0
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4403      	add	r3, r0
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	3370      	adds	r3, #112	; 0x70
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d00b      	beq.n	800467c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004664:	4b07      	ldr	r3, [pc, #28]	; (8004684 <_SendPacket+0x2d8>)
 8004666:	789b      	ldrb	r3, [r3, #2]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d107      	bne.n	800467c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <_SendPacket+0x2d8>)
 800466e:	2201      	movs	r2, #1
 8004670:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004672:	f7ff fdb9 	bl	80041e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004676:	4b03      	ldr	r3, [pc, #12]	; (8004684 <_SendPacket+0x2d8>)
 8004678:	2200      	movs	r2, #0
 800467a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800467c:	bf00      	nop
 800467e:	3728      	adds	r7, #40	; 0x28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20014398 	.word	0x20014398
 8004688:	20012ed8 	.word	0x20012ed8

0800468c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	3301      	adds	r3, #1
 80046a2:	2b80      	cmp	r3, #128	; 0x80
 80046a4:	d80a      	bhi.n	80046bc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6051      	str	r1, [r2, #4]
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d15a      	bne.n	800477a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	623b      	str	r3, [r7, #32]
 80046e4:	e00b      	b.n	80046fe <_StoreChar+0x72>
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1c59      	adds	r1, r3, #1
 80046ee:	6279      	str	r1, [r7, #36]	; 0x24
 80046f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	09db      	lsrs	r3, r3, #7
 80046fc:	623b      	str	r3, [r7, #32]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2b7f      	cmp	r3, #127	; 0x7f
 8004702:	d8f0      	bhi.n	80046e6 <_StoreChar+0x5a>
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	627a      	str	r2, [r7, #36]	; 0x24
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e00b      	b.n	8004736 <_StoreChar+0xaa>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	61f9      	str	r1, [r7, #28]
 8004728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	09db      	lsrs	r3, r3, #7
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b7f      	cmp	r3, #127	; 0x7f
 800473a:	d8f0      	bhi.n	800471e <_StoreChar+0x92>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	61fa      	str	r2, [r7, #28]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	221a      	movs	r2, #26
 8004752:	6939      	ldr	r1, [r7, #16]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fe29 	bl	80043ac <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fd36 	bl	80041d0 <_PreparePacket>
 8004764:	4602      	mov	r2, r0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	611a      	str	r2, [r3, #16]
  }
}
 800477a:	bf00      	nop
 800477c:	3728      	adds	r7, #40	; 0x28
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004796:	2301      	movs	r3, #1
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800479a:	2301      	movs	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800479e:	e007      	b.n	80047b0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80047a0:	6a3a      	ldr	r2, [r7, #32]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	623b      	str	r3, [r7, #32]
    Width++;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3301      	adds	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80047b0:	6a3a      	ldr	r2, [r7, #32]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d2f3      	bcs.n	80047a0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d901      	bls.n	80047c4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11f      	bne.n	800480e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01c      	beq.n	800480e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <_PrintUnsigned+0x66>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <_PrintUnsigned+0x66>
        c = '0';
 80047e4:	2330      	movs	r3, #48	; 0x30
 80047e6:	76fb      	strb	r3, [r7, #27]
 80047e8:	e001      	b.n	80047ee <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80047ea:	2320      	movs	r3, #32
 80047ec:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047ee:	e007      	b.n	8004800 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	3b01      	subs	r3, #1
 80047f4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80047f6:	7efb      	ldrb	r3, [r7, #27]
 80047f8:	4619      	mov	r1, r3
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff ff46 	bl	800468c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <_PrintUnsigned+0x8a>
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	429a      	cmp	r2, r3
 800480c:	d3f0      	bcc.n	80047f0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d903      	bls.n	800481c <_PrintUnsigned+0x98>
      NumDigits--;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	e009      	b.n	8004830 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d200      	bcs.n	8004830 <_PrintUnsigned+0xac>
        break;
 800482e:	e005      	b.n	800483c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800483a:	e7e8      	b.n	800480e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	fb02 f303 	mul.w	r3, r2, r3
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004854:	4a15      	ldr	r2, [pc, #84]	; (80048ac <_PrintUnsigned+0x128>)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4413      	add	r3, r2
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	4619      	mov	r1, r3
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7ff ff14 	bl	800468c <_StoreChar>
    Digit /= Base;
 8004864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e3      	bne.n	800483c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d011      	beq.n	80048a2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004884:	e006      	b.n	8004894 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	3b01      	subs	r3, #1
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800488c:	2120      	movs	r1, #32
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7ff fefc 	bl	800468c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <_PrintUnsigned+0x11e>
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	429a      	cmp	r2, r3
 80048a0:	d3f1      	bcc.n	8004886 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80048a2:	bf00      	nop
 80048a4:	3728      	adds	r7, #40	; 0x28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	08008ecc 	.word	0x08008ecc

080048b0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bfb8      	it	lt
 80048c4:	425b      	neglt	r3, r3
 80048c6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80048c8:	2301      	movs	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80048cc:	e007      	b.n	80048de <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80048d6:	613b      	str	r3, [r7, #16]
    Width++;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3301      	adds	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	daf3      	bge.n	80048ce <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d901      	bls.n	80048f2 <_PrintInt+0x42>
    Width = NumDigits;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <_PrintInt+0x5e>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	db04      	blt.n	8004908 <_PrintInt+0x58>
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <_PrintInt+0x5e>
    FieldWidth--;
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	3b01      	subs	r3, #1
 800490c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <_PrintInt+0x6e>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <_PrintInt+0x9c>
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d111      	bne.n	800494c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800492e:	e006      	b.n	800493e <_PrintInt+0x8e>
        FieldWidth--;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	3b01      	subs	r3, #1
 8004934:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004936:	2120      	movs	r1, #32
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff fea7 	bl	800468c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <_PrintInt+0x9c>
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	429a      	cmp	r2, r3
 800494a:	d3f1      	bcc.n	8004930 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	da07      	bge.n	8004962 <_PrintInt+0xb2>
    v = -v;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	425b      	negs	r3, r3
 8004956:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004958:	212d      	movs	r1, #45	; 0x2d
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff fe96 	bl	800468c <_StoreChar>
 8004960:	e008      	b.n	8004974 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800496c:	212b      	movs	r1, #43	; 0x2b
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff fe8c 	bl	800468c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d019      	beq.n	80049b2 <_PrintInt+0x102>
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d114      	bne.n	80049b2 <_PrintInt+0x102>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d111      	bne.n	80049b2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004994:	e006      	b.n	80049a4 <_PrintInt+0xf4>
        FieldWidth--;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	3b01      	subs	r3, #1
 800499a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800499c:	2130      	movs	r1, #48	; 0x30
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff fe74 	bl	800468c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <_PrintInt+0x102>
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d3f1      	bcc.n	8004996 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff fedf 	bl	8004784 <_PrintUnsigned>
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b098      	sub	sp, #96	; 0x60
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80049dc:	f3ef 8311 	mrs	r3, BASEPRI
 80049e0:	f04f 0120 	mov.w	r1, #32
 80049e4:	f381 8811 	msr	BASEPRI, r1
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ea:	48b7      	ldr	r0, [pc, #732]	; (8004cc8 <_VPrintTarget+0x2f8>)
 80049ec:	f7ff fbf0 	bl	80041d0 <_PreparePacket>
 80049f0:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80049f2:	4bb5      	ldr	r3, [pc, #724]	; (8004cc8 <_VPrintTarget+0x2f8>)
 80049f4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80049f6:	2300      	movs	r3, #0
 80049f8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	3301      	adds	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004a16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 81a8 	beq.w	8004d70 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004a20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a24:	2b25      	cmp	r3, #37	; 0x25
 8004a26:	f040 8195 	bne.w	8004d54 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004a3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a3e:	3b23      	subs	r3, #35	; 0x23
 8004a40:	2b0d      	cmp	r3, #13
 8004a42:	d83f      	bhi.n	8004ac4 <_VPrintTarget+0xf4>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <_VPrintTarget+0x7c>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004ab5 	.word	0x08004ab5
 8004a50:	08004ac5 	.word	0x08004ac5
 8004a54:	08004ac5 	.word	0x08004ac5
 8004a58:	08004ac5 	.word	0x08004ac5
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004ac5 	.word	0x08004ac5
 8004a64:	08004ac5 	.word	0x08004ac5
 8004a68:	08004ac5 	.word	0x08004ac5
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a85 	.word	0x08004a85
 8004a78:	08004ac5 	.word	0x08004ac5
 8004a7c:	08004ac5 	.word	0x08004ac5
 8004a80:	08004a95 	.word	0x08004a95
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e01a      	b.n	8004aca <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a96:	f043 0302 	orr.w	r3, r3, #2
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e012      	b.n	8004aca <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa6:	f043 0304 	orr.w	r3, r3, #4
 8004aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e00a      	b.n	8004aca <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab6:	f043 0308 	orr.w	r3, r3, #8
 8004aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e002      	b.n	8004aca <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac8:	bf00      	nop
        }
      } while (v);
 8004aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1b0      	bne.n	8004a32 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004adc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8004ae2:	d912      	bls.n	8004b0a <_VPrintTarget+0x13a>
 8004ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ae8:	2b39      	cmp	r3, #57	; 0x39
 8004aea:	d80e      	bhi.n	8004b0a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	461a      	mov	r2, r3
 8004afe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b02:	4413      	add	r3, r2
 8004b04:	3b30      	subs	r3, #48	; 0x30
 8004b06:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004b08:	e7e4      	b.n	8004ad4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004b16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b1c:	d11d      	bne.n	8004b5a <_VPrintTarget+0x18a>
        sFormat++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b30:	2b2f      	cmp	r3, #47	; 0x2f
 8004b32:	d912      	bls.n	8004b5a <_VPrintTarget+0x18a>
 8004b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b38:	2b39      	cmp	r3, #57	; 0x39
 8004b3a:	d80e      	bhi.n	8004b5a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b52:	4413      	add	r3, r2
 8004b54:	3b30      	subs	r3, #48	; 0x30
 8004b56:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004b58:	e7e4      	b.n	8004b24 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004b62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b66:	2b6c      	cmp	r3, #108	; 0x6c
 8004b68:	d003      	beq.n	8004b72 <_VPrintTarget+0x1a2>
 8004b6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b6e:	2b68      	cmp	r3, #104	; 0x68
 8004b70:	d107      	bne.n	8004b82 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004b80:	e7ef      	b.n	8004b62 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004b82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b86:	2b25      	cmp	r3, #37	; 0x25
 8004b88:	f000 80d8 	beq.w	8004d3c <_VPrintTarget+0x36c>
 8004b8c:	2b25      	cmp	r3, #37	; 0x25
 8004b8e:	f2c0 80dc 	blt.w	8004d4a <_VPrintTarget+0x37a>
 8004b92:	2b78      	cmp	r3, #120	; 0x78
 8004b94:	f300 80d9 	bgt.w	8004d4a <_VPrintTarget+0x37a>
 8004b98:	2b58      	cmp	r3, #88	; 0x58
 8004b9a:	f2c0 80d6 	blt.w	8004d4a <_VPrintTarget+0x37a>
 8004b9e:	3b58      	subs	r3, #88	; 0x58
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	f200 80d2 	bhi.w	8004d4a <_VPrintTarget+0x37a>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <_VPrintTarget+0x1dc>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004ca3 	.word	0x08004ca3
 8004bb0:	08004d4b 	.word	0x08004d4b
 8004bb4:	08004d4b 	.word	0x08004d4b
 8004bb8:	08004d4b 	.word	0x08004d4b
 8004bbc:	08004d4b 	.word	0x08004d4b
 8004bc0:	08004d4b 	.word	0x08004d4b
 8004bc4:	08004d4b 	.word	0x08004d4b
 8004bc8:	08004d4b 	.word	0x08004d4b
 8004bcc:	08004d4b 	.word	0x08004d4b
 8004bd0:	08004d4b 	.word	0x08004d4b
 8004bd4:	08004d4b 	.word	0x08004d4b
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c57 	.word	0x08004c57
 8004be0:	08004d4b 	.word	0x08004d4b
 8004be4:	08004d4b 	.word	0x08004d4b
 8004be8:	08004d4b 	.word	0x08004d4b
 8004bec:	08004d4b 	.word	0x08004d4b
 8004bf0:	08004d4b 	.word	0x08004d4b
 8004bf4:	08004d4b 	.word	0x08004d4b
 8004bf8:	08004d4b 	.word	0x08004d4b
 8004bfc:	08004d4b 	.word	0x08004d4b
 8004c00:	08004d4b 	.word	0x08004d4b
 8004c04:	08004d4b 	.word	0x08004d4b
 8004c08:	08004d4b 	.word	0x08004d4b
 8004c0c:	08004d17 	.word	0x08004d17
 8004c10:	08004d4b 	.word	0x08004d4b
 8004c14:	08004d4b 	.word	0x08004d4b
 8004c18:	08004ccd 	.word	0x08004ccd
 8004c1c:	08004d4b 	.word	0x08004d4b
 8004c20:	08004c7d 	.word	0x08004c7d
 8004c24:	08004d4b 	.word	0x08004d4b
 8004c28:	08004d4b 	.word	0x08004d4b
 8004c2c:	08004ca3 	.word	0x08004ca3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1d19      	adds	r1, r3, #4
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6011      	str	r1, [r2, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004c44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fd1c 	bl	800468c <_StoreChar>
        break;
 8004c54:	e07a      	b.n	8004d4c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1d19      	adds	r1, r3, #4
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6011      	str	r1, [r2, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c64:	f107 0010 	add.w	r0, r7, #16
 8004c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c72:	220a      	movs	r2, #10
 8004c74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c76:	f7ff fe1b 	bl	80048b0 <_PrintInt>
        break;
 8004c7a:	e067      	b.n	8004d4c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	1d19      	adds	r1, r3, #4
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6011      	str	r1, [r2, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c8c:	f107 0010 	add.w	r0, r7, #16
 8004c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9a:	220a      	movs	r2, #10
 8004c9c:	f7ff fd72 	bl	8004784 <_PrintUnsigned>
        break;
 8004ca0:	e054      	b.n	8004d4c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	1d19      	adds	r1, r3, #4
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6011      	str	r1, [r2, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004cb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cb2:	f107 0010 	add.w	r0, r7, #16
 8004cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	f7ff fd5f 	bl	8004784 <_PrintUnsigned>
        break;
 8004cc6:	e041      	b.n	8004d4c <_VPrintTarget+0x37c>
 8004cc8:	200143c8 	.word	0x200143c8
      case 's':
        s = va_arg(*pParamList, const char*);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	1d19      	adds	r1, r3, #4
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6011      	str	r1, [r2, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <_VPrintTarget+0x314>
          s = "(null)";
 8004ce0:	4b4a      	ldr	r3, [pc, #296]	; (8004e0c <_VPrintTarget+0x43c>)
 8004ce2:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cee:	3301      	adds	r3, #1
 8004cf0:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004cf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004cfa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004cfe:	f107 0310 	add.w	r3, r7, #16
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fcc1 	bl	800468c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0e:	d9e9      	bls.n	8004ce4 <_VPrintTarget+0x314>
        break;
 8004d10:	e01c      	b.n	8004d4c <_VPrintTarget+0x37c>
            break;
 8004d12:	bf00      	nop
        break;
 8004d14:	e01a      	b.n	8004d4c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	1d19      	adds	r1, r3, #4
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6011      	str	r1, [r2, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004d24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d26:	f107 0010 	add.w	r0, r7, #16
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	2308      	movs	r3, #8
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	2308      	movs	r3, #8
 8004d34:	2210      	movs	r2, #16
 8004d36:	f7ff fd25 	bl	8004784 <_PrintUnsigned>
        break;
 8004d3a:	e007      	b.n	8004d4c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004d3c:	f107 0310 	add.w	r3, r7, #16
 8004d40:	2125      	movs	r1, #37	; 0x25
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fca2 	bl	800468c <_StoreChar>
        break;
 8004d48:	e000      	b.n	8004d4c <_VPrintTarget+0x37c>
      default:
        break;
 8004d4a:	bf00      	nop
      }
      sFormat++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e007      	b.n	8004d64 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004d54:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d58:	f107 0310 	add.w	r3, r7, #16
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fc94 	bl	800468c <_StoreChar>
    }
  } while (*sFormat);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f47f ae4d 	bne.w	8004a08 <_VPrintTarget+0x38>
 8004d6e:	e000      	b.n	8004d72 <_VPrintTarget+0x3a2>
      break;
 8004d70:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d041      	beq.n	8004dfc <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d88:	e00b      	b.n	8004da2 <_VPrintTarget+0x3d2>
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d90:	1c59      	adds	r1, r3, #1
 8004d92:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004d94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	09db      	lsrs	r3, r3, #7
 8004da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	2b7f      	cmp	r3, #127	; 0x7f
 8004da6:	d8f0      	bhi.n	8004d8a <_VPrintTarget+0x3ba>
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc0:	e00b      	b.n	8004dda <_VPrintTarget+0x40a>
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	6379      	str	r1, [r7, #52]	; 0x34
 8004dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	09db      	lsrs	r3, r3, #7
 8004dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dde:	d8f0      	bhi.n	8004dc2 <_VPrintTarget+0x3f2>
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	637a      	str	r2, [r7, #52]	; 0x34
 8004de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	6979      	ldr	r1, [r7, #20]
 8004df4:	221a      	movs	r2, #26
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fad8 	bl	80043ac <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004e02:	bf00      	nop
 8004e04:	3758      	adds	r7, #88	; 0x58
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08008e38 	.word	0x08008e38

08004e10 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e24:	4917      	ldr	r1, [pc, #92]	; (8004e84 <SEGGER_SYSVIEW_Init+0x74>)
 8004e26:	4818      	ldr	r0, [pc, #96]	; (8004e88 <SEGGER_SYSVIEW_Init+0x78>)
 8004e28:	f7ff f8d2 	bl	8003fd0 <SEGGER_RTT_AllocUpBuffer>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e32:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e36:	785a      	ldrb	r2, [r3, #1]
 8004e38:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3e:	7e1b      	ldrb	r3, [r3, #24]
 8004e40:	4618      	mov	r0, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2308      	movs	r3, #8
 8004e48:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <SEGGER_SYSVIEW_Init+0x80>)
 8004e4a:	490f      	ldr	r1, [pc, #60]	; (8004e88 <SEGGER_SYSVIEW_Init+0x78>)
 8004e4c:	f7ff f944 	bl	80040d8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e56:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <SEGGER_SYSVIEW_Init+0x84>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a0c      	ldr	r2, [pc, #48]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e5c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e5e:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e64:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e70:	4a06      	ldr	r2, [pc, #24]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20013390 	.word	0x20013390
 8004e88:	08008e40 	.word	0x08008e40
 8004e8c:	20014398 	.word	0x20014398
 8004e90:	20014390 	.word	0x20014390
 8004e94:	e0001004 	.word	0xe0001004

08004e98 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6113      	str	r3, [r2, #16]
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20014398 	.word	0x20014398

08004eb8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec4:	f04f 0120 	mov.w	r1, #32
 8004ec8:	f381 8811 	msr	BASEPRI, r1
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	4808      	ldr	r0, [pc, #32]	; (8004ef0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ed0:	f7ff f97e 	bl	80041d0 <_PreparePacket>
 8004ed4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68b8      	ldr	r0, [r7, #8]
 8004edc:	f7ff fa66 	bl	80043ac <_SendPacket>
  RECORD_END();
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f383 8811 	msr	BASEPRI, r3
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200143c8 	.word	0x200143c8

08004ef4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004efe:	f3ef 8311 	mrs	r3, BASEPRI
 8004f02:	f04f 0120 	mov.w	r1, #32
 8004f06:	f381 8811 	msr	BASEPRI, r1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	4816      	ldr	r0, [pc, #88]	; (8004f68 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004f0e:	f7ff f95f 	bl	80041d0 <_PreparePacket>
 8004f12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e00b      	b.n	8004f3a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1c59      	adds	r1, r3, #1
 8004f2a:	61f9      	str	r1, [r7, #28]
 8004f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	09db      	lsrs	r3, r3, #7
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3e:	d8f0      	bhi.n	8004f22 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	61fa      	str	r2, [r7, #28]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	6938      	ldr	r0, [r7, #16]
 8004f56:	f7ff fa29 	bl	80043ac <_SendPacket>
  RECORD_END();
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f383 8811 	msr	BASEPRI, r3
}
 8004f60:	bf00      	nop
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200143c8 	.word	0x200143c8

08004f6c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	; 0x30
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f78:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7c:	f04f 0120 	mov.w	r1, #32
 8004f80:	f381 8811 	msr	BASEPRI, r1
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	4825      	ldr	r0, [pc, #148]	; (800501c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f88:	f7ff f922 	bl	80041d0 <_PreparePacket>
 8004f8c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9a:	e00b      	b.n	8004fb4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	09db      	lsrs	r3, r3, #7
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb8:	d8f0      	bhi.n	8004f9c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e00b      	b.n	8004fec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	6279      	str	r1, [r7, #36]	; 0x24
 8004fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	09db      	lsrs	r3, r3, #7
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff0:	d8f0      	bhi.n	8004fd4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	69b8      	ldr	r0, [r7, #24]
 8005008:	f7ff f9d0 	bl	80043ac <_SendPacket>
  RECORD_END();
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f383 8811 	msr	BASEPRI, r3
}
 8005012:	bf00      	nop
 8005014:	3730      	adds	r7, #48	; 0x30
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200143c8 	.word	0x200143c8

08005020 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b08e      	sub	sp, #56	; 0x38
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800502e:	f3ef 8311 	mrs	r3, BASEPRI
 8005032:	f04f 0120 	mov.w	r1, #32
 8005036:	f381 8811 	msr	BASEPRI, r1
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	4832      	ldr	r0, [pc, #200]	; (8005108 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800503e:	f7ff f8c7 	bl	80041d0 <_PreparePacket>
 8005042:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	633b      	str	r3, [r7, #48]	; 0x30
 8005050:	e00b      	b.n	800506a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	6379      	str	r1, [r7, #52]	; 0x34
 800505c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	09db      	lsrs	r3, r3, #7
 8005068:	633b      	str	r3, [r7, #48]	; 0x30
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	2b7f      	cmp	r3, #127	; 0x7f
 800506e:	d8f0      	bhi.n	8005052 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	637a      	str	r2, [r7, #52]	; 0x34
 8005076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
 8005088:	e00b      	b.n	80050a2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	b2da      	uxtb	r2, r3
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	1c59      	adds	r1, r3, #1
 8005092:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	09db      	lsrs	r3, r3, #7
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	2b7f      	cmp	r3, #127	; 0x7f
 80050a6:	d8f0      	bhi.n	800508a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	623b      	str	r3, [r7, #32]
 80050c0:	e00b      	b.n	80050da <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	1c59      	adds	r1, r3, #1
 80050ca:	6279      	str	r1, [r7, #36]	; 0x24
 80050cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	09db      	lsrs	r3, r3, #7
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	2b7f      	cmp	r3, #127	; 0x7f
 80050de:	d8f0      	bhi.n	80050c2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	627a      	str	r2, [r7, #36]	; 0x24
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	69b8      	ldr	r0, [r7, #24]
 80050f6:	f7ff f959 	bl	80043ac <_SendPacket>
  RECORD_END();
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f383 8811 	msr	BASEPRI, r3
}
 8005100:	bf00      	nop
 8005102:	3738      	adds	r7, #56	; 0x38
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	200143c8 	.word	0x200143c8

0800510c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b090      	sub	sp, #64	; 0x40
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800511a:	f3ef 8311 	mrs	r3, BASEPRI
 800511e:	f04f 0120 	mov.w	r1, #32
 8005122:	f381 8811 	msr	BASEPRI, r1
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	4840      	ldr	r0, [pc, #256]	; (800522c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800512a:	f7ff f851 	bl	80041d0 <_PreparePacket>
 800512e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	63bb      	str	r3, [r7, #56]	; 0x38
 800513c:	e00b      	b.n	8005156 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	b2da      	uxtb	r2, r3
 8005142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	09db      	lsrs	r3, r3, #7
 8005154:	63bb      	str	r3, [r7, #56]	; 0x38
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	2b7f      	cmp	r3, #127	; 0x7f
 800515a:	d8f0      	bhi.n	800513e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800515c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	633b      	str	r3, [r7, #48]	; 0x30
 8005174:	e00b      	b.n	800518e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	b2da      	uxtb	r2, r3
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	1c59      	adds	r1, r3, #1
 800517e:	6379      	str	r1, [r7, #52]	; 0x34
 8005180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	09db      	lsrs	r3, r3, #7
 800518c:	633b      	str	r3, [r7, #48]	; 0x30
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b7f      	cmp	r3, #127	; 0x7f
 8005192:	d8f0      	bhi.n	8005176 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	637a      	str	r2, [r7, #52]	; 0x34
 800519a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ac:	e00b      	b.n	80051c6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	09db      	lsrs	r3, r3, #7
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ca:	d8f0      	bhi.n	80051ae <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
 80051e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	e00b      	b.n	80051fe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	1c59      	adds	r1, r3, #1
 80051ee:	6279      	str	r1, [r7, #36]	; 0x24
 80051f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	09db      	lsrs	r3, r3, #7
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	2b7f      	cmp	r3, #127	; 0x7f
 8005202:	d8f0      	bhi.n	80051e6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	627a      	str	r2, [r7, #36]	; 0x24
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	69b8      	ldr	r0, [r7, #24]
 800521a:	f7ff f8c7 	bl	80043ac <_SendPacket>
  RECORD_END();
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f383 8811 	msr	BASEPRI, r3
}
 8005224:	bf00      	nop
 8005226:	3740      	adds	r7, #64	; 0x40
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	200143c8 	.word	0x200143c8

08005230 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b08c      	sub	sp, #48	; 0x30
 8005234:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005236:	4b59      	ldr	r3, [pc, #356]	; (800539c <SEGGER_SYSVIEW_Start+0x16c>)
 8005238:	2201      	movs	r2, #1
 800523a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800523c:	f3ef 8311 	mrs	r3, BASEPRI
 8005240:	f04f 0120 	mov.w	r1, #32
 8005244:	f381 8811 	msr	BASEPRI, r1
 8005248:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800524a:	4b54      	ldr	r3, [pc, #336]	; (800539c <SEGGER_SYSVIEW_Start+0x16c>)
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	220a      	movs	r2, #10
 8005250:	4953      	ldr	r1, [pc, #332]	; (80053a0 <SEGGER_SYSVIEW_Start+0x170>)
 8005252:	4618      	mov	r0, r3
 8005254:	f7fa ffdc 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800525e:	f7fe fb89 	bl	8003974 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005262:	200a      	movs	r0, #10
 8005264:	f7ff fe28 	bl	8004eb8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005268:	f3ef 8311 	mrs	r3, BASEPRI
 800526c:	f04f 0120 	mov.w	r1, #32
 8005270:	f381 8811 	msr	BASEPRI, r1
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	484b      	ldr	r0, [pc, #300]	; (80053a4 <SEGGER_SYSVIEW_Start+0x174>)
 8005278:	f7fe ffaa 	bl	80041d0 <_PreparePacket>
 800527c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005286:	4b45      	ldr	r3, [pc, #276]	; (800539c <SEGGER_SYSVIEW_Start+0x16c>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
 800528c:	e00b      	b.n	80052a6 <SEGGER_SYSVIEW_Start+0x76>
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	b2da      	uxtb	r2, r3
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	1c59      	adds	r1, r3, #1
 8005296:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	09db      	lsrs	r3, r3, #7
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	2b7f      	cmp	r3, #127	; 0x7f
 80052aa:	d8f0      	bhi.n	800528e <SEGGER_SYSVIEW_Start+0x5e>
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
 80052c0:	4b36      	ldr	r3, [pc, #216]	; (800539c <SEGGER_SYSVIEW_Start+0x16c>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	623b      	str	r3, [r7, #32]
 80052c6:	e00b      	b.n	80052e0 <SEGGER_SYSVIEW_Start+0xb0>
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	6279      	str	r1, [r7, #36]	; 0x24
 80052d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	09db      	lsrs	r3, r3, #7
 80052de:	623b      	str	r3, [r7, #32]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	2b7f      	cmp	r3, #127	; 0x7f
 80052e4:	d8f0      	bhi.n	80052c8 <SEGGER_SYSVIEW_Start+0x98>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	627a      	str	r2, [r7, #36]	; 0x24
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	4b28      	ldr	r3, [pc, #160]	; (800539c <SEGGER_SYSVIEW_Start+0x16c>)
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	e00b      	b.n	800531a <SEGGER_SYSVIEW_Start+0xea>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	b2da      	uxtb	r2, r3
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	1c59      	adds	r1, r3, #1
 800530a:	61f9      	str	r1, [r7, #28]
 800530c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	09db      	lsrs	r3, r3, #7
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b7f      	cmp	r3, #127	; 0x7f
 800531e:	d8f0      	bhi.n	8005302 <SEGGER_SYSVIEW_Start+0xd2>
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	61fa      	str	r2, [r7, #28]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	e00b      	b.n	8005352 <SEGGER_SYSVIEW_Start+0x122>
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	b2da      	uxtb	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	6179      	str	r1, [r7, #20]
 8005344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	09db      	lsrs	r3, r3, #7
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b7f      	cmp	r3, #127	; 0x7f
 8005356:	d8f0      	bhi.n	800533a <SEGGER_SYSVIEW_Start+0x10a>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	617a      	str	r2, [r7, #20]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005368:	2218      	movs	r2, #24
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff f81d 	bl	80043ac <_SendPacket>
      RECORD_END();
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <SEGGER_SYSVIEW_Start+0x16c>)
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <SEGGER_SYSVIEW_Start+0x16c>)
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005386:	f000 f9eb 	bl	8005760 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800538a:	f000 f9b1 	bl	80056f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800538e:	f000 fc2d 	bl	8005bec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005392:	bf00      	nop
 8005394:	3730      	adds	r7, #48	; 0x30
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20014398 	.word	0x20014398
 80053a0:	08008ec0 	.word	0x08008ec0
 80053a4:	200143c8 	.word	0x200143c8

080053a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053ae:	f3ef 8311 	mrs	r3, BASEPRI
 80053b2:	f04f 0120 	mov.w	r1, #32
 80053b6:	f381 8811 	msr	BASEPRI, r1
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	480b      	ldr	r0, [pc, #44]	; (80053ec <SEGGER_SYSVIEW_Stop+0x44>)
 80053be:	f7fe ff07 	bl	80041d0 <_PreparePacket>
 80053c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80053cc:	220b      	movs	r2, #11
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6838      	ldr	r0, [r7, #0]
 80053d2:	f7fe ffeb 	bl	80043ac <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f383 8811 	msr	BASEPRI, r3
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200143c8 	.word	0x200143c8
 80053f0:	20014398 	.word	0x20014398

080053f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08c      	sub	sp, #48	; 0x30
 80053f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80053fa:	f3ef 8311 	mrs	r3, BASEPRI
 80053fe:	f04f 0120 	mov.w	r1, #32
 8005402:	f381 8811 	msr	BASEPRI, r1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	4845      	ldr	r0, [pc, #276]	; (8005520 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800540a:	f7fe fee1 	bl	80041d0 <_PreparePacket>
 800540e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005418:	4b42      	ldr	r3, [pc, #264]	; (8005524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
 800541e:	e00b      	b.n	8005438 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	b2da      	uxtb	r2, r3
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	1c59      	adds	r1, r3, #1
 8005428:	62f9      	str	r1, [r7, #44]	; 0x2c
 800542a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	09db      	lsrs	r3, r3, #7
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	2b7f      	cmp	r3, #127	; 0x7f
 800543c:	d8f0      	bhi.n	8005420 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	4b34      	ldr	r3, [pc, #208]	; (8005524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	e00b      	b.n	8005472 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	b2da      	uxtb	r2, r3
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	1c59      	adds	r1, r3, #1
 8005462:	6279      	str	r1, [r7, #36]	; 0x24
 8005464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	09db      	lsrs	r3, r3, #7
 8005470:	623b      	str	r3, [r7, #32]
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	2b7f      	cmp	r3, #127	; 0x7f
 8005476:	d8f0      	bhi.n	800545a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	627a      	str	r2, [r7, #36]	; 0x24
 800547e:	6a3a      	ldr	r2, [r7, #32]
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	4b25      	ldr	r3, [pc, #148]	; (8005524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	e00b      	b.n	80054ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	61f9      	str	r1, [r7, #28]
 800549e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	09db      	lsrs	r3, r3, #7
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b7f      	cmp	r3, #127	; 0x7f
 80054b0:	d8f0      	bhi.n	8005494 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	61fa      	str	r2, [r7, #28]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	e00b      	b.n	80054e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	1c59      	adds	r1, r3, #1
 80054d4:	6179      	str	r1, [r7, #20]
 80054d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	09db      	lsrs	r3, r3, #7
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	2b7f      	cmp	r3, #127	; 0x7f
 80054e8:	d8f0      	bhi.n	80054cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	617a      	str	r2, [r7, #20]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80054fa:	2218      	movs	r2, #24
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	68b8      	ldr	r0, [r7, #8]
 8005500:	f7fe ff54 	bl	80043ac <_SendPacket>
  RECORD_END();
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800550a:	4b06      	ldr	r3, [pc, #24]	; (8005524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	4798      	blx	r3
  }
}
 8005518:	bf00      	nop
 800551a:	3730      	adds	r7, #48	; 0x30
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200143c8 	.word	0x200143c8
 8005524:	20014398 	.word	0x20014398

08005528 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b092      	sub	sp, #72	; 0x48
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005530:	f3ef 8311 	mrs	r3, BASEPRI
 8005534:	f04f 0120 	mov.w	r1, #32
 8005538:	f381 8811 	msr	BASEPRI, r1
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	486a      	ldr	r0, [pc, #424]	; (80056e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005540:	f7fe fe46 	bl	80041d0 <_PreparePacket>
 8005544:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	647b      	str	r3, [r7, #68]	; 0x44
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b66      	ldr	r3, [pc, #408]	; (80056ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	643b      	str	r3, [r7, #64]	; 0x40
 800555a:	e00b      	b.n	8005574 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800555c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555e:	b2da      	uxtb	r2, r3
 8005560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005562:	1c59      	adds	r1, r3, #1
 8005564:	6479      	str	r1, [r7, #68]	; 0x44
 8005566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005570:	09db      	lsrs	r3, r3, #7
 8005572:	643b      	str	r3, [r7, #64]	; 0x40
 8005574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005576:	2b7f      	cmp	r3, #127	; 0x7f
 8005578:	d8f0      	bhi.n	800555c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800557a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	647a      	str	r2, [r7, #68]	; 0x44
 8005580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
 8005594:	e00b      	b.n	80055ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	b2da      	uxtb	r2, r3
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	1c59      	adds	r1, r3, #1
 800559e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80055a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	09db      	lsrs	r3, r3, #7
 80055ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	2b7f      	cmp	r3, #127	; 0x7f
 80055b2:	d8f0      	bhi.n	8005596 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	4619      	mov	r1, r3
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7fe fdcf 	bl	8004170 <_EncodeStr>
 80055d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80055d4:	2209      	movs	r2, #9
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	6938      	ldr	r0, [r7, #16]
 80055da:	f7fe fee7 	bl	80043ac <_SendPacket>
  //
  pPayload = pPayloadStart;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b40      	ldr	r3, [pc, #256]	; (80056ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	633b      	str	r3, [r7, #48]	; 0x30
 80055f2:	e00b      	b.n	800560c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	6379      	str	r1, [r7, #52]	; 0x34
 80055fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	09db      	lsrs	r3, r3, #7
 800560a:	633b      	str	r3, [r7, #48]	; 0x30
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	2b7f      	cmp	r3, #127	; 0x7f
 8005610:	d8f0      	bhi.n	80055f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	637a      	str	r2, [r7, #52]	; 0x34
 8005618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
 800562c:	e00b      	b.n	8005646 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	b2da      	uxtb	r2, r3
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	1c59      	adds	r1, r3, #1
 8005636:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	09db      	lsrs	r3, r3, #7
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	2b7f      	cmp	r3, #127	; 0x7f
 800564a:	d8f0      	bhi.n	800562e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	e00b      	b.n	8005680 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	1c59      	adds	r1, r3, #1
 8005670:	6279      	str	r1, [r7, #36]	; 0x24
 8005672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	09db      	lsrs	r3, r3, #7
 800567e:	623b      	str	r3, [r7, #32]
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	2b7f      	cmp	r3, #127	; 0x7f
 8005684:	d8f0      	bhi.n	8005668 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	627a      	str	r2, [r7, #36]	; 0x24
 800568c:	6a3a      	ldr	r2, [r7, #32]
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	2300      	movs	r3, #0
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e00b      	b.n	80056b8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	1c59      	adds	r1, r3, #1
 80056a8:	61f9      	str	r1, [r7, #28]
 80056aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	09db      	lsrs	r3, r3, #7
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b7f      	cmp	r3, #127	; 0x7f
 80056bc:	d8f0      	bhi.n	80056a0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	61fa      	str	r2, [r7, #28]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80056ce:	2215      	movs	r2, #21
 80056d0:	68f9      	ldr	r1, [r7, #12]
 80056d2:	6938      	ldr	r0, [r7, #16]
 80056d4:	f7fe fe6a 	bl	80043ac <_SendPacket>
  RECORD_END();
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f383 8811 	msr	BASEPRI, r3
}
 80056de:	bf00      	nop
 80056e0:	3748      	adds	r7, #72	; 0x48
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200143c8 	.word	0x200143c8
 80056ec:	20014398 	.word	0x20014398

080056f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80056f4:	4b07      	ldr	r3, [pc, #28]	; (8005714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005706:	4b03      	ldr	r3, [pc, #12]	; (8005714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4798      	blx	r3
  }
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20014398 	.word	0x20014398

08005718 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005720:	f3ef 8311 	mrs	r3, BASEPRI
 8005724:	f04f 0120 	mov.w	r1, #32
 8005728:	f381 8811 	msr	BASEPRI, r1
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	480b      	ldr	r0, [pc, #44]	; (800575c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005730:	f7fe fd4e 	bl	80041d0 <_PreparePacket>
 8005734:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	6938      	ldr	r0, [r7, #16]
 800573c:	f7fe fd18 	bl	8004170 <_EncodeStr>
 8005740:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005742:	220e      	movs	r2, #14
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	6938      	ldr	r0, [r7, #16]
 8005748:	f7fe fe30 	bl	80043ac <_SendPacket>
  RECORD_END();
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f383 8811 	msr	BASEPRI, r3
}
 8005752:	bf00      	nop
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200143c8 	.word	0x200143c8

08005760 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005766:	4b15      	ldr	r3, [pc, #84]	; (80057bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01a      	beq.n	80057a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4798      	blx	r3
 8005780:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005784:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	000a      	movs	r2, r1
 8005794:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005796:	4613      	mov	r3, r2
 8005798:	461a      	mov	r2, r3
 800579a:	4621      	mov	r1, r4
 800579c:	200d      	movs	r0, #13
 800579e:	f7ff fbe5 	bl	8004f6c <SEGGER_SYSVIEW_RecordU32x2>
 80057a2:	e006      	b.n	80057b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	200c      	movs	r0, #12
 80057ac:	f7ff fba2 	bl	8004ef4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd90      	pop	{r4, r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20014398 	.word	0x20014398
 80057c0:	e0001004 	.word	0xe0001004

080057c4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057ca:	f3ef 8311 	mrs	r3, BASEPRI
 80057ce:	f04f 0120 	mov.w	r1, #32
 80057d2:	f381 8811 	msr	BASEPRI, r1
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	4819      	ldr	r0, [pc, #100]	; (8005840 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80057da:	f7fe fcf9 	bl	80041d0 <_PreparePacket>
 80057de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80057e4:	4b17      	ldr	r3, [pc, #92]	; (8005844 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	e00b      	b.n	8005810 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	6179      	str	r1, [r7, #20]
 8005802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	09db      	lsrs	r3, r3, #7
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b7f      	cmp	r3, #127	; 0x7f
 8005814:	d8f0      	bhi.n	80057f8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	617a      	str	r2, [r7, #20]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005826:	2202      	movs	r2, #2
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	68b8      	ldr	r0, [r7, #8]
 800582c:	f7fe fdbe 	bl	80043ac <_SendPacket>
  RECORD_END();
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f383 8811 	msr	BASEPRI, r3
}
 8005836:	bf00      	nop
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	200143c8 	.word	0x200143c8
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800584e:	f3ef 8311 	mrs	r3, BASEPRI
 8005852:	f04f 0120 	mov.w	r1, #32
 8005856:	f381 8811 	msr	BASEPRI, r1
 800585a:	607b      	str	r3, [r7, #4]
 800585c:	4807      	ldr	r0, [pc, #28]	; (800587c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800585e:	f7fe fcb7 	bl	80041d0 <_PreparePacket>
 8005862:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005864:	2203      	movs	r2, #3
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6838      	ldr	r0, [r7, #0]
 800586a:	f7fe fd9f 	bl	80043ac <_SendPacket>
  RECORD_END();
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f383 8811 	msr	BASEPRI, r3
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	200143c8 	.word	0x200143c8

08005880 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005886:	f3ef 8311 	mrs	r3, BASEPRI
 800588a:	f04f 0120 	mov.w	r1, #32
 800588e:	f381 8811 	msr	BASEPRI, r1
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	4807      	ldr	r0, [pc, #28]	; (80058b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005896:	f7fe fc9b 	bl	80041d0 <_PreparePacket>
 800589a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800589c:	2212      	movs	r2, #18
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6838      	ldr	r0, [r7, #0]
 80058a2:	f7fe fd83 	bl	80043ac <_SendPacket>
  RECORD_END();
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f383 8811 	msr	BASEPRI, r3
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200143c8 	.word	0x200143c8

080058b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058be:	f3ef 8311 	mrs	r3, BASEPRI
 80058c2:	f04f 0120 	mov.w	r1, #32
 80058c6:	f381 8811 	msr	BASEPRI, r1
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	4807      	ldr	r0, [pc, #28]	; (80058ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80058ce:	f7fe fc7f 	bl	80041d0 <_PreparePacket>
 80058d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80058d4:	2211      	movs	r2, #17
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6838      	ldr	r0, [r7, #0]
 80058da:	f7fe fd67 	bl	80043ac <_SendPacket>
  RECORD_END();
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f383 8811 	msr	BASEPRI, r3
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200143c8 	.word	0x200143c8

080058f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058f8:	f3ef 8311 	mrs	r3, BASEPRI
 80058fc:	f04f 0120 	mov.w	r1, #32
 8005900:	f381 8811 	msr	BASEPRI, r1
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	4819      	ldr	r0, [pc, #100]	; (800596c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005908:	f7fe fc62 	bl	80041d0 <_PreparePacket>
 800590c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005912:	4b17      	ldr	r3, [pc, #92]	; (8005970 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	e00b      	b.n	800593e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	61f9      	str	r1, [r7, #28]
 8005930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2b7f      	cmp	r3, #127	; 0x7f
 8005942:	d8f0      	bhi.n	8005926 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	61fa      	str	r2, [r7, #28]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005954:	2208      	movs	r2, #8
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	6938      	ldr	r0, [r7, #16]
 800595a:	f7fe fd27 	bl	80043ac <_SendPacket>
  RECORD_END();
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f383 8811 	msr	BASEPRI, r3
}
 8005964:	bf00      	nop
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200143c8 	.word	0x200143c8
 8005970:	20014398 	.word	0x20014398

08005974 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800597c:	f3ef 8311 	mrs	r3, BASEPRI
 8005980:	f04f 0120 	mov.w	r1, #32
 8005984:	f381 8811 	msr	BASEPRI, r1
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	4819      	ldr	r0, [pc, #100]	; (80059f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800598c:	f7fe fc20 	bl	80041d0 <_PreparePacket>
 8005990:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005996:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	e00b      	b.n	80059c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	1c59      	adds	r1, r3, #1
 80059b2:	61f9      	str	r1, [r7, #28]
 80059b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	09db      	lsrs	r3, r3, #7
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b7f      	cmp	r3, #127	; 0x7f
 80059c6:	d8f0      	bhi.n	80059aa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	61fa      	str	r2, [r7, #28]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80059d8:	2204      	movs	r2, #4
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	6938      	ldr	r0, [r7, #16]
 80059de:	f7fe fce5 	bl	80043ac <_SendPacket>
  RECORD_END();
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f383 8811 	msr	BASEPRI, r3
}
 80059e8:	bf00      	nop
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	200143c8 	.word	0x200143c8
 80059f4:	20014398 	.word	0x20014398

080059f8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a00:	f3ef 8311 	mrs	r3, BASEPRI
 8005a04:	f04f 0120 	mov.w	r1, #32
 8005a08:	f381 8811 	msr	BASEPRI, r1
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	4819      	ldr	r0, [pc, #100]	; (8005a74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005a10:	f7fe fbde 	bl	80041d0 <_PreparePacket>
 8005a14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a1a:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e00b      	b.n	8005a46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	61f9      	str	r1, [r7, #28]
 8005a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	09db      	lsrs	r3, r3, #7
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b7f      	cmp	r3, #127	; 0x7f
 8005a4a:	d8f0      	bhi.n	8005a2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	61fa      	str	r2, [r7, #28]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005a5c:	2206      	movs	r2, #6
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	6938      	ldr	r0, [r7, #16]
 8005a62:	f7fe fca3 	bl	80043ac <_SendPacket>
  RECORD_END();
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f383 8811 	msr	BASEPRI, r3
}
 8005a6c:	bf00      	nop
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	200143c8 	.word	0x200143c8
 8005a78:	20014398 	.word	0x20014398

08005a7c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	1ad3      	subs	r3, r2, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20014398 	.word	0x20014398

08005a9c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08c      	sub	sp, #48	; 0x30
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005aa6:	4b40      	ldr	r3, [pc, #256]	; (8005ba8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d077      	beq.n	8005b9e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005aae:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab8:	e008      	b.n	8005acc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	3301      	adds	r3, #1
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3f2      	bcc.n	8005aba <SEGGER_SYSVIEW_SendModule+0x1e>
 8005ad4:	e000      	b.n	8005ad8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005ad6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d055      	beq.n	8005b8a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ade:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae2:	f04f 0120 	mov.w	r1, #32
 8005ae6:	f381 8811 	msr	BASEPRI, r1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	482f      	ldr	r0, [pc, #188]	; (8005bac <SEGGER_SYSVIEW_SendModule+0x110>)
 8005aee:	f7fe fb6f 	bl	80041d0 <_PreparePacket>
 8005af2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	623b      	str	r3, [r7, #32]
 8005b00:	e00b      	b.n	8005b1a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	1c59      	adds	r1, r3, #1
 8005b0a:	6279      	str	r1, [r7, #36]	; 0x24
 8005b0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	09db      	lsrs	r3, r3, #7
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1e:	d8f0      	bhi.n	8005b02 <SEGGER_SYSVIEW_SendModule+0x66>
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	627a      	str	r2, [r7, #36]	; 0x24
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	e00b      	b.n	8005b54 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	61f9      	str	r1, [r7, #28]
 8005b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	09db      	lsrs	r3, r3, #7
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b7f      	cmp	r3, #127	; 0x7f
 8005b58:	d8f0      	bhi.n	8005b3c <SEGGER_SYSVIEW_SendModule+0xa0>
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	61fa      	str	r2, [r7, #28]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	4619      	mov	r1, r3
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7fe fafc 	bl	8004170 <_EncodeStr>
 8005b78:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005b7a:	2216      	movs	r2, #22
 8005b7c:	68f9      	ldr	r1, [r7, #12]
 8005b7e:	6938      	ldr	r0, [r7, #16]
 8005b80:	f7fe fc14 	bl	80043ac <_SendPacket>
      RECORD_END();
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d006      	beq.n	8005b9e <SEGGER_SYSVIEW_SendModule+0x102>
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4798      	blx	r3
    }
  }
}
 8005b9e:	bf00      	nop
 8005ba0:	3730      	adds	r7, #48	; 0x30
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200143c0 	.word	0x200143c0
 8005bac:	200143c8 	.word	0x200143c8

08005bb0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00f      	beq.n	8005bde <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f2      	bne.n	8005bc4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200143c0 	.word	0x200143c0

08005bec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8005bf6:	f04f 0120 	mov.w	r1, #32
 8005bfa:	f381 8811 	msr	BASEPRI, r1
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	4817      	ldr	r0, [pc, #92]	; (8005c60 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005c02:	f7fe fae5 	bl	80041d0 <_PreparePacket>
 8005c06:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e00b      	b.n	8005c30 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	6179      	str	r1, [r7, #20]
 8005c22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	09db      	lsrs	r3, r3, #7
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b7f      	cmp	r3, #127	; 0x7f
 8005c34:	d8f0      	bhi.n	8005c18 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	617a      	str	r2, [r7, #20]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005c46:	221b      	movs	r2, #27
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	68b8      	ldr	r0, [r7, #8]
 8005c4c:	f7fe fbae 	bl	80043ac <_SendPacket>
  RECORD_END();
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f383 8811 	msr	BASEPRI, r3
}
 8005c56:	bf00      	nop
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200143c8 	.word	0x200143c8
 8005c64:	200143c4 	.word	0x200143c4

08005c68 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005c68:	b40f      	push	{r0, r1, r2, r3}
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005c76:	1d3b      	adds	r3, r7, #4
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	6938      	ldr	r0, [r7, #16]
 8005c7e:	f7fe fea7 	bl	80049d0 <_VPrintTarget>
  va_end(ParamList);
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c8c:	b004      	add	sp, #16
 8005c8e:	4770      	bx	lr

08005c90 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c98:	f3ef 8311 	mrs	r3, BASEPRI
 8005c9c:	f04f 0120 	mov.w	r1, #32
 8005ca0:	f381 8811 	msr	BASEPRI, r1
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	4827      	ldr	r0, [pc, #156]	; (8005d44 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005ca8:	f7fe fa92 	bl	80041d0 <_PreparePacket>
 8005cac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	6938      	ldr	r0, [r7, #16]
 8005cb4:	f7fe fa5c 	bl	8004170 <_EncodeStr>
 8005cb8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	623b      	str	r3, [r7, #32]
 8005cc2:	e00b      	b.n	8005cdc <SEGGER_SYSVIEW_Warn+0x4c>
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	1c59      	adds	r1, r3, #1
 8005ccc:	6279      	str	r1, [r7, #36]	; 0x24
 8005cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	09db      	lsrs	r3, r3, #7
 8005cda:	623b      	str	r3, [r7, #32]
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce0:	d8f0      	bhi.n	8005cc4 <SEGGER_SYSVIEW_Warn+0x34>
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ce8:	6a3a      	ldr	r2, [r7, #32]
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	e00b      	b.n	8005d14 <SEGGER_SYSVIEW_Warn+0x84>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	1c59      	adds	r1, r3, #1
 8005d04:	61f9      	str	r1, [r7, #28]
 8005d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	09db      	lsrs	r3, r3, #7
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b7f      	cmp	r3, #127	; 0x7f
 8005d18:	d8f0      	bhi.n	8005cfc <SEGGER_SYSVIEW_Warn+0x6c>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	61fa      	str	r2, [r7, #28]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d2a:	221a      	movs	r2, #26
 8005d2c:	68f9      	ldr	r1, [r7, #12]
 8005d2e:	6938      	ldr	r0, [r7, #16]
 8005d30:	f7fe fb3c 	bl	80043ac <_SendPacket>
  RECORD_END();
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f383 8811 	msr	BASEPRI, r3
}
 8005d3a:	bf00      	nop
 8005d3c:	3728      	adds	r7, #40	; 0x28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	200143c8 	.word	0x200143c8

08005d48 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005d4c:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d4e:	7e1b      	ldrb	r3, [r3, #24]
 8005d50:	4619      	mov	r1, r3
 8005d52:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005d54:	460b      	mov	r3, r1
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	440b      	add	r3, r1
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	336c      	adds	r3, #108	; 0x6c
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d64:	7e1b      	ldrb	r3, [r3, #24]
 8005d66:	4618      	mov	r0, r3
 8005d68:	490d      	ldr	r1, [pc, #52]	; (8005da0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4403      	add	r3, r0
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	440b      	add	r3, r1
 8005d74:	3370      	adds	r3, #112	; 0x70
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d00b      	beq.n	8005d94 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005d7c:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d7e:	789b      	ldrb	r3, [r3, #2]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d107      	bne.n	8005d94 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005d8a:	f7fe fa2d 	bl	80041e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005d8e:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005d94:	4b01      	ldr	r3, [pc, #4]	; (8005d9c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20014398 	.word	0x20014398
 8005da0:	20012ed8 	.word	0x20012ed8

08005da4 <KEYPAD_read>:
        '7','8','9','-',
        'c','0','=','+'};


uint8_t KEYPAD_read(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
	uint8_t i,VAL=1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	71bb      	strb	r3, [r7, #6]

	KP0(1);KP1(1);KP2(1);KP3(1);
 8005dae:	2201      	movs	r2, #1
 8005db0:	2101      	movs	r1, #1
 8005db2:	485b      	ldr	r0, [pc, #364]	; (8005f20 <KEYPAD_read+0x17c>)
 8005db4:	f001 f9d6 	bl	8007164 <HAL_GPIO_WritePin>
 8005db8:	2201      	movs	r2, #1
 8005dba:	2110      	movs	r1, #16
 8005dbc:	4859      	ldr	r0, [pc, #356]	; (8005f24 <KEYPAD_read+0x180>)
 8005dbe:	f001 f9d1 	bl	8007164 <HAL_GPIO_WritePin>
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	4857      	ldr	r0, [pc, #348]	; (8005f24 <KEYPAD_read+0x180>)
 8005dc8:	f001 f9cc 	bl	8007164 <HAL_GPIO_WritePin>
 8005dcc:	2201      	movs	r2, #1
 8005dce:	2101      	movs	r1, #1
 8005dd0:	4854      	ldr	r0, [pc, #336]	; (8005f24 <KEYPAD_read+0x180>)
 8005dd2:	f001 f9c7 	bl	8007164 <HAL_GPIO_WritePin>
	for(i = 0; i < 4;i++)
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	71fb      	strb	r3, [r7, #7]
 8005dda:	e098      	b.n	8005f0e <KEYPAD_read+0x16a>
	{
		switch(i){
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d85e      	bhi.n	8005ea0 <KEYPAD_read+0xfc>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <KEYPAD_read+0x44>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005e23 	.word	0x08005e23
 8005df0:	08005e4d 	.word	0x08005e4d
 8005df4:	08005e77 	.word	0x08005e77
		case 0: KP0(0);KP1(1);KP2(1);KP3(1); break;
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4848      	ldr	r0, [pc, #288]	; (8005f20 <KEYPAD_read+0x17c>)
 8005dfe:	f001 f9b1 	bl	8007164 <HAL_GPIO_WritePin>
 8005e02:	2201      	movs	r2, #1
 8005e04:	2110      	movs	r1, #16
 8005e06:	4847      	ldr	r0, [pc, #284]	; (8005f24 <KEYPAD_read+0x180>)
 8005e08:	f001 f9ac 	bl	8007164 <HAL_GPIO_WritePin>
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	2102      	movs	r1, #2
 8005e10:	4844      	ldr	r0, [pc, #272]	; (8005f24 <KEYPAD_read+0x180>)
 8005e12:	f001 f9a7 	bl	8007164 <HAL_GPIO_WritePin>
 8005e16:	2201      	movs	r2, #1
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4842      	ldr	r0, [pc, #264]	; (8005f24 <KEYPAD_read+0x180>)
 8005e1c:	f001 f9a2 	bl	8007164 <HAL_GPIO_WritePin>
 8005e20:	e03e      	b.n	8005ea0 <KEYPAD_read+0xfc>
		case 1: KP0(1);KP1(0);KP2(1);KP3(1); break;
 8005e22:	2201      	movs	r2, #1
 8005e24:	2101      	movs	r1, #1
 8005e26:	483e      	ldr	r0, [pc, #248]	; (8005f20 <KEYPAD_read+0x17c>)
 8005e28:	f001 f99c 	bl	8007164 <HAL_GPIO_WritePin>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2110      	movs	r1, #16
 8005e30:	483c      	ldr	r0, [pc, #240]	; (8005f24 <KEYPAD_read+0x180>)
 8005e32:	f001 f997 	bl	8007164 <HAL_GPIO_WritePin>
 8005e36:	2201      	movs	r2, #1
 8005e38:	2102      	movs	r1, #2
 8005e3a:	483a      	ldr	r0, [pc, #232]	; (8005f24 <KEYPAD_read+0x180>)
 8005e3c:	f001 f992 	bl	8007164 <HAL_GPIO_WritePin>
 8005e40:	2201      	movs	r2, #1
 8005e42:	2101      	movs	r1, #1
 8005e44:	4837      	ldr	r0, [pc, #220]	; (8005f24 <KEYPAD_read+0x180>)
 8005e46:	f001 f98d 	bl	8007164 <HAL_GPIO_WritePin>
 8005e4a:	e029      	b.n	8005ea0 <KEYPAD_read+0xfc>
		case 2: KP0(1);KP1(1);KP2(0);KP3(1); break;
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4833      	ldr	r0, [pc, #204]	; (8005f20 <KEYPAD_read+0x17c>)
 8005e52:	f001 f987 	bl	8007164 <HAL_GPIO_WritePin>
 8005e56:	2201      	movs	r2, #1
 8005e58:	2110      	movs	r1, #16
 8005e5a:	4832      	ldr	r0, [pc, #200]	; (8005f24 <KEYPAD_read+0x180>)
 8005e5c:	f001 f982 	bl	8007164 <HAL_GPIO_WritePin>
 8005e60:	2200      	movs	r2, #0
 8005e62:	2102      	movs	r1, #2
 8005e64:	482f      	ldr	r0, [pc, #188]	; (8005f24 <KEYPAD_read+0x180>)
 8005e66:	f001 f97d 	bl	8007164 <HAL_GPIO_WritePin>
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	482d      	ldr	r0, [pc, #180]	; (8005f24 <KEYPAD_read+0x180>)
 8005e70:	f001 f978 	bl	8007164 <HAL_GPIO_WritePin>
 8005e74:	e014      	b.n	8005ea0 <KEYPAD_read+0xfc>
		case 3: KP0(1);KP1(1);KP2(1);KP3(0); break;
 8005e76:	2201      	movs	r2, #1
 8005e78:	2101      	movs	r1, #1
 8005e7a:	4829      	ldr	r0, [pc, #164]	; (8005f20 <KEYPAD_read+0x17c>)
 8005e7c:	f001 f972 	bl	8007164 <HAL_GPIO_WritePin>
 8005e80:	2201      	movs	r2, #1
 8005e82:	2110      	movs	r1, #16
 8005e84:	4827      	ldr	r0, [pc, #156]	; (8005f24 <KEYPAD_read+0x180>)
 8005e86:	f001 f96d 	bl	8007164 <HAL_GPIO_WritePin>
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	4825      	ldr	r0, [pc, #148]	; (8005f24 <KEYPAD_read+0x180>)
 8005e90:	f001 f968 	bl	8007164 <HAL_GPIO_WritePin>
 8005e94:	2200      	movs	r2, #0
 8005e96:	2101      	movs	r1, #1
 8005e98:	4822      	ldr	r0, [pc, #136]	; (8005f24 <KEYPAD_read+0x180>)
 8005e9a:	f001 f963 	bl	8007164 <HAL_GPIO_WritePin>
 8005e9e:	bf00      	nop
		}
		if (!KP4()) return keypad_matrix[0 + i*4];
 8005ea0:	2110      	movs	r1, #16
 8005ea2:	481f      	ldr	r0, [pc, #124]	; (8005f20 <KEYPAD_read+0x17c>)
 8005ea4:	f001 f946 	bl	8007134 <HAL_GPIO_ReadPin>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <KEYPAD_read+0x114>
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4a1d      	ldr	r2, [pc, #116]	; (8005f28 <KEYPAD_read+0x184>)
 8005eb4:	5cd3      	ldrb	r3, [r2, r3]
 8005eb6:	e02f      	b.n	8005f18 <KEYPAD_read+0x174>
		if (!KP5()) return keypad_matrix[1 + i*4];
 8005eb8:	2120      	movs	r1, #32
 8005eba:	4819      	ldr	r0, [pc, #100]	; (8005f20 <KEYPAD_read+0x17c>)
 8005ebc:	f001 f93a 	bl	8007134 <HAL_GPIO_ReadPin>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d105      	bne.n	8005ed2 <KEYPAD_read+0x12e>
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	3301      	adds	r3, #1
 8005ecc:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <KEYPAD_read+0x184>)
 8005ece:	5cd3      	ldrb	r3, [r2, r3]
 8005ed0:	e022      	b.n	8005f18 <KEYPAD_read+0x174>
		if (!KP6()) return keypad_matrix[2 + i*4];
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	4812      	ldr	r0, [pc, #72]	; (8005f20 <KEYPAD_read+0x17c>)
 8005ed6:	f001 f92d 	bl	8007134 <HAL_GPIO_ReadPin>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <KEYPAD_read+0x148>
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	4a10      	ldr	r2, [pc, #64]	; (8005f28 <KEYPAD_read+0x184>)
 8005ee8:	5cd3      	ldrb	r3, [r2, r3]
 8005eea:	e015      	b.n	8005f18 <KEYPAD_read+0x174>
		if (!KP7()) return keypad_matrix[3 + i*4];
 8005eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ef0:	480c      	ldr	r0, [pc, #48]	; (8005f24 <KEYPAD_read+0x180>)
 8005ef2:	f001 f91f 	bl	8007134 <HAL_GPIO_ReadPin>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <KEYPAD_read+0x164>
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	3303      	adds	r3, #3
 8005f02:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <KEYPAD_read+0x184>)
 8005f04:	5cd3      	ldrb	r3, [r2, r3]
 8005f06:	e007      	b.n	8005f18 <KEYPAD_read+0x174>
	for(i = 0; i < 4;i++)
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	71fb      	strb	r3, [r7, #7]
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	f67f af63 	bls.w	8005ddc <KEYPAD_read+0x38>


	}
	return 0;
 8005f16:	2300      	movs	r3, #0

}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40020400 	.word	0x40020400
 8005f24:	40020000 	.word	0x40020000
 8005f28:	08008edc 	.word	0x08008edc

08005f2c <delay>:
#define timer htim6


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <delay+0x30>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8005f3e:	bf00      	nop
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <delay+0x30>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d3f9      	bcc.n	8005f40 <delay+0x14>
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	200144c4 	.word	0x200144c4

08005f60 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	6039      	str	r1, [r7, #0]
 8005f6a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f76:	4822      	ldr	r0, [pc, #136]	; (8006000 <send_to_lcd+0xa0>)
 8005f78:	f001 f8f4 	bl	8007164 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	08db      	lsrs	r3, r3, #3
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f8e:	481d      	ldr	r0, [pc, #116]	; (8006004 <send_to_lcd+0xa4>)
 8005f90:	f001 f8e8 	bl	8007164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	089b      	lsrs	r3, r3, #2
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	2120      	movs	r1, #32
 8005fa4:	4818      	ldr	r0, [pc, #96]	; (8006008 <send_to_lcd+0xa8>)
 8005fa6:	f001 f8dd 	bl	8007164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	4813      	ldr	r0, [pc, #76]	; (8006008 <send_to_lcd+0xa8>)
 8005fbc:	f001 f8d2 	bl	8007164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fce:	480e      	ldr	r0, [pc, #56]	; (8006008 <send_to_lcd+0xa8>)
 8005fd0:	f001 f8c8 	bl	8007164 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fda:	4809      	ldr	r0, [pc, #36]	; (8006000 <send_to_lcd+0xa0>)
 8005fdc:	f001 f8c2 	bl	8007164 <HAL_GPIO_WritePin>
	delay (20);
 8005fe0:	2014      	movs	r0, #20
 8005fe2:	f7ff ffa3 	bl	8005f2c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fec:	4804      	ldr	r0, [pc, #16]	; (8006000 <send_to_lcd+0xa0>)
 8005fee:	f001 f8b9 	bl	8007164 <HAL_GPIO_WritePin>
	delay (20);
 8005ff2:	2014      	movs	r0, #20
 8005ff4:	f7ff ff9a 	bl	8005f2c <delay>
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40020000 	.word	0x40020000
 8006004:	40020400 	.word	0x40020400
 8006008:	40020800 	.word	0x40020800

0800600c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff ff9d 	bl	8005f60 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff ff94 	bl	8005f60 <send_to_lcd>
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <lcd_send_data>:

void lcd_send_data (char data)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2101      	movs	r1, #1
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff83 	bl	8005f60 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	2101      	movs	r1, #1
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ff7a 	bl	8005f60 <send_to_lcd>
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <lcd_clear>:

void lcd_clear (void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8006078:	2001      	movs	r0, #1
 800607a:	f7ff ffc7 	bl	800600c <lcd_send_cmd>
	HAL_Delay(2);
 800607e:	2002      	movs	r0, #2
 8006080:	f000 fdbe 	bl	8006c00 <HAL_Delay>
}
 8006084:	bf00      	nop
 8006086:	bd80      	pop	{r7, pc}

08006088 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
    switch (row)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <lcd_put_cur+0x18>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d005      	beq.n	80060aa <lcd_put_cur+0x22>
 800609e:	e009      	b.n	80060b4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a6:	603b      	str	r3, [r7, #0]
            break;
 80060a8:	e004      	b.n	80060b4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b0:	603b      	str	r3, [r7, #0]
            break;
 80060b2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ffa7 	bl	800600c <lcd_send_cmd>
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <lcd_init>:


void lcd_init (void)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80060ca:	2032      	movs	r0, #50	; 0x32
 80060cc:	f000 fd98 	bl	8006c00 <HAL_Delay>
	lcd_send_cmd (0x30);
 80060d0:	2030      	movs	r0, #48	; 0x30
 80060d2:	f7ff ff9b 	bl	800600c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80060d6:	2005      	movs	r0, #5
 80060d8:	f000 fd92 	bl	8006c00 <HAL_Delay>
	lcd_send_cmd (0x30);
 80060dc:	2030      	movs	r0, #48	; 0x30
 80060de:	f7ff ff95 	bl	800600c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80060e2:	2001      	movs	r0, #1
 80060e4:	f000 fd8c 	bl	8006c00 <HAL_Delay>
	lcd_send_cmd (0x30);
 80060e8:	2030      	movs	r0, #48	; 0x30
 80060ea:	f7ff ff8f 	bl	800600c <lcd_send_cmd>
	HAL_Delay(10);
 80060ee:	200a      	movs	r0, #10
 80060f0:	f000 fd86 	bl	8006c00 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80060f4:	2020      	movs	r0, #32
 80060f6:	f7ff ff89 	bl	800600c <lcd_send_cmd>
	HAL_Delay(10);
 80060fa:	200a      	movs	r0, #10
 80060fc:	f000 fd80 	bl	8006c00 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8006100:	2028      	movs	r0, #40	; 0x28
 8006102:	f7ff ff83 	bl	800600c <lcd_send_cmd>
	HAL_Delay(1);
 8006106:	2001      	movs	r0, #1
 8006108:	f000 fd7a 	bl	8006c00 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800610c:	2008      	movs	r0, #8
 800610e:	f7ff ff7d 	bl	800600c <lcd_send_cmd>
	HAL_Delay(1);
 8006112:	2001      	movs	r0, #1
 8006114:	f000 fd74 	bl	8006c00 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8006118:	2001      	movs	r0, #1
 800611a:	f7ff ff77 	bl	800600c <lcd_send_cmd>
	HAL_Delay(1);
 800611e:	2001      	movs	r0, #1
 8006120:	f000 fd6e 	bl	8006c00 <HAL_Delay>
	HAL_Delay(1);
 8006124:	2001      	movs	r0, #1
 8006126:	f000 fd6b 	bl	8006c00 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800612a:	2006      	movs	r0, #6
 800612c:	f7ff ff6e 	bl	800600c <lcd_send_cmd>
	HAL_Delay(1);
 8006130:	2001      	movs	r0, #1
 8006132:	f000 fd65 	bl	8006c00 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8006136:	200c      	movs	r0, #12
 8006138:	f7ff ff68 	bl	800600c <lcd_send_cmd>
}
 800613c:	bf00      	nop
 800613e:	bd80      	pop	{r7, pc}

08006140 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8006148:	e006      	b.n	8006158 <lcd_send_string+0x18>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff ff74 	bl	8006040 <lcd_send_data>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f4      	bne.n	800614a <lcd_send_string+0xa>
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006172:	f000 fd03 	bl	8006b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006176:	f000 f8a5 	bl	80062c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800617a:	f000 f90f 	bl	800639c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* Enable Cycle counter feature of the processor */
  DWT_CTRL |= 1;
 800617e:	4b43      	ldr	r3, [pc, #268]	; (800628c <main+0x120>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a42      	ldr	r2, [pc, #264]	; (800628c <main+0x120>)
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800618a:	4841      	ldr	r0, [pc, #260]	; (8006290 <main+0x124>)
 800618c:	f7fd fb96 	bl	80038bc <SEGGER_UART_init>

  /* Configure Sysview target source files and start recording */
  SEGGER_SYSVIEW_Conf();
 8006190:	f7fd f9be 	bl	8003510 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start();

  lcd_init();
 8006194:	f7ff ff97 	bl	80060c6 <lcd_init>
  lcd_clear();
 8006198:	f7ff ff6c 	bl	8006074 <lcd_clear>
  lcd_send_string("Advanced Calculator");
 800619c:	483d      	ldr	r0, [pc, #244]	; (8006294 <main+0x128>)
 800619e:	f7ff ffcf 	bl	8006140 <lcd_send_string>
  HAL_Delay(1000);
 80061a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061a6:	f000 fd2b 	bl	8006c00 <HAL_Delay>
  lcd_clear();
 80061aa:	f7ff ff63 	bl	8006074 <lcd_clear>


  xQueueInputNumbers = xQueueCreate(10, sizeof(int32_t));
 80061ae:	2200      	movs	r2, #0
 80061b0:	2104      	movs	r1, #4
 80061b2:	200a      	movs	r0, #10
 80061b4:	f7fa fb8e 	bl	80008d4 <xQueueGenericCreate>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4a37      	ldr	r2, [pc, #220]	; (8006298 <main+0x12c>)
 80061bc:	6013      	str	r3, [r2, #0]
  xQueueInputOperations = xQueueCreate(10, sizeof(uint8_t));
 80061be:	2200      	movs	r2, #0
 80061c0:	2101      	movs	r1, #1
 80061c2:	200a      	movs	r0, #10
 80061c4:	f7fa fb86 	bl	80008d4 <xQueueGenericCreate>
 80061c8:	4603      	mov	r3, r0
 80061ca:	4a34      	ldr	r2, [pc, #208]	; (800629c <main+0x130>)
 80061cc:	6013      	str	r3, [r2, #0]

  Local_Status = xTaskCreate(KPTaskHandler, "KEYPAD", 300, NULL, 3, &KPTaskHandle);
 80061ce:	4b34      	ldr	r3, [pc, #208]	; (80062a0 <main+0x134>)
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	2303      	movs	r3, #3
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	2300      	movs	r3, #0
 80061d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061dc:	4931      	ldr	r1, [pc, #196]	; (80062a4 <main+0x138>)
 80061de:	4832      	ldr	r0, [pc, #200]	; (80062a8 <main+0x13c>)
 80061e0:	f7fa ffde 	bl	80011a0 <xTaskCreate>
 80061e4:	6178      	str	r0, [r7, #20]

  configASSERT(Local_Status  == pdPASS);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d00a      	beq.n	8006202 <main+0x96>
        __asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	613b      	str	r3, [r7, #16]
    }
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <main+0x94>

  Local_Status = xTaskCreate(LCDTaskHandler, "LCD", 400, NULL, 1, &LCDTaskHandle);
 8006202:	4b2a      	ldr	r3, [pc, #168]	; (80062ac <main+0x140>)
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	2301      	movs	r3, #1
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006210:	4927      	ldr	r1, [pc, #156]	; (80062b0 <main+0x144>)
 8006212:	4828      	ldr	r0, [pc, #160]	; (80062b4 <main+0x148>)
 8006214:	f7fa ffc4 	bl	80011a0 <xTaskCreate>
 8006218:	6178      	str	r0, [r7, #20]

  configASSERT(Local_Status  == pdPASS);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d00a      	beq.n	8006236 <main+0xca>
        __asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
    }
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <main+0xc8>

  Local_Status = xTaskCreate(CalculationTaskHandler, "Calculation", 300, NULL, 2, &CalculationTaskHandle);
 8006236:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <main+0x14c>)
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	2302      	movs	r3, #2
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	2300      	movs	r3, #0
 8006240:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006244:	491d      	ldr	r1, [pc, #116]	; (80062bc <main+0x150>)
 8006246:	481e      	ldr	r0, [pc, #120]	; (80062c0 <main+0x154>)
 8006248:	f7fa ffaa 	bl	80011a0 <xTaskCreate>
 800624c:	6178      	str	r0, [r7, #20]

  configASSERT(Local_Status  == pdPASS);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d00a      	beq.n	800626a <main+0xfe>
        __asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	60bb      	str	r3, [r7, #8]
    }
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <main+0xfc>

//  Local_Status = xTaskCreate(UserButtonTaskHandler, "User-Button", 200, NULL, 3, &TasksHandle[3]);

  configASSERT(Local_Status  == pdPASS);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d00a      	beq.n	8006286 <main+0x11a>
        __asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	607b      	str	r3, [r7, #4]
    }
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <main+0x118>

  vTaskStartScheduler();
 8006286:	f7fb f995 	bl	80015b4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800628a:	e7fe      	b.n	800628a <main+0x11e>
 800628c:	e0001000 	.word	0xe0001000
 8006290:	0007a120 	.word	0x0007a120
 8006294:	08008e48 	.word	0x08008e48
 8006298:	200144b8 	.word	0x200144b8
 800629c:	200144bc 	.word	0x200144bc
 80062a0:	200144ac 	.word	0x200144ac
 80062a4:	08008e5c 	.word	0x08008e5c
 80062a8:	0800650d 	.word	0x0800650d
 80062ac:	200144b0 	.word	0x200144b0
 80062b0:	08008e64 	.word	0x08008e64
 80062b4:	08006641 	.word	0x08006641
 80062b8:	200144b4 	.word	0x200144b4
 80062bc:	08008e68 	.word	0x08008e68
 80062c0:	0800678d 	.word	0x0800678d

080062c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b094      	sub	sp, #80	; 0x50
 80062c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ca:	f107 031c 	add.w	r3, r7, #28
 80062ce:	2234      	movs	r2, #52	; 0x34
 80062d0:	2100      	movs	r1, #0
 80062d2:	4618      	mov	r0, r3
 80062d4:	f002 f8b4 	bl	8008440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062d8:	f107 0308 	add.w	r3, r7, #8
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80062e8:	2300      	movs	r3, #0
 80062ea:	607b      	str	r3, [r7, #4]
 80062ec:	4b29      	ldr	r3, [pc, #164]	; (8006394 <SystemClock_Config+0xd0>)
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	4a28      	ldr	r2, [pc, #160]	; (8006394 <SystemClock_Config+0xd0>)
 80062f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f6:	6413      	str	r3, [r2, #64]	; 0x40
 80062f8:	4b26      	ldr	r3, [pc, #152]	; (8006394 <SystemClock_Config+0xd0>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006304:	2300      	movs	r3, #0
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	4b23      	ldr	r3, [pc, #140]	; (8006398 <SystemClock_Config+0xd4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a22      	ldr	r2, [pc, #136]	; (8006398 <SystemClock_Config+0xd4>)
 800630e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	4b20      	ldr	r3, [pc, #128]	; (8006398 <SystemClock_Config+0xd4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006320:	2302      	movs	r3, #2
 8006322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006324:	2301      	movs	r3, #1
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006328:	2310      	movs	r3, #16
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800632c:	2302      	movs	r3, #2
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006330:	2300      	movs	r3, #0
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006334:	2308      	movs	r3, #8
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006338:	23a8      	movs	r3, #168	; 0xa8
 800633a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800633c:	2302      	movs	r3, #2
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006340:	2302      	movs	r3, #2
 8006342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006344:	2302      	movs	r3, #2
 8006346:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006348:	f107 031c 	add.w	r3, r7, #28
 800634c:	4618      	mov	r0, r3
 800634e:	f001 fa8b 	bl	8007868 <HAL_RCC_OscConfig>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8006358:	f000 fb0a 	bl	8006970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800635c:	230f      	movs	r3, #15
 800635e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006360:	2302      	movs	r3, #2
 8006362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006368:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800636c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800636e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006372:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006374:	f107 0308 	add.w	r3, r7, #8
 8006378:	2105      	movs	r1, #5
 800637a:	4618      	mov	r0, r3
 800637c:	f000 ff0c 	bl	8007198 <HAL_RCC_ClockConfig>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006386:	f000 faf3 	bl	8006970 <Error_Handler>
  }
}
 800638a:	bf00      	nop
 800638c:	3750      	adds	r7, #80	; 0x50
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40023800 	.word	0x40023800
 8006398:	40007000 	.word	0x40007000

0800639c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063a2:	f107 0314 	add.w	r3, r7, #20
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	605a      	str	r2, [r3, #4]
 80063ac:	609a      	str	r2, [r3, #8]
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	4b51      	ldr	r3, [pc, #324]	; (80064fc <MX_GPIO_Init+0x160>)
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	4a50      	ldr	r2, [pc, #320]	; (80064fc <MX_GPIO_Init+0x160>)
 80063bc:	f043 0304 	orr.w	r3, r3, #4
 80063c0:	6313      	str	r3, [r2, #48]	; 0x30
 80063c2:	4b4e      	ldr	r3, [pc, #312]	; (80064fc <MX_GPIO_Init+0x160>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	4b4a      	ldr	r3, [pc, #296]	; (80064fc <MX_GPIO_Init+0x160>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	4a49      	ldr	r2, [pc, #292]	; (80064fc <MX_GPIO_Init+0x160>)
 80063d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063dc:	6313      	str	r3, [r2, #48]	; 0x30
 80063de:	4b47      	ldr	r3, [pc, #284]	; (80064fc <MX_GPIO_Init+0x160>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	4b43      	ldr	r3, [pc, #268]	; (80064fc <MX_GPIO_Init+0x160>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	4a42      	ldr	r2, [pc, #264]	; (80064fc <MX_GPIO_Init+0x160>)
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	6313      	str	r3, [r2, #48]	; 0x30
 80063fa:	4b40      	ldr	r3, [pc, #256]	; (80064fc <MX_GPIO_Init+0x160>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006406:	2300      	movs	r3, #0
 8006408:	607b      	str	r3, [r7, #4]
 800640a:	4b3c      	ldr	r3, [pc, #240]	; (80064fc <MX_GPIO_Init+0x160>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	4a3b      	ldr	r2, [pc, #236]	; (80064fc <MX_GPIO_Init+0x160>)
 8006410:	f043 0302 	orr.w	r3, r3, #2
 8006414:	6313      	str	r3, [r2, #48]	; 0x30
 8006416:	4b39      	ldr	r3, [pc, #228]	; (80064fc <MX_GPIO_Init+0x160>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LCD_EN_Pin
 8006422:	2200      	movs	r2, #0
 8006424:	f640 1113 	movw	r1, #2323	; 0x913
 8006428:	4835      	ldr	r0, [pc, #212]	; (8006500 <MX_GPIO_Init+0x164>)
 800642a:	f000 fe9b 	bl	8007164 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 800642e:	2200      	movs	r2, #0
 8006430:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006434:	4833      	ldr	r0, [pc, #204]	; (8006504 <MX_GPIO_Init+0x168>)
 8006436:	f000 fe95 	bl	8007164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LCD_D7_Pin, GPIO_PIN_RESET);
 800643a:	2200      	movs	r2, #0
 800643c:	f241 0101 	movw	r1, #4097	; 0x1001
 8006440:	4831      	ldr	r0, [pc, #196]	; (8006508 <MX_GPIO_Init+0x16c>)
 8006442:	f000 fe8f 	bl	8007164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 LCD_EN_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LCD_EN_Pin
 8006446:	f640 1313 	movw	r3, #2323	; 0x913
 800644a:	617b      	str	r3, [r7, #20]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800644c:	2301      	movs	r3, #1
 800644e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006454:	2300      	movs	r3, #0
 8006456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006458:	f107 0314 	add.w	r3, r7, #20
 800645c:	4619      	mov	r1, r3
 800645e:	4828      	ldr	r0, [pc, #160]	; (8006500 <MX_GPIO_Init+0x164>)
 8006460:	f000 fcd4 	bl	8006e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006464:	230c      	movs	r3, #12
 8006466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006468:	2302      	movs	r3, #2
 800646a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646c:	2300      	movs	r3, #0
 800646e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006470:	2303      	movs	r3, #3
 8006472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006474:	2307      	movs	r3, #7
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	4619      	mov	r1, r3
 800647e:	4820      	ldr	r0, [pc, #128]	; (8006500 <MX_GPIO_Init+0x164>)
 8006480:	f000 fcc4 	bl	8006e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8006484:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8006488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800648a:	2301      	movs	r3, #1
 800648c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800648e:	2300      	movs	r3, #0
 8006490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006492:	2300      	movs	r3, #0
 8006494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006496:	f107 0314 	add.w	r3, r7, #20
 800649a:	4619      	mov	r1, r3
 800649c:	4819      	ldr	r0, [pc, #100]	; (8006504 <MX_GPIO_Init+0x168>)
 800649e:	f000 fcb5 	bl	8006e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LCD_D7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_D7_Pin;
 80064a2:	f241 0301 	movw	r3, #4097	; 0x1001
 80064a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064a8:	2301      	movs	r3, #1
 80064aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064b0:	2300      	movs	r3, #0
 80064b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064b4:	f107 0314 	add.w	r3, r7, #20
 80064b8:	4619      	mov	r1, r3
 80064ba:	4813      	ldr	r0, [pc, #76]	; (8006508 <MX_GPIO_Init+0x16c>)
 80064bc:	f000 fca6 	bl	8006e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80064c0:	2302      	movs	r3, #2
 80064c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064cc:	f107 0314 	add.w	r3, r7, #20
 80064d0:	4619      	mov	r1, r3
 80064d2:	480d      	ldr	r0, [pc, #52]	; (8006508 <MX_GPIO_Init+0x16c>)
 80064d4:	f000 fc9a 	bl	8006e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80064d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064de:	2300      	movs	r3, #0
 80064e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	4619      	mov	r1, r3
 80064ec:	4804      	ldr	r0, [pc, #16]	; (8006500 <MX_GPIO_Init+0x164>)
 80064ee:	f000 fc8d 	bl	8006e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80064f2:	bf00      	nop
 80064f4:	3728      	adds	r7, #40	; 0x28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40023800 	.word	0x40023800
 8006500:	40020000 	.word	0x40020000
 8006504:	40020800 	.word	0x40020800
 8006508:	40020400 	.word	0x40020400

0800650c <KPTaskHandler>:

/* USER CODE BEGIN 4 */
void KPTaskHandler(void * Parameters)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b092      	sub	sp, #72	; 0x48
 8006510:	af02      	add	r7, sp, #8
 8006512:	6078      	str	r0, [r7, #4]
	char L_pu8String[50];
	uint8_t  L_u8KeyPadReadValue = 0 , L_u8KeyPadLastValue = 0  ;
 8006514:	2300      	movs	r3, #0
 8006516:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800651a:	2300      	movs	r3, #0
 800651c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	static uint8_t L_u8CountPress = 0;
	TickType_t xLastWakeTime= xTaskGetTickCount();
 8006520:	f7fb f9bc 	bl	800189c <xTaskGetTickCount>
 8006524:	4603      	mov	r3, r0
 8006526:	60bb      	str	r3, [r7, #8]

	while(1)
	{

		L_u8KeyPadReadValue = KEYPAD_read();
 8006528:	f7ff fc3c 	bl	8005da4 <KEYPAD_read>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		if(L_u8KeyPadReadValue )
 8006532:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006536:	2b00      	cmp	r3, #0
 8006538:	d06a      	beq.n	8006610 <KPTaskHandler+0x104>
		{
			snprintf(L_pu8String, 50, "KP Value is %c\n", L_u8KeyPadReadValue);
 800653a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800653e:	f107 000c 	add.w	r0, r7, #12
 8006542:	4a3a      	ldr	r2, [pc, #232]	; (800662c <KPTaskHandler+0x120>)
 8006544:	2132      	movs	r1, #50	; 0x32
 8006546:	f001 ff37 	bl	80083b8 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(L_pu8String);
 800654a:	f107 030c 	add.w	r3, r7, #12
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fb8a 	bl	8005c68 <SEGGER_SYSVIEW_PrintfTarget>
			if(L_u8KeyPadReadValue == 'c' && (L_u8KeyPadLastValue != L_u8KeyPadReadValue) )
 8006554:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006558:	2b63      	cmp	r3, #99	; 0x63
 800655a:	d118      	bne.n	800658e <KPTaskHandler+0x82>
 800655c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006560:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006564:	429a      	cmp	r2, r3
 8006566:	d012      	beq.n	800658e <KPTaskHandler+0x82>
			{
				/* clear everything */
				xQueueReset(xQueueInputOperations);
 8006568:	4b31      	ldr	r3, [pc, #196]	; (8006630 <KPTaskHandler+0x124>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f7fa f920 	bl	80007b4 <xQueueGenericReset>
				xQueueReset(xQueueInputNumbers);
 8006574:	4b2f      	ldr	r3, [pc, #188]	; (8006634 <KPTaskHandler+0x128>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f7fa f91a 	bl	80007b4 <xQueueGenericReset>
				lcd_clear();
 8006580:	f7ff fd78 	bl	8006074 <lcd_clear>
				lcd_put_cur(0, 0);
 8006584:	2100      	movs	r1, #0
 8006586:	2000      	movs	r0, #0
 8006588:	f7ff fd7e 	bl	8006088 <lcd_put_cur>
 800658c:	e047      	b.n	800661e <KPTaskHandler+0x112>

			}/* For Long press Button */
			else if( (L_u8KeyPadLastValue == L_u8KeyPadReadValue) && L_u8KeyPadReadValue >= '0' && L_u8KeyPadReadValue <= '9')
 800658e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006592:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006596:	429a      	cmp	r2, r3
 8006598:	d122      	bne.n	80065e0 <KPTaskHandler+0xd4>
 800659a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800659e:	2b2f      	cmp	r3, #47	; 0x2f
 80065a0:	d91e      	bls.n	80065e0 <KPTaskHandler+0xd4>
 80065a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80065a6:	2b39      	cmp	r3, #57	; 0x39
 80065a8:	d81a      	bhi.n	80065e0 <KPTaskHandler+0xd4>
			{
				L_u8CountPress ++;
 80065aa:	4b23      	ldr	r3, [pc, #140]	; (8006638 <KPTaskHandler+0x12c>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	4b21      	ldr	r3, [pc, #132]	; (8006638 <KPTaskHandler+0x12c>)
 80065b4:	701a      	strb	r2, [r3, #0]
				if(L_u8CountPress >= 20)
 80065b6:	4b20      	ldr	r3, [pc, #128]	; (8006638 <KPTaskHandler+0x12c>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b13      	cmp	r3, #19
 80065bc:	d92f      	bls.n	800661e <KPTaskHandler+0x112>
				{
					L_u8CountPress -=4;
 80065be:	4b1e      	ldr	r3, [pc, #120]	; (8006638 <KPTaskHandler+0x12c>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	3b04      	subs	r3, #4
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <KPTaskHandler+0x12c>)
 80065c8:	701a      	strb	r2, [r3, #0]

					/* read this num Notify */
					xTaskNotify(LCDTaskHandle,L_u8KeyPadReadValue,eSetValueWithOverwrite);
 80065ca:	4b1c      	ldr	r3, [pc, #112]	; (800663c <KPTaskHandler+0x130>)
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80065d2:	2300      	movs	r3, #0
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	2303      	movs	r3, #3
 80065d8:	2100      	movs	r1, #0
 80065da:	f7fb fead 	bl	8002338 <xTaskGenericNotify>
				if(L_u8CountPress >= 20)
 80065de:	e01e      	b.n	800661e <KPTaskHandler+0x112>
				}

			}
			else if(L_u8KeyPadLastValue != L_u8KeyPadReadValue)
 80065e0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80065e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d018      	beq.n	800661e <KPTaskHandler+0x112>
			{
				L_u8KeyPadLastValue  = L_u8KeyPadReadValue;
 80065ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80065f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				L_u8CountPress = 0;
 80065f4:	4b10      	ldr	r3, [pc, #64]	; (8006638 <KPTaskHandler+0x12c>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
				xTaskNotify(LCDTaskHandle,(uint32_t)L_u8KeyPadReadValue,eSetValueWithOverwrite);
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <KPTaskHandler+0x130>)
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8006602:	2300      	movs	r3, #0
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	2303      	movs	r3, #3
 8006608:	2100      	movs	r1, #0
 800660a:	f7fb fe95 	bl	8002338 <xTaskGenericNotify>
 800660e:	e006      	b.n	800661e <KPTaskHandler+0x112>
			}
		}
		else
		{
			L_u8CountPress = 0;
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <KPTaskHandler+0x12c>)
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
			L_u8KeyPadLastValue  = L_u8KeyPadReadValue;
 8006616:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800661a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}

		vTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(20) );
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	2114      	movs	r1, #20
 8006624:	4618      	mov	r0, r3
 8006626:	f7fa ff43 	bl	80014b0 <xTaskDelayUntil>
		L_u8KeyPadReadValue = KEYPAD_read();
 800662a:	e77d      	b.n	8006528 <KPTaskHandler+0x1c>
 800662c:	08008e74 	.word	0x08008e74
 8006630:	200144bc 	.word	0x200144bc
 8006634:	200144b8 	.word	0x200144b8
 8006638:	200144c0 	.word	0x200144c0
 800663c:	200144b0 	.word	0x200144b0

08006640 <LCDTaskHandler>:

	}
}

void LCDTaskHandler(void * Parameters)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b092      	sub	sp, #72	; 0x48
 8006644:	af02      	add	r7, sp, #8
 8006646:	6078      	str	r0, [r7, #4]
	uint8_t ulNotifiedValue ;
	static uint8_t L_u8OpFlag=0 , L_u8Negative=0;
	char L_pu8String[50];

	int32_t L_i32NUM = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		xTaskNotifyWait(0,0,(uint32_t*)&ulNotifiedValue,portMAX_DELAY);
 800664c:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	9200      	str	r2, [sp, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	2100      	movs	r1, #0
 800665a:	2000      	movs	r0, #0
 800665c:	f7fb fde4 	bl	8002228 <xTaskGenericNotifyWait>

		snprintf(L_pu8String, 50, "LCD Print %c\n", ulNotifiedValue);
 8006660:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006664:	f107 000c 	add.w	r0, r7, #12
 8006668:	4a42      	ldr	r2, [pc, #264]	; (8006774 <LCDTaskHandler+0x134>)
 800666a:	2132      	movs	r1, #50	; 0x32
 800666c:	f001 fea4 	bl	80083b8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(L_pu8String);
 8006670:	f107 030c 	add.w	r3, r7, #12
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff faf7 	bl	8005c68 <SEGGER_SYSVIEW_PrintfTarget>

		lcd_send_data(ulNotifiedValue);
 800667a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff fcde 	bl	8006040 <lcd_send_data>

		if( ulNotifiedValue >= '0' && ulNotifiedValue <= '9')
 8006684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006688:	2b2f      	cmp	r3, #47	; 0x2f
 800668a:	d90f      	bls.n	80066ac <LCDTaskHandler+0x6c>
 800668c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006690:	2b39      	cmp	r3, #57	; 0x39
 8006692:	d80b      	bhi.n	80066ac <LCDTaskHandler+0x6c>
		{
			L_i32NUM = (L_i32NUM*10) + (ulNotifiedValue-'0');
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	461a      	mov	r2, r3
 80066a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066a4:	3b30      	subs	r3, #48	; 0x30
 80066a6:	4413      	add	r3, r2
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	e062      	b.n	8006772 <LCDTaskHandler+0x132>
		}
		else
		{
			if (L_u8Negative)
 80066ac:	4b32      	ldr	r3, [pc, #200]	; (8006778 <LCDTaskHandler+0x138>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <LCDTaskHandler+0x80>
			{
				L_i32NUM*=(-1);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	425b      	negs	r3, r3
 80066b8:	60bb      	str	r3, [r7, #8]
				L_u8Negative = 0;
 80066ba:	4b2f      	ldr	r3, [pc, #188]	; (8006778 <LCDTaskHandler+0x138>)
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
			}
			xQueueSendToFront(xQueueInputNumbers, &L_i32NUM, 0);
 80066c0:	4b2e      	ldr	r3, [pc, #184]	; (800677c <LCDTaskHandler+0x13c>)
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	f107 0108 	add.w	r1, r7, #8
 80066c8:	2301      	movs	r3, #1
 80066ca:	2200      	movs	r2, #0
 80066cc:	f7fa f97a 	bl	80009c4 <xQueueGenericSend>

			L_i32NUM = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60bb      	str	r3, [r7, #8]

			/* send Notification to calculate Mul or Div first */
			if( L_u8OpFlag  || ( (uxQueueMessagesWaiting(xQueueInputOperations) > 0) && ( ulNotifiedValue == '+' || ulNotifiedValue == '-' ) )  )
 80066d4:	4b2a      	ldr	r3, [pc, #168]	; (8006780 <LCDTaskHandler+0x140>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10f      	bne.n	80066fc <LCDTaskHandler+0xbc>
 80066dc:	4b29      	ldr	r3, [pc, #164]	; (8006784 <LCDTaskHandler+0x144>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fa fba5 	bl	8000e30 <uxQueueMessagesWaiting>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d013      	beq.n	8006714 <LCDTaskHandler+0xd4>
 80066ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066f0:	2b2b      	cmp	r3, #43	; 0x2b
 80066f2:	d003      	beq.n	80066fc <LCDTaskHandler+0xbc>
 80066f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066f8:	2b2d      	cmp	r3, #45	; 0x2d
 80066fa:	d10b      	bne.n	8006714 <LCDTaskHandler+0xd4>
			{
				/**/
				xTaskNotify(CalculationTaskHandle,0,eSetValueWithOverwrite);
 80066fc:	4b22      	ldr	r3, [pc, #136]	; (8006788 <LCDTaskHandler+0x148>)
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	2300      	movs	r3, #0
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2303      	movs	r3, #3
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	f7fb fe15 	bl	8002338 <xTaskGenericNotify>
				L_u8OpFlag = 0 ;
 800670e:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <LCDTaskHandler+0x140>)
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
			}

			if( ulNotifiedValue == '*' || ulNotifiedValue == '/')
 8006714:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006718:	2b2a      	cmp	r3, #42	; 0x2a
 800671a:	d003      	beq.n	8006724 <LCDTaskHandler+0xe4>
 800671c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006720:	2b2f      	cmp	r3, #47	; 0x2f
 8006722:	d103      	bne.n	800672c <LCDTaskHandler+0xec>
			{
				L_u8OpFlag = 1;
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <LCDTaskHandler+0x140>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	e01a      	b.n	8006762 <LCDTaskHandler+0x122>
			}
			else if( ulNotifiedValue == '-')
 800672c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006730:	2b2d      	cmp	r3, #45	; 0x2d
 8006732:	d106      	bne.n	8006742 <LCDTaskHandler+0x102>
			{
				ulNotifiedValue = '+';
 8006734:	232b      	movs	r3, #43	; 0x2b
 8006736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				L_u8Negative = 1;
 800673a:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <LCDTaskHandler+0x138>)
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e00f      	b.n	8006762 <LCDTaskHandler+0x122>
			}
			else if (ulNotifiedValue == '=')
 8006742:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006746:	2b3d      	cmp	r3, #61	; 0x3d
 8006748:	d10b      	bne.n	8006762 <LCDTaskHandler+0x122>
			{
				/* stop and start calculations over all Queue */
				xTaskNotify(CalculationTaskHandle,1,eSetValueWithOverwrite);
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <LCDTaskHandler+0x148>)
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	2300      	movs	r3, #0
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	2303      	movs	r3, #3
 8006754:	2201      	movs	r2, #1
 8006756:	2100      	movs	r1, #0
 8006758:	f7fb fdee 	bl	8002338 <xTaskGenericNotify>
				ulNotifiedValue=0;
 800675c:	2300      	movs	r3, #0
 800675e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			}

			xQueueSendToFront(xQueueInputOperations, &ulNotifiedValue, 0);
 8006762:	4b08      	ldr	r3, [pc, #32]	; (8006784 <LCDTaskHandler+0x144>)
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800676a:	2301      	movs	r3, #1
 800676c:	2200      	movs	r2, #0
 800676e:	f7fa f929 	bl	80009c4 <xQueueGenericSend>
		xTaskNotifyWait(0,0,(uint32_t*)&ulNotifiedValue,portMAX_DELAY);
 8006772:	e76b      	b.n	800664c <LCDTaskHandler+0xc>
 8006774:	08008e84 	.word	0x08008e84
 8006778:	200144c1 	.word	0x200144c1
 800677c:	200144b8 	.word	0x200144b8
 8006780:	200144c2 	.word	0x200144c2
 8006784:	200144bc 	.word	0x200144bc
 8006788:	200144b4 	.word	0x200144b4

0800678c <CalculationTaskHandler>:
		}
	}
}

void CalculationTaskHandler(void * Parameters)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	; 0x28
 8006790:	af02      	add	r7, sp, #8
 8006792:	6078      	str	r0, [r7, #4]

	char Lcd_string[10];

	while(1)
	{
		xTaskNotifyWait(0,0,(uint32_t*)&ulNotifiedValue,portMAX_DELAY);
 8006794:	f107 031f 	add.w	r3, r7, #31
 8006798:	f04f 32ff 	mov.w	r2, #4294967295
 800679c:	9200      	str	r2, [sp, #0]
 800679e:	2200      	movs	r2, #0
 80067a0:	2100      	movs	r1, #0
 80067a2:	2000      	movs	r0, #0
 80067a4:	f7fb fd40 	bl	8002228 <xTaskGenericNotifyWait>

		/* check notification Value */
		if(ulNotifiedValue == 0 )
 80067a8:	7ffb      	ldrb	r3, [r7, #31]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 8097 	bne.w	80068de <CalculationTaskHandler+0x152>
		{
			/* Do one operation */
			xQueueReceive(xQueueInputNumbers, &N2,0);
 80067b0:	4b63      	ldr	r3, [pc, #396]	; (8006940 <CalculationTaskHandler+0x1b4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f107 0114 	add.w	r1, r7, #20
 80067b8:	2200      	movs	r2, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fa fa28 	bl	8000c10 <xQueueReceive>
			xQueueReceive(xQueueInputNumbers, &N1,0);
 80067c0:	4b5f      	ldr	r3, [pc, #380]	; (8006940 <CalculationTaskHandler+0x1b4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f107 0118 	add.w	r1, r7, #24
 80067c8:	2200      	movs	r2, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fa fa20 	bl	8000c10 <xQueueReceive>
			xQueueReceive(xQueueInputOperations, &Operation,0);
 80067d0:	4b5c      	ldr	r3, [pc, #368]	; (8006944 <CalculationTaskHandler+0x1b8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f107 011e 	add.w	r1, r7, #30
 80067d8:	2200      	movs	r2, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fa fa18 	bl	8000c10 <xQueueReceive>

			switch(Operation)
 80067e0:	7fbb      	ldrb	r3, [r7, #30]
 80067e2:	3b2a      	subs	r3, #42	; 0x2a
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d825      	bhi.n	8006834 <CalculationTaskHandler+0xa8>
 80067e8:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <CalculationTaskHandler+0x64>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006821 	.word	0x08006821
 80067f8:	08006835 	.word	0x08006835
 80067fc:	0800682b 	.word	0x0800682b
 8006800:	08006835 	.word	0x08006835
 8006804:	08006815 	.word	0x08006815
			{
			case '*': N1 *= N2; break;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	fb02 f303 	mul.w	r3, r2, r3
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e010      	b.n	8006836 <CalculationTaskHandler+0xaa>
			case '/': N1 /= N2; break;
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	fb92 f3f3 	sdiv	r3, r2, r3
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	e00a      	b.n	8006836 <CalculationTaskHandler+0xaa>
			case '+': N1 += N2; break;
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	e005      	b.n	8006836 <CalculationTaskHandler+0xaa>
			case '-': N1 -= N2; break;
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	e000      	b.n	8006836 <CalculationTaskHandler+0xaa>
			default: break;
 8006834:	bf00      	nop
			}
			xQueueSendToFront(xQueueInputNumbers, &N1, 0);
 8006836:	4b42      	ldr	r3, [pc, #264]	; (8006940 <CalculationTaskHandler+0x1b4>)
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f107 0118 	add.w	r1, r7, #24
 800683e:	2301      	movs	r3, #1
 8006840:	2200      	movs	r2, #0
 8006842:	f7fa f8bf 	bl	80009c4 <xQueueGenericSend>
 8006846:	e7a5      	b.n	8006794 <CalculationTaskHandler+0x8>
		else
		{
			while(uxQueueMessagesWaiting(xQueueInputOperations) > 0)
			{
				/* Do one operation */
				xQueueReceive(xQueueInputNumbers, &N2,0);
 8006848:	4b3d      	ldr	r3, [pc, #244]	; (8006940 <CalculationTaskHandler+0x1b4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f107 0114 	add.w	r1, r7, #20
 8006850:	2200      	movs	r2, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f7fa f9dc 	bl	8000c10 <xQueueReceive>
				xQueueReceive(xQueueInputNumbers, &N1,0);
 8006858:	4b39      	ldr	r3, [pc, #228]	; (8006940 <CalculationTaskHandler+0x1b4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f107 0118 	add.w	r1, r7, #24
 8006860:	2200      	movs	r2, #0
 8006862:	4618      	mov	r0, r3
 8006864:	f7fa f9d4 	bl	8000c10 <xQueueReceive>
				xQueueReceive(xQueueInputOperations, &Operation,0);
 8006868:	4b36      	ldr	r3, [pc, #216]	; (8006944 <CalculationTaskHandler+0x1b8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f107 011e 	add.w	r1, r7, #30
 8006870:	2200      	movs	r2, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f7fa f9cc 	bl	8000c10 <xQueueReceive>

				switch(Operation)
 8006878:	7fbb      	ldrb	r3, [r7, #30]
 800687a:	3b2a      	subs	r3, #42	; 0x2a
 800687c:	2b05      	cmp	r3, #5
 800687e:	d825      	bhi.n	80068cc <CalculationTaskHandler+0x140>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <CalculationTaskHandler+0xfc>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068a1 	.word	0x080068a1
 800688c:	080068b9 	.word	0x080068b9
 8006890:	080068cd 	.word	0x080068cd
 8006894:	080068c3 	.word	0x080068c3
 8006898:	080068cd 	.word	0x080068cd
 800689c:	080068ad 	.word	0x080068ad
				{
				case '*': N1 *= N2; break;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	fb02 f303 	mul.w	r3, r2, r3
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	e010      	b.n	80068ce <CalculationTaskHandler+0x142>
				case '/': N1 /= N2; break;
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	e00a      	b.n	80068ce <CalculationTaskHandler+0x142>
				case '+': N1 += N2; break;
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	4413      	add	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	e005      	b.n	80068ce <CalculationTaskHandler+0x142>
				case '-': N1 -= N2; break;
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	e000      	b.n	80068ce <CalculationTaskHandler+0x142>
				default: break;
 80068cc:	bf00      	nop
				}
				xQueueSendToFront(xQueueInputNumbers, &N1, 0);
 80068ce:	4b1c      	ldr	r3, [pc, #112]	; (8006940 <CalculationTaskHandler+0x1b4>)
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	f107 0118 	add.w	r1, r7, #24
 80068d6:	2301      	movs	r3, #1
 80068d8:	2200      	movs	r2, #0
 80068da:	f7fa f873 	bl	80009c4 <xQueueGenericSend>
			while(uxQueueMessagesWaiting(xQueueInputOperations) > 0)
 80068de:	4b19      	ldr	r3, [pc, #100]	; (8006944 <CalculationTaskHandler+0x1b8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fa faa4 	bl	8000e30 <uxQueueMessagesWaiting>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ac      	bne.n	8006848 <CalculationTaskHandler+0xbc>

			}
			xQueueReset(xQueueInputOperations);
 80068ee:	4b15      	ldr	r3, [pc, #84]	; (8006944 <CalculationTaskHandler+0x1b8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7f9 ff5d 	bl	80007b4 <xQueueGenericReset>
			xQueueReset(xQueueInputNumbers);
 80068fa:	4b11      	ldr	r3, [pc, #68]	; (8006940 <CalculationTaskHandler+0x1b4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f7f9 ff57 	bl	80007b4 <xQueueGenericReset>
			/* receive Last Item in Queue and display it on LCD */
			itoa(N1,Lcd_string,10);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	f107 0108 	add.w	r1, r7, #8
 800690c:	220a      	movs	r2, #10
 800690e:	4618      	mov	r0, r3
 8006910:	f001 fd0e 	bl	8008330 <itoa>
			SEGGER_SYSVIEW_PrintfTarget("result is");
 8006914:	480c      	ldr	r0, [pc, #48]	; (8006948 <CalculationTaskHandler+0x1bc>)
 8006916:	f7ff f9a7 	bl	8005c68 <SEGGER_SYSVIEW_PrintfTarget>
			SEGGER_SYSVIEW_PrintfTarget(Lcd_string);
 800691a:	f107 0308 	add.w	r3, r7, #8
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff f9a2 	bl	8005c68 <SEGGER_SYSVIEW_PrintfTarget>
			lcd_put_cur(1,8);
 8006924:	2108      	movs	r1, #8
 8006926:	2001      	movs	r0, #1
 8006928:	f7ff fbae 	bl	8006088 <lcd_put_cur>
			lcd_send_data('=');
 800692c:	203d      	movs	r0, #61	; 0x3d
 800692e:	f7ff fb87 	bl	8006040 <lcd_send_data>
			lcd_send_string(Lcd_string);
 8006932:	f107 0308 	add.w	r3, r7, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff fc02 	bl	8006140 <lcd_send_string>
		xTaskNotifyWait(0,0,(uint32_t*)&ulNotifiedValue,portMAX_DELAY);
 800693c:	e72a      	b.n	8006794 <CalculationTaskHandler+0x8>
 800693e:	bf00      	nop
 8006940:	200144b8 	.word	0x200144b8
 8006944:	200144bc 	.word	0x200144bc
 8006948:	08008e94 	.word	0x08008e94

0800694c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a04      	ldr	r2, [pc, #16]	; (800696c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d101      	bne.n	8006962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800695e:	f000 f92f 	bl	8006bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40001000 	.word	0x40001000

08006970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006974:	b672      	cpsid	i
}
 8006976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006978:	e7fe      	b.n	8006978 <Error_Handler+0x8>
	...

0800697c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006982:	2300      	movs	r3, #0
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <HAL_MspInit+0x4c>)
 8006988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698a:	4a0f      	ldr	r2, [pc, #60]	; (80069c8 <HAL_MspInit+0x4c>)
 800698c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006990:	6453      	str	r3, [r2, #68]	; 0x44
 8006992:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <HAL_MspInit+0x4c>)
 8006994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <HAL_MspInit+0x4c>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <HAL_MspInit+0x4c>)
 80069a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ac:	6413      	str	r3, [r2, #64]	; 0x40
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <HAL_MspInit+0x4c>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80069ba:	f7fc fa25 	bl	8002e08 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40023800 	.word	0x40023800

080069cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08e      	sub	sp, #56	; 0x38
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	4b33      	ldr	r3, [pc, #204]	; (8006ab0 <HAL_InitTick+0xe4>)
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	4a32      	ldr	r2, [pc, #200]	; (8006ab0 <HAL_InitTick+0xe4>)
 80069e6:	f043 0310 	orr.w	r3, r3, #16
 80069ea:	6413      	str	r3, [r2, #64]	; 0x40
 80069ec:	4b30      	ldr	r3, [pc, #192]	; (8006ab0 <HAL_InitTick+0xe4>)
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80069f8:	f107 0210 	add.w	r2, r7, #16
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fcce 	bl	80073a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006a12:	f000 fcb3 	bl	800737c <HAL_RCC_GetPCLK1Freq>
 8006a16:	6378      	str	r0, [r7, #52]	; 0x34
 8006a18:	e004      	b.n	8006a24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006a1a:	f000 fcaf 	bl	800737c <HAL_RCC_GetPCLK1Freq>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	4a23      	ldr	r2, [pc, #140]	; (8006ab4 <HAL_InitTick+0xe8>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	0c9b      	lsrs	r3, r3, #18
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006a32:	4b21      	ldr	r3, [pc, #132]	; (8006ab8 <HAL_InitTick+0xec>)
 8006a34:	4a21      	ldr	r2, [pc, #132]	; (8006abc <HAL_InitTick+0xf0>)
 8006a36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006a38:	4b1f      	ldr	r3, [pc, #124]	; (8006ab8 <HAL_InitTick+0xec>)
 8006a3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006a3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006a40:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <HAL_InitTick+0xec>)
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006a46:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <HAL_InitTick+0xec>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	; (8006ab8 <HAL_InitTick+0xec>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a52:	4b19      	ldr	r3, [pc, #100]	; (8006ab8 <HAL_InitTick+0xec>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006a58:	4817      	ldr	r0, [pc, #92]	; (8006ab8 <HAL_InitTick+0xec>)
 8006a5a:	f001 f9a3 	bl	8007da4 <HAL_TIM_Base_Init>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006a6c:	4812      	ldr	r0, [pc, #72]	; (8006ab8 <HAL_InitTick+0xec>)
 8006a6e:	f001 f9f3 	bl	8007e58 <HAL_TIM_Base_Start_IT>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d111      	bne.n	8006aa4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006a80:	2036      	movs	r0, #54	; 0x36
 8006a82:	f000 f9b5 	bl	8006df0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b0f      	cmp	r3, #15
 8006a8a:	d808      	bhi.n	8006a9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	2036      	movs	r0, #54	; 0x36
 8006a92:	f000 f991 	bl	8006db8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a96:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <HAL_InitTick+0xf4>)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	e002      	b.n	8006aa4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3738      	adds	r7, #56	; 0x38
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	431bde83 	.word	0x431bde83
 8006ab8:	200144c4 	.word	0x200144c4
 8006abc:	40001000 	.word	0x40001000
 8006ac0:	20000014 	.word	0x20000014

08006ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006ac8:	e7fe      	b.n	8006ac8 <NMI_Handler+0x4>

08006aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006aca:	b480      	push	{r7}
 8006acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ace:	e7fe      	b.n	8006ace <HardFault_Handler+0x4>

08006ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ad4:	e7fe      	b.n	8006ad4 <MemManage_Handler+0x4>

08006ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ada:	e7fe      	b.n	8006ada <BusFault_Handler+0x4>

08006adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ae0:	e7fe      	b.n	8006ae0 <UsageFault_Handler+0x4>

08006ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ae6:	bf00      	nop
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006af4:	4802      	ldr	r0, [pc, #8]	; (8006b00 <TIM6_DAC_IRQHandler+0x10>)
 8006af6:	f001 fa1f 	bl	8007f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	200144c4 	.word	0x200144c4

08006b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <SystemInit+0x20>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	4a05      	ldr	r2, [pc, #20]	; (8006b24 <SystemInit+0x20>)
 8006b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b18:	bf00      	nop
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	e000ed00 	.word	0xe000ed00

08006b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b2c:	480d      	ldr	r0, [pc, #52]	; (8006b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006b2e:	490e      	ldr	r1, [pc, #56]	; (8006b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006b30:	4a0e      	ldr	r2, [pc, #56]	; (8006b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b34:	e002      	b.n	8006b3c <LoopCopyDataInit>

08006b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b3a:	3304      	adds	r3, #4

08006b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b40:	d3f9      	bcc.n	8006b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b42:	4a0b      	ldr	r2, [pc, #44]	; (8006b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b44:	4c0b      	ldr	r4, [pc, #44]	; (8006b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b48:	e001      	b.n	8006b4e <LoopFillZerobss>

08006b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b4c:	3204      	adds	r2, #4

08006b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b50:	d3fb      	bcc.n	8006b4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006b52:	f7ff ffd7 	bl	8006b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b56:	f001 fc7b 	bl	8008450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b5a:	f7ff fb07 	bl	800616c <main>
  bx  lr    
 8006b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b68:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8006b6c:	08008f6c 	.word	0x08008f6c
  ldr r2, =_sbss
 8006b70:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8006b74:	2001465c 	.word	0x2001465c

08006b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b78:	e7fe      	b.n	8006b78 <ADC_IRQHandler>
	...

08006b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b80:	4b0e      	ldr	r3, [pc, #56]	; (8006bbc <HAL_Init+0x40>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a0d      	ldr	r2, [pc, #52]	; (8006bbc <HAL_Init+0x40>)
 8006b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <HAL_Init+0x40>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a0a      	ldr	r2, [pc, #40]	; (8006bbc <HAL_Init+0x40>)
 8006b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b98:	4b08      	ldr	r3, [pc, #32]	; (8006bbc <HAL_Init+0x40>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <HAL_Init+0x40>)
 8006b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ba4:	2003      	movs	r0, #3
 8006ba6:	f000 f8fc 	bl	8006da2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006baa:	200f      	movs	r0, #15
 8006bac:	f7ff ff0e 	bl	80069cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bb0:	f7ff fee4 	bl	800697c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40023c00 	.word	0x40023c00

08006bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <HAL_IncTick+0x20>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <HAL_IncTick+0x24>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4413      	add	r3, r2
 8006bd0:	4a04      	ldr	r2, [pc, #16]	; (8006be4 <HAL_IncTick+0x24>)
 8006bd2:	6013      	str	r3, [r2, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	20000018 	.word	0x20000018
 8006be4:	2001450c 	.word	0x2001450c

08006be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
  return uwTick;
 8006bec:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <HAL_GetTick+0x14>)
 8006bee:	681b      	ldr	r3, [r3, #0]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	2001450c 	.word	0x2001450c

08006c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c08:	f7ff ffee 	bl	8006be8 <HAL_GetTick>
 8006c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d005      	beq.n	8006c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <HAL_Delay+0x44>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c26:	bf00      	nop
 8006c28:	f7ff ffde 	bl	8006be8 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d8f7      	bhi.n	8006c28 <HAL_Delay+0x28>
  {
  }
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000018 	.word	0x20000018

08006c48 <__NVIC_SetPriorityGrouping>:
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c58:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <__NVIC_SetPriorityGrouping+0x44>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c64:	4013      	ands	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c7a:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <__NVIC_SetPriorityGrouping+0x44>)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	60d3      	str	r3, [r2, #12]
}
 8006c80:	bf00      	nop
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	e000ed00 	.word	0xe000ed00

08006c90 <__NVIC_GetPriorityGrouping>:
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	0a1b      	lsrs	r3, r3, #8
 8006c9a:	f003 0307 	and.w	r3, r3, #7
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	e000ed00 	.word	0xe000ed00

08006cac <__NVIC_EnableIRQ>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	db0b      	blt.n	8006cd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	f003 021f 	and.w	r2, r3, #31
 8006cc4:	4907      	ldr	r1, [pc, #28]	; (8006ce4 <__NVIC_EnableIRQ+0x38>)
 8006cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	2001      	movs	r0, #1
 8006cce:	fa00 f202 	lsl.w	r2, r0, r2
 8006cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	e000e100 	.word	0xe000e100

08006ce8 <__NVIC_SetPriority>:
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	6039      	str	r1, [r7, #0]
 8006cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	db0a      	blt.n	8006d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	490c      	ldr	r1, [pc, #48]	; (8006d34 <__NVIC_SetPriority+0x4c>)
 8006d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d06:	0112      	lsls	r2, r2, #4
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d10:	e00a      	b.n	8006d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	4908      	ldr	r1, [pc, #32]	; (8006d38 <__NVIC_SetPriority+0x50>)
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	0112      	lsls	r2, r2, #4
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	440b      	add	r3, r1
 8006d26:	761a      	strb	r2, [r3, #24]
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	e000e100 	.word	0xe000e100
 8006d38:	e000ed00 	.word	0xe000ed00

08006d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b089      	sub	sp, #36	; 0x24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f1c3 0307 	rsb	r3, r3, #7
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	bf28      	it	cs
 8006d5a:	2304      	movcs	r3, #4
 8006d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	3304      	adds	r3, #4
 8006d62:	2b06      	cmp	r3, #6
 8006d64:	d902      	bls.n	8006d6c <NVIC_EncodePriority+0x30>
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	3b03      	subs	r3, #3
 8006d6a:	e000      	b.n	8006d6e <NVIC_EncodePriority+0x32>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d70:	f04f 32ff 	mov.w	r2, #4294967295
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	43da      	mvns	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	401a      	ands	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d84:	f04f 31ff 	mov.w	r1, #4294967295
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	43d9      	mvns	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d94:	4313      	orrs	r3, r2
         );
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3724      	adds	r7, #36	; 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff ff4c 	bl	8006c48 <__NVIC_SetPriorityGrouping>
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006dca:	f7ff ff61 	bl	8006c90 <__NVIC_GetPriorityGrouping>
 8006dce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	6978      	ldr	r0, [r7, #20]
 8006dd6:	f7ff ffb1 	bl	8006d3c <NVIC_EncodePriority>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de0:	4611      	mov	r1, r2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff ff80 	bl	8006ce8 <__NVIC_SetPriority>
}
 8006de8:	bf00      	nop
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff ff54 	bl	8006cac <__NVIC_EnableIRQ>
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	e165      	b.n	80070f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e28:	2201      	movs	r2, #1
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	f040 8154 	bne.w	80070ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d005      	beq.n	8006e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d130      	bne.n	8006ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	2203      	movs	r2, #3
 8006e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	4013      	ands	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e94:	2201      	movs	r2, #1
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	091b      	lsrs	r3, r3, #4
 8006eaa:	f003 0201 	and.w	r2, r3, #1
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d017      	beq.n	8006efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	43db      	mvns	r3, r3
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d123      	bne.n	8006f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	08da      	lsrs	r2, r3, #3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3208      	adds	r2, #8
 8006f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	220f      	movs	r2, #15
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	43db      	mvns	r3, r3
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	08da      	lsrs	r2, r3, #3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3208      	adds	r2, #8
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	2203      	movs	r2, #3
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	43db      	mvns	r3, r3
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	4013      	ands	r3, r2
 8006f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f003 0203 	and.w	r2, r3, #3
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80ae 	beq.w	80070ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	4b5d      	ldr	r3, [pc, #372]	; (800710c <HAL_GPIO_Init+0x300>)
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	4a5c      	ldr	r2, [pc, #368]	; (800710c <HAL_GPIO_Init+0x300>)
 8006f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fa2:	4b5a      	ldr	r3, [pc, #360]	; (800710c <HAL_GPIO_Init+0x300>)
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fae:	4a58      	ldr	r2, [pc, #352]	; (8007110 <HAL_GPIO_Init+0x304>)
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	089b      	lsrs	r3, r3, #2
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	220f      	movs	r2, #15
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a4f      	ldr	r2, [pc, #316]	; (8007114 <HAL_GPIO_Init+0x308>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d025      	beq.n	8007026 <HAL_GPIO_Init+0x21a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a4e      	ldr	r2, [pc, #312]	; (8007118 <HAL_GPIO_Init+0x30c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01f      	beq.n	8007022 <HAL_GPIO_Init+0x216>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a4d      	ldr	r2, [pc, #308]	; (800711c <HAL_GPIO_Init+0x310>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d019      	beq.n	800701e <HAL_GPIO_Init+0x212>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a4c      	ldr	r2, [pc, #304]	; (8007120 <HAL_GPIO_Init+0x314>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_GPIO_Init+0x20e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a4b      	ldr	r2, [pc, #300]	; (8007124 <HAL_GPIO_Init+0x318>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00d      	beq.n	8007016 <HAL_GPIO_Init+0x20a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a4a      	ldr	r2, [pc, #296]	; (8007128 <HAL_GPIO_Init+0x31c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <HAL_GPIO_Init+0x206>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a49      	ldr	r2, [pc, #292]	; (800712c <HAL_GPIO_Init+0x320>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d101      	bne.n	800700e <HAL_GPIO_Init+0x202>
 800700a:	2306      	movs	r3, #6
 800700c:	e00c      	b.n	8007028 <HAL_GPIO_Init+0x21c>
 800700e:	2307      	movs	r3, #7
 8007010:	e00a      	b.n	8007028 <HAL_GPIO_Init+0x21c>
 8007012:	2305      	movs	r3, #5
 8007014:	e008      	b.n	8007028 <HAL_GPIO_Init+0x21c>
 8007016:	2304      	movs	r3, #4
 8007018:	e006      	b.n	8007028 <HAL_GPIO_Init+0x21c>
 800701a:	2303      	movs	r3, #3
 800701c:	e004      	b.n	8007028 <HAL_GPIO_Init+0x21c>
 800701e:	2302      	movs	r3, #2
 8007020:	e002      	b.n	8007028 <HAL_GPIO_Init+0x21c>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <HAL_GPIO_Init+0x21c>
 8007026:	2300      	movs	r3, #0
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	f002 0203 	and.w	r2, r2, #3
 800702e:	0092      	lsls	r2, r2, #2
 8007030:	4093      	lsls	r3, r2
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	4313      	orrs	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007038:	4935      	ldr	r1, [pc, #212]	; (8007110 <HAL_GPIO_Init+0x304>)
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	089b      	lsrs	r3, r3, #2
 800703e:	3302      	adds	r3, #2
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007046:	4b3a      	ldr	r3, [pc, #232]	; (8007130 <HAL_GPIO_Init+0x324>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	43db      	mvns	r3, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4013      	ands	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800706a:	4a31      	ldr	r2, [pc, #196]	; (8007130 <HAL_GPIO_Init+0x324>)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007070:	4b2f      	ldr	r3, [pc, #188]	; (8007130 <HAL_GPIO_Init+0x324>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	43db      	mvns	r3, r3
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	4013      	ands	r3, r2
 800707e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007094:	4a26      	ldr	r2, [pc, #152]	; (8007130 <HAL_GPIO_Init+0x324>)
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800709a:	4b25      	ldr	r3, [pc, #148]	; (8007130 <HAL_GPIO_Init+0x324>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	43db      	mvns	r3, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4013      	ands	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070be:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <HAL_GPIO_Init+0x324>)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070c4:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <HAL_GPIO_Init+0x324>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	43db      	mvns	r3, r3
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4013      	ands	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070e8:	4a11      	ldr	r2, [pc, #68]	; (8007130 <HAL_GPIO_Init+0x324>)
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	3301      	adds	r3, #1
 80070f2:	61fb      	str	r3, [r7, #28]
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	f67f ae96 	bls.w	8006e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	3724      	adds	r7, #36	; 0x24
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40023800 	.word	0x40023800
 8007110:	40013800 	.word	0x40013800
 8007114:	40020000 	.word	0x40020000
 8007118:	40020400 	.word	0x40020400
 800711c:	40020800 	.word	0x40020800
 8007120:	40020c00 	.word	0x40020c00
 8007124:	40021000 	.word	0x40021000
 8007128:	40021400 	.word	0x40021400
 800712c:	40021800 	.word	0x40021800
 8007130:	40013c00 	.word	0x40013c00

08007134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691a      	ldr	r2, [r3, #16]
 8007144:	887b      	ldrh	r3, [r7, #2]
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800714c:	2301      	movs	r3, #1
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	e001      	b.n	8007156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	807b      	strh	r3, [r7, #2]
 8007170:	4613      	mov	r3, r2
 8007172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007174:	787b      	ldrb	r3, [r7, #1]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800717a:	887a      	ldrh	r2, [r7, #2]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007180:	e003      	b.n	800718a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007182:	887b      	ldrh	r3, [r7, #2]
 8007184:	041a      	lsls	r2, r3, #16
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	619a      	str	r2, [r3, #24]
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e0cc      	b.n	8007346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071ac:	4b68      	ldr	r3, [pc, #416]	; (8007350 <HAL_RCC_ClockConfig+0x1b8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d90c      	bls.n	80071d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ba:	4b65      	ldr	r3, [pc, #404]	; (8007350 <HAL_RCC_ClockConfig+0x1b8>)
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c2:	4b63      	ldr	r3, [pc, #396]	; (8007350 <HAL_RCC_ClockConfig+0x1b8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d001      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0b8      	b.n	8007346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d020      	beq.n	8007222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071ec:	4b59      	ldr	r3, [pc, #356]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	4a58      	ldr	r2, [pc, #352]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007204:	4b53      	ldr	r3, [pc, #332]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	4a52      	ldr	r2, [pc, #328]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 800720a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800720e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007210:	4b50      	ldr	r3, [pc, #320]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	494d      	ldr	r1, [pc, #308]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	4313      	orrs	r3, r2
 8007220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d044      	beq.n	80072b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d107      	bne.n	8007246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007236:	4b47      	ldr	r3, [pc, #284]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d119      	bne.n	8007276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e07f      	b.n	8007346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d003      	beq.n	8007256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007252:	2b03      	cmp	r3, #3
 8007254:	d107      	bne.n	8007266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007256:	4b3f      	ldr	r3, [pc, #252]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d109      	bne.n	8007276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e06f      	b.n	8007346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007266:	4b3b      	ldr	r3, [pc, #236]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e067      	b.n	8007346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007276:	4b37      	ldr	r3, [pc, #220]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f023 0203 	bic.w	r2, r3, #3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4934      	ldr	r1, [pc, #208]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 8007284:	4313      	orrs	r3, r2
 8007286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007288:	f7ff fcae 	bl	8006be8 <HAL_GetTick>
 800728c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800728e:	e00a      	b.n	80072a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007290:	f7ff fcaa 	bl	8006be8 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	f241 3288 	movw	r2, #5000	; 0x1388
 800729e:	4293      	cmp	r3, r2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e04f      	b.n	8007346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a6:	4b2b      	ldr	r3, [pc, #172]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 020c 	and.w	r2, r3, #12
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d1eb      	bne.n	8007290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072b8:	4b25      	ldr	r3, [pc, #148]	; (8007350 <HAL_RCC_ClockConfig+0x1b8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d20c      	bcs.n	80072e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072c6:	4b22      	ldr	r3, [pc, #136]	; (8007350 <HAL_RCC_ClockConfig+0x1b8>)
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ce:	4b20      	ldr	r3, [pc, #128]	; (8007350 <HAL_RCC_ClockConfig+0x1b8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d001      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e032      	b.n	8007346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072ec:	4b19      	ldr	r3, [pc, #100]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	4916      	ldr	r1, [pc, #88]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d009      	beq.n	800731e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800730a:	4b12      	ldr	r3, [pc, #72]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	490e      	ldr	r1, [pc, #56]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 800731a:	4313      	orrs	r3, r2
 800731c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800731e:	f000 f873 	bl	8007408 <HAL_RCC_GetSysClockFreq>
 8007322:	4602      	mov	r2, r0
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <HAL_RCC_ClockConfig+0x1bc>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	490a      	ldr	r1, [pc, #40]	; (8007358 <HAL_RCC_ClockConfig+0x1c0>)
 8007330:	5ccb      	ldrb	r3, [r1, r3]
 8007332:	fa22 f303 	lsr.w	r3, r2, r3
 8007336:	4a09      	ldr	r2, [pc, #36]	; (800735c <HAL_RCC_ClockConfig+0x1c4>)
 8007338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <HAL_RCC_ClockConfig+0x1c8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fb44 	bl	80069cc <HAL_InitTick>

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40023c00 	.word	0x40023c00
 8007354:	40023800 	.word	0x40023800
 8007358:	08008eec 	.word	0x08008eec
 800735c:	20000010 	.word	0x20000010
 8007360:	20000014 	.word	0x20000014

08007364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007368:	4b03      	ldr	r3, [pc, #12]	; (8007378 <HAL_RCC_GetHCLKFreq+0x14>)
 800736a:	681b      	ldr	r3, [r3, #0]
}
 800736c:	4618      	mov	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	20000010 	.word	0x20000010

0800737c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007380:	f7ff fff0 	bl	8007364 <HAL_RCC_GetHCLKFreq>
 8007384:	4602      	mov	r2, r0
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	0a9b      	lsrs	r3, r3, #10
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	4903      	ldr	r1, [pc, #12]	; (80073a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007392:	5ccb      	ldrb	r3, [r1, r3]
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40023800 	.word	0x40023800
 80073a0:	08008efc 	.word	0x08008efc

080073a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	220f      	movs	r2, #15
 80073b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073b4:	4b12      	ldr	r3, [pc, #72]	; (8007400 <HAL_RCC_GetClockConfig+0x5c>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0203 	and.w	r2, r3, #3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <HAL_RCC_GetClockConfig+0x5c>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <HAL_RCC_GetClockConfig+0x5c>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <HAL_RCC_GetClockConfig+0x5c>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	08db      	lsrs	r3, r3, #3
 80073de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <HAL_RCC_GetClockConfig+0x60>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 020f 	and.w	r2, r3, #15
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40023800 	.word	0x40023800
 8007404:	40023c00 	.word	0x40023c00

08007408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800740c:	b0ae      	sub	sp, #184	; 0xb8
 800740e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800742e:	4bcb      	ldr	r3, [pc, #812]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f003 030c 	and.w	r3, r3, #12
 8007436:	2b0c      	cmp	r3, #12
 8007438:	f200 8206 	bhi.w	8007848 <HAL_RCC_GetSysClockFreq+0x440>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <HAL_RCC_GetSysClockFreq+0x3c>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007479 	.word	0x08007479
 8007448:	08007849 	.word	0x08007849
 800744c:	08007849 	.word	0x08007849
 8007450:	08007849 	.word	0x08007849
 8007454:	08007481 	.word	0x08007481
 8007458:	08007849 	.word	0x08007849
 800745c:	08007849 	.word	0x08007849
 8007460:	08007849 	.word	0x08007849
 8007464:	08007489 	.word	0x08007489
 8007468:	08007849 	.word	0x08007849
 800746c:	08007849 	.word	0x08007849
 8007470:	08007849 	.word	0x08007849
 8007474:	08007679 	.word	0x08007679
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007478:	4bb9      	ldr	r3, [pc, #740]	; (8007760 <HAL_RCC_GetSysClockFreq+0x358>)
 800747a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800747e:	e1e7      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007480:	4bb8      	ldr	r3, [pc, #736]	; (8007764 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007486:	e1e3      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007488:	4bb4      	ldr	r3, [pc, #720]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007494:	4bb1      	ldr	r3, [pc, #708]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d071      	beq.n	8007584 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a0:	4bae      	ldr	r3, [pc, #696]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	099b      	lsrs	r3, r3, #6
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80074b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074bc:	2300      	movs	r3, #0
 80074be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074c6:	4622      	mov	r2, r4
 80074c8:	462b      	mov	r3, r5
 80074ca:	f04f 0000 	mov.w	r0, #0
 80074ce:	f04f 0100 	mov.w	r1, #0
 80074d2:	0159      	lsls	r1, r3, #5
 80074d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074d8:	0150      	lsls	r0, r2, #5
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4621      	mov	r1, r4
 80074e0:	1a51      	subs	r1, r2, r1
 80074e2:	6439      	str	r1, [r7, #64]	; 0x40
 80074e4:	4629      	mov	r1, r5
 80074e6:	eb63 0301 	sbc.w	r3, r3, r1
 80074ea:	647b      	str	r3, [r7, #68]	; 0x44
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80074f8:	4649      	mov	r1, r9
 80074fa:	018b      	lsls	r3, r1, #6
 80074fc:	4641      	mov	r1, r8
 80074fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007502:	4641      	mov	r1, r8
 8007504:	018a      	lsls	r2, r1, #6
 8007506:	4641      	mov	r1, r8
 8007508:	1a51      	subs	r1, r2, r1
 800750a:	63b9      	str	r1, [r7, #56]	; 0x38
 800750c:	4649      	mov	r1, r9
 800750e:	eb63 0301 	sbc.w	r3, r3, r1
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007520:	4649      	mov	r1, r9
 8007522:	00cb      	lsls	r3, r1, #3
 8007524:	4641      	mov	r1, r8
 8007526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800752a:	4641      	mov	r1, r8
 800752c:	00ca      	lsls	r2, r1, #3
 800752e:	4610      	mov	r0, r2
 8007530:	4619      	mov	r1, r3
 8007532:	4603      	mov	r3, r0
 8007534:	4622      	mov	r2, r4
 8007536:	189b      	adds	r3, r3, r2
 8007538:	633b      	str	r3, [r7, #48]	; 0x30
 800753a:	462b      	mov	r3, r5
 800753c:	460a      	mov	r2, r1
 800753e:	eb42 0303 	adc.w	r3, r2, r3
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007550:	4629      	mov	r1, r5
 8007552:	024b      	lsls	r3, r1, #9
 8007554:	4621      	mov	r1, r4
 8007556:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800755a:	4621      	mov	r1, r4
 800755c:	024a      	lsls	r2, r1, #9
 800755e:	4610      	mov	r0, r2
 8007560:	4619      	mov	r1, r3
 8007562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007566:	2200      	movs	r2, #0
 8007568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800756c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007570:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007574:	f7f8 feec 	bl	8000350 <__aeabi_uldivmod>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4613      	mov	r3, r2
 800757e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007582:	e067      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007584:	4b75      	ldr	r3, [pc, #468]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	099b      	lsrs	r3, r3, #6
 800758a:	2200      	movs	r2, #0
 800758c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007590:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759c:	67bb      	str	r3, [r7, #120]	; 0x78
 800759e:	2300      	movs	r3, #0
 80075a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80075a6:	4622      	mov	r2, r4
 80075a8:	462b      	mov	r3, r5
 80075aa:	f04f 0000 	mov.w	r0, #0
 80075ae:	f04f 0100 	mov.w	r1, #0
 80075b2:	0159      	lsls	r1, r3, #5
 80075b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075b8:	0150      	lsls	r0, r2, #5
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4621      	mov	r1, r4
 80075c0:	1a51      	subs	r1, r2, r1
 80075c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80075c4:	4629      	mov	r1, r5
 80075c6:	eb63 0301 	sbc.w	r3, r3, r1
 80075ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80075d8:	4649      	mov	r1, r9
 80075da:	018b      	lsls	r3, r1, #6
 80075dc:	4641      	mov	r1, r8
 80075de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075e2:	4641      	mov	r1, r8
 80075e4:	018a      	lsls	r2, r1, #6
 80075e6:	4641      	mov	r1, r8
 80075e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80075ec:	4649      	mov	r1, r9
 80075ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007606:	4692      	mov	sl, r2
 8007608:	469b      	mov	fp, r3
 800760a:	4623      	mov	r3, r4
 800760c:	eb1a 0303 	adds.w	r3, sl, r3
 8007610:	623b      	str	r3, [r7, #32]
 8007612:	462b      	mov	r3, r5
 8007614:	eb4b 0303 	adc.w	r3, fp, r3
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007626:	4629      	mov	r1, r5
 8007628:	028b      	lsls	r3, r1, #10
 800762a:	4621      	mov	r1, r4
 800762c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007630:	4621      	mov	r1, r4
 8007632:	028a      	lsls	r2, r1, #10
 8007634:	4610      	mov	r0, r2
 8007636:	4619      	mov	r1, r3
 8007638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800763c:	2200      	movs	r2, #0
 800763e:	673b      	str	r3, [r7, #112]	; 0x70
 8007640:	677a      	str	r2, [r7, #116]	; 0x74
 8007642:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007646:	f7f8 fe83 	bl	8000350 <__aeabi_uldivmod>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4613      	mov	r3, r2
 8007650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007654:	4b41      	ldr	r3, [pc, #260]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	0c1b      	lsrs	r3, r3, #16
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	3301      	adds	r3, #1
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800766a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800766e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007676:	e0eb      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007678:	4b38      	ldr	r3, [pc, #224]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007684:	4b35      	ldr	r3, [pc, #212]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d06b      	beq.n	8007768 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007690:	4b32      	ldr	r3, [pc, #200]	; (800775c <HAL_RCC_GetSysClockFreq+0x354>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	099b      	lsrs	r3, r3, #6
 8007696:	2200      	movs	r2, #0
 8007698:	66bb      	str	r3, [r7, #104]	; 0x68
 800769a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800769c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	663b      	str	r3, [r7, #96]	; 0x60
 80076a4:	2300      	movs	r3, #0
 80076a6:	667b      	str	r3, [r7, #100]	; 0x64
 80076a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80076ac:	4622      	mov	r2, r4
 80076ae:	462b      	mov	r3, r5
 80076b0:	f04f 0000 	mov.w	r0, #0
 80076b4:	f04f 0100 	mov.w	r1, #0
 80076b8:	0159      	lsls	r1, r3, #5
 80076ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076be:	0150      	lsls	r0, r2, #5
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4621      	mov	r1, r4
 80076c6:	1a51      	subs	r1, r2, r1
 80076c8:	61b9      	str	r1, [r7, #24]
 80076ca:	4629      	mov	r1, r5
 80076cc:	eb63 0301 	sbc.w	r3, r3, r1
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80076de:	4659      	mov	r1, fp
 80076e0:	018b      	lsls	r3, r1, #6
 80076e2:	4651      	mov	r1, sl
 80076e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076e8:	4651      	mov	r1, sl
 80076ea:	018a      	lsls	r2, r1, #6
 80076ec:	4651      	mov	r1, sl
 80076ee:	ebb2 0801 	subs.w	r8, r2, r1
 80076f2:	4659      	mov	r1, fp
 80076f4:	eb63 0901 	sbc.w	r9, r3, r1
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	f04f 0300 	mov.w	r3, #0
 8007700:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007704:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007708:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800770c:	4690      	mov	r8, r2
 800770e:	4699      	mov	r9, r3
 8007710:	4623      	mov	r3, r4
 8007712:	eb18 0303 	adds.w	r3, r8, r3
 8007716:	613b      	str	r3, [r7, #16]
 8007718:	462b      	mov	r3, r5
 800771a:	eb49 0303 	adc.w	r3, r9, r3
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800772c:	4629      	mov	r1, r5
 800772e:	024b      	lsls	r3, r1, #9
 8007730:	4621      	mov	r1, r4
 8007732:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007736:	4621      	mov	r1, r4
 8007738:	024a      	lsls	r2, r1, #9
 800773a:	4610      	mov	r0, r2
 800773c:	4619      	mov	r1, r3
 800773e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007742:	2200      	movs	r2, #0
 8007744:	65bb      	str	r3, [r7, #88]	; 0x58
 8007746:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007748:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800774c:	f7f8 fe00 	bl	8000350 <__aeabi_uldivmod>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4613      	mov	r3, r2
 8007756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800775a:	e065      	b.n	8007828 <HAL_RCC_GetSysClockFreq+0x420>
 800775c:	40023800 	.word	0x40023800
 8007760:	00f42400 	.word	0x00f42400
 8007764:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007768:	4b3d      	ldr	r3, [pc, #244]	; (8007860 <HAL_RCC_GetSysClockFreq+0x458>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	099b      	lsrs	r3, r3, #6
 800776e:	2200      	movs	r2, #0
 8007770:	4618      	mov	r0, r3
 8007772:	4611      	mov	r1, r2
 8007774:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007778:	653b      	str	r3, [r7, #80]	; 0x50
 800777a:	2300      	movs	r3, #0
 800777c:	657b      	str	r3, [r7, #84]	; 0x54
 800777e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007782:	4642      	mov	r2, r8
 8007784:	464b      	mov	r3, r9
 8007786:	f04f 0000 	mov.w	r0, #0
 800778a:	f04f 0100 	mov.w	r1, #0
 800778e:	0159      	lsls	r1, r3, #5
 8007790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007794:	0150      	lsls	r0, r2, #5
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4641      	mov	r1, r8
 800779c:	1a51      	subs	r1, r2, r1
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	4649      	mov	r1, r9
 80077a2:	eb63 0301 	sbc.w	r3, r3, r1
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80077b4:	4659      	mov	r1, fp
 80077b6:	018b      	lsls	r3, r1, #6
 80077b8:	4651      	mov	r1, sl
 80077ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077be:	4651      	mov	r1, sl
 80077c0:	018a      	lsls	r2, r1, #6
 80077c2:	4651      	mov	r1, sl
 80077c4:	1a54      	subs	r4, r2, r1
 80077c6:	4659      	mov	r1, fp
 80077c8:	eb63 0501 	sbc.w	r5, r3, r1
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	f04f 0300 	mov.w	r3, #0
 80077d4:	00eb      	lsls	r3, r5, #3
 80077d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077da:	00e2      	lsls	r2, r4, #3
 80077dc:	4614      	mov	r4, r2
 80077de:	461d      	mov	r5, r3
 80077e0:	4643      	mov	r3, r8
 80077e2:	18e3      	adds	r3, r4, r3
 80077e4:	603b      	str	r3, [r7, #0]
 80077e6:	464b      	mov	r3, r9
 80077e8:	eb45 0303 	adc.w	r3, r5, r3
 80077ec:	607b      	str	r3, [r7, #4]
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077fa:	4629      	mov	r1, r5
 80077fc:	028b      	lsls	r3, r1, #10
 80077fe:	4621      	mov	r1, r4
 8007800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007804:	4621      	mov	r1, r4
 8007806:	028a      	lsls	r2, r1, #10
 8007808:	4610      	mov	r0, r2
 800780a:	4619      	mov	r1, r3
 800780c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007810:	2200      	movs	r2, #0
 8007812:	64bb      	str	r3, [r7, #72]	; 0x48
 8007814:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007816:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800781a:	f7f8 fd99 	bl	8000350 <__aeabi_uldivmod>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4613      	mov	r3, r2
 8007824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <HAL_RCC_GetSysClockFreq+0x458>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	0f1b      	lsrs	r3, r3, #28
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800783a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800783e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007846:	e003      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007848:	4b06      	ldr	r3, [pc, #24]	; (8007864 <HAL_RCC_GetSysClockFreq+0x45c>)
 800784a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800784e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007850:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007854:	4618      	mov	r0, r3
 8007856:	37b8      	adds	r7, #184	; 0xb8
 8007858:	46bd      	mov	sp, r7
 800785a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800785e:	bf00      	nop
 8007860:	40023800 	.word	0x40023800
 8007864:	00f42400 	.word	0x00f42400

08007868 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e28d      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8083 	beq.w	800798e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007888:	4b94      	ldr	r3, [pc, #592]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 030c 	and.w	r3, r3, #12
 8007890:	2b04      	cmp	r3, #4
 8007892:	d019      	beq.n	80078c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007894:	4b91      	ldr	r3, [pc, #580]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800789c:	2b08      	cmp	r3, #8
 800789e:	d106      	bne.n	80078ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80078a0:	4b8e      	ldr	r3, [pc, #568]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ac:	d00c      	beq.n	80078c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078ae:	4b8b      	ldr	r3, [pc, #556]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80078b6:	2b0c      	cmp	r3, #12
 80078b8:	d112      	bne.n	80078e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078ba:	4b88      	ldr	r3, [pc, #544]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078c6:	d10b      	bne.n	80078e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078c8:	4b84      	ldr	r3, [pc, #528]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d05b      	beq.n	800798c <HAL_RCC_OscConfig+0x124>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d157      	bne.n	800798c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e25a      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e8:	d106      	bne.n	80078f8 <HAL_RCC_OscConfig+0x90>
 80078ea:	4b7c      	ldr	r3, [pc, #496]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a7b      	ldr	r2, [pc, #492]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80078f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	e01d      	b.n	8007934 <HAL_RCC_OscConfig+0xcc>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007900:	d10c      	bne.n	800791c <HAL_RCC_OscConfig+0xb4>
 8007902:	4b76      	ldr	r3, [pc, #472]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a75      	ldr	r2, [pc, #468]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	4b73      	ldr	r3, [pc, #460]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a72      	ldr	r2, [pc, #456]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	e00b      	b.n	8007934 <HAL_RCC_OscConfig+0xcc>
 800791c:	4b6f      	ldr	r3, [pc, #444]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a6e      	ldr	r2, [pc, #440]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	4b6c      	ldr	r3, [pc, #432]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a6b      	ldr	r2, [pc, #428]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 800792e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d013      	beq.n	8007964 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7ff f954 	bl	8006be8 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007944:	f7ff f950 	bl	8006be8 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b64      	cmp	r3, #100	; 0x64
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e21f      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007956:	4b61      	ldr	r3, [pc, #388]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0f0      	beq.n	8007944 <HAL_RCC_OscConfig+0xdc>
 8007962:	e014      	b.n	800798e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007964:	f7ff f940 	bl	8006be8 <HAL_GetTick>
 8007968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800796c:	f7ff f93c 	bl	8006be8 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b64      	cmp	r3, #100	; 0x64
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e20b      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800797e:	4b57      	ldr	r3, [pc, #348]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f0      	bne.n	800796c <HAL_RCC_OscConfig+0x104>
 800798a:	e000      	b.n	800798e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800798c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d06f      	beq.n	8007a7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800799a:	4b50      	ldr	r3, [pc, #320]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f003 030c 	and.w	r3, r3, #12
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d017      	beq.n	80079d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80079a6:	4b4d      	ldr	r3, [pc, #308]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d105      	bne.n	80079be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80079b2:	4b4a      	ldr	r3, [pc, #296]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079be:	4b47      	ldr	r3, [pc, #284]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80079c6:	2b0c      	cmp	r3, #12
 80079c8:	d11c      	bne.n	8007a04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ca:	4b44      	ldr	r3, [pc, #272]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d116      	bne.n	8007a04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079d6:	4b41      	ldr	r3, [pc, #260]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <HAL_RCC_OscConfig+0x186>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d001      	beq.n	80079ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e1d3      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ee:	4b3b      	ldr	r3, [pc, #236]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	4937      	ldr	r1, [pc, #220]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a02:	e03a      	b.n	8007a7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d020      	beq.n	8007a4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a0c:	4b34      	ldr	r3, [pc, #208]	; (8007ae0 <HAL_RCC_OscConfig+0x278>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a12:	f7ff f8e9 	bl	8006be8 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a1a:	f7ff f8e5 	bl	8006be8 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e1b4      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a2c:	4b2b      	ldr	r3, [pc, #172]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0f0      	beq.n	8007a1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a38:	4b28      	ldr	r3, [pc, #160]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	4925      	ldr	r1, [pc, #148]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	600b      	str	r3, [r1, #0]
 8007a4c:	e015      	b.n	8007a7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <HAL_RCC_OscConfig+0x278>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7ff f8c8 	bl	8006be8 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a5c:	f7ff f8c4 	bl	8006be8 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e193      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a6e:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f0      	bne.n	8007a5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d036      	beq.n	8007af4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d016      	beq.n	8007abc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a8e:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <HAL_RCC_OscConfig+0x27c>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a94:	f7ff f8a8 	bl	8006be8 <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a9c:	f7ff f8a4 	bl	8006be8 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e173      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aae:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <HAL_RCC_OscConfig+0x274>)
 8007ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <HAL_RCC_OscConfig+0x234>
 8007aba:	e01b      	b.n	8007af4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <HAL_RCC_OscConfig+0x27c>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac2:	f7ff f891 	bl	8006be8 <HAL_GetTick>
 8007ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ac8:	e00e      	b.n	8007ae8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aca:	f7ff f88d 	bl	8006be8 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d907      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e15c      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
 8007adc:	40023800 	.word	0x40023800
 8007ae0:	42470000 	.word	0x42470000
 8007ae4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ae8:	4b8a      	ldr	r3, [pc, #552]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1ea      	bne.n	8007aca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8097 	beq.w	8007c30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b06:	4b83      	ldr	r3, [pc, #524]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10f      	bne.n	8007b32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]
 8007b16:	4b7f      	ldr	r3, [pc, #508]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	4a7e      	ldr	r2, [pc, #504]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b20:	6413      	str	r3, [r2, #64]	; 0x40
 8007b22:	4b7c      	ldr	r3, [pc, #496]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2a:	60bb      	str	r3, [r7, #8]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b32:	4b79      	ldr	r3, [pc, #484]	; (8007d18 <HAL_RCC_OscConfig+0x4b0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d118      	bne.n	8007b70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b3e:	4b76      	ldr	r3, [pc, #472]	; (8007d18 <HAL_RCC_OscConfig+0x4b0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a75      	ldr	r2, [pc, #468]	; (8007d18 <HAL_RCC_OscConfig+0x4b0>)
 8007b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b4a:	f7ff f84d 	bl	8006be8 <HAL_GetTick>
 8007b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b50:	e008      	b.n	8007b64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b52:	f7ff f849 	bl	8006be8 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e118      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b64:	4b6c      	ldr	r3, [pc, #432]	; (8007d18 <HAL_RCC_OscConfig+0x4b0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0f0      	beq.n	8007b52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d106      	bne.n	8007b86 <HAL_RCC_OscConfig+0x31e>
 8007b78:	4b66      	ldr	r3, [pc, #408]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7c:	4a65      	ldr	r2, [pc, #404]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b7e:	f043 0301 	orr.w	r3, r3, #1
 8007b82:	6713      	str	r3, [r2, #112]	; 0x70
 8007b84:	e01c      	b.n	8007bc0 <HAL_RCC_OscConfig+0x358>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	d10c      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x340>
 8007b8e:	4b61      	ldr	r3, [pc, #388]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	4a60      	ldr	r2, [pc, #384]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b94:	f043 0304 	orr.w	r3, r3, #4
 8007b98:	6713      	str	r3, [r2, #112]	; 0x70
 8007b9a:	4b5e      	ldr	r3, [pc, #376]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	4a5d      	ldr	r2, [pc, #372]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ba6:	e00b      	b.n	8007bc0 <HAL_RCC_OscConfig+0x358>
 8007ba8:	4b5a      	ldr	r3, [pc, #360]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bac:	4a59      	ldr	r2, [pc, #356]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007bae:	f023 0301 	bic.w	r3, r3, #1
 8007bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bb4:	4b57      	ldr	r3, [pc, #348]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb8:	4a56      	ldr	r2, [pc, #344]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007bba:	f023 0304 	bic.w	r3, r3, #4
 8007bbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d015      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc8:	f7ff f80e 	bl	8006be8 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bce:	e00a      	b.n	8007be6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bd0:	f7ff f80a 	bl	8006be8 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e0d7      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007be6:	4b4b      	ldr	r3, [pc, #300]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0ee      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x368>
 8007bf2:	e014      	b.n	8007c1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf4:	f7fe fff8 	bl	8006be8 <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bfa:	e00a      	b.n	8007c12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bfc:	f7fe fff4 	bl	8006be8 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d901      	bls.n	8007c12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e0c1      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c12:	4b40      	ldr	r3, [pc, #256]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1ee      	bne.n	8007bfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d105      	bne.n	8007c30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c24:	4b3b      	ldr	r3, [pc, #236]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	4a3a      	ldr	r2, [pc, #232]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80ad 	beq.w	8007d94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c3a:	4b36      	ldr	r3, [pc, #216]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 030c 	and.w	r3, r3, #12
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d060      	beq.n	8007d08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d145      	bne.n	8007cda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c4e:	4b33      	ldr	r3, [pc, #204]	; (8007d1c <HAL_RCC_OscConfig+0x4b4>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c54:	f7fe ffc8 	bl	8006be8 <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c5c:	f7fe ffc4 	bl	8006be8 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e093      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c6e:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f0      	bne.n	8007c5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69da      	ldr	r2, [r3, #28]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	019b      	lsls	r3, r3, #6
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	3b01      	subs	r3, #1
 8007c94:	041b      	lsls	r3, r3, #16
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	061b      	lsls	r3, r3, #24
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca4:	071b      	lsls	r3, r3, #28
 8007ca6:	491b      	ldr	r1, [pc, #108]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <HAL_RCC_OscConfig+0x4b4>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb2:	f7fe ff99 	bl	8006be8 <HAL_GetTick>
 8007cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cb8:	e008      	b.n	8007ccc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cba:	f7fe ff95 	bl	8006be8 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e064      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ccc:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0f0      	beq.n	8007cba <HAL_RCC_OscConfig+0x452>
 8007cd8:	e05c      	b.n	8007d94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cda:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <HAL_RCC_OscConfig+0x4b4>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce0:	f7fe ff82 	bl	8006be8 <HAL_GetTick>
 8007ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ce8:	f7fe ff7e 	bl	8006be8 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e04d      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cfa:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <HAL_RCC_OscConfig+0x4ac>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1f0      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x480>
 8007d06:	e045      	b.n	8007d94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d107      	bne.n	8007d20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e040      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
 8007d14:	40023800 	.word	0x40023800
 8007d18:	40007000 	.word	0x40007000
 8007d1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d20:	4b1f      	ldr	r3, [pc, #124]	; (8007da0 <HAL_RCC_OscConfig+0x538>)
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d030      	beq.n	8007d90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d129      	bne.n	8007d90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d122      	bne.n	8007d90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d119      	bne.n	8007d90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d66:	085b      	lsrs	r3, r3, #1
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d10f      	bne.n	8007d90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d107      	bne.n	8007d90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d001      	beq.n	8007d94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	40023800 	.word	0x40023800

08007da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e041      	b.n	8007e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f839 	bl	8007e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f000 f9d8 	bl	8008198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
	...

08007e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d001      	beq.n	8007e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e04e      	b.n	8007f0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0201 	orr.w	r2, r2, #1
 8007e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a23      	ldr	r2, [pc, #140]	; (8007f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d022      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x80>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9a:	d01d      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x80>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d018      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x80>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a1e      	ldr	r2, [pc, #120]	; (8007f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d013      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x80>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1c      	ldr	r2, [pc, #112]	; (8007f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00e      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x80>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1b      	ldr	r2, [pc, #108]	; (8007f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d009      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x80>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a19      	ldr	r2, [pc, #100]	; (8007f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d004      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x80>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a18      	ldr	r2, [pc, #96]	; (8007f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d111      	bne.n	8007efc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b06      	cmp	r3, #6
 8007ee8:	d010      	beq.n	8007f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0201 	orr.w	r2, r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efa:	e007      	b.n	8007f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40010000 	.word	0x40010000
 8007f20:	40000400 	.word	0x40000400
 8007f24:	40000800 	.word	0x40000800
 8007f28:	40000c00 	.word	0x40000c00
 8007f2c:	40010400 	.word	0x40010400
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40001800 	.word	0x40001800

08007f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d122      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d11b      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0202 	mvn.w	r2, #2
 8007f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8ee 	bl	800815c <HAL_TIM_IC_CaptureCallback>
 8007f80:	e005      	b.n	8007f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f8e0 	bl	8008148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8f1 	bl	8008170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d122      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d11b      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0204 	mvn.w	r2, #4
 8007fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f8c4 	bl	800815c <HAL_TIM_IC_CaptureCallback>
 8007fd4:	e005      	b.n	8007fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8b6 	bl	8008148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8c7 	bl	8008170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d122      	bne.n	800803c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b08      	cmp	r3, #8
 8008002:	d11b      	bne.n	800803c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0208 	mvn.w	r2, #8
 800800c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2204      	movs	r2, #4
 8008012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f89a 	bl	800815c <HAL_TIM_IC_CaptureCallback>
 8008028:	e005      	b.n	8008036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f88c 	bl	8008148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f89d 	bl	8008170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	2b10      	cmp	r3, #16
 8008048:	d122      	bne.n	8008090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b10      	cmp	r3, #16
 8008056:	d11b      	bne.n	8008090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0210 	mvn.w	r2, #16
 8008060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2208      	movs	r2, #8
 8008066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f870 	bl	800815c <HAL_TIM_IC_CaptureCallback>
 800807c:	e005      	b.n	800808a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f862 	bl	8008148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f873 	bl	8008170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b01      	cmp	r3, #1
 800809c:	d10e      	bne.n	80080bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d107      	bne.n	80080bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0201 	mvn.w	r2, #1
 80080b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fe fc48 	bl	800694c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c6:	2b80      	cmp	r3, #128	; 0x80
 80080c8:	d10e      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d107      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f902 	bl	80082ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f2:	2b40      	cmp	r3, #64	; 0x40
 80080f4:	d10e      	bne.n	8008114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b40      	cmp	r3, #64	; 0x40
 8008102:	d107      	bne.n	8008114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800810c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f838 	bl	8008184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b20      	cmp	r3, #32
 8008120:	d10e      	bne.n	8008140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b20      	cmp	r3, #32
 800812e:	d107      	bne.n	8008140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0220 	mvn.w	r2, #32
 8008138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8cc 	bl	80082d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a40      	ldr	r2, [pc, #256]	; (80082ac <TIM_Base_SetConfig+0x114>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d013      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b6:	d00f      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a3d      	ldr	r2, [pc, #244]	; (80082b0 <TIM_Base_SetConfig+0x118>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d00b      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a3c      	ldr	r2, [pc, #240]	; (80082b4 <TIM_Base_SetConfig+0x11c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d007      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a3b      	ldr	r2, [pc, #236]	; (80082b8 <TIM_Base_SetConfig+0x120>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d003      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a3a      	ldr	r2, [pc, #232]	; (80082bc <TIM_Base_SetConfig+0x124>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d108      	bne.n	80081ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a2f      	ldr	r2, [pc, #188]	; (80082ac <TIM_Base_SetConfig+0x114>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d02b      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f8:	d027      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a2c      	ldr	r2, [pc, #176]	; (80082b0 <TIM_Base_SetConfig+0x118>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d023      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a2b      	ldr	r2, [pc, #172]	; (80082b4 <TIM_Base_SetConfig+0x11c>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d01f      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a2a      	ldr	r2, [pc, #168]	; (80082b8 <TIM_Base_SetConfig+0x120>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d01b      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a29      	ldr	r2, [pc, #164]	; (80082bc <TIM_Base_SetConfig+0x124>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d017      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a28      	ldr	r2, [pc, #160]	; (80082c0 <TIM_Base_SetConfig+0x128>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d013      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a27      	ldr	r2, [pc, #156]	; (80082c4 <TIM_Base_SetConfig+0x12c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00f      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a26      	ldr	r2, [pc, #152]	; (80082c8 <TIM_Base_SetConfig+0x130>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00b      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a25      	ldr	r2, [pc, #148]	; (80082cc <TIM_Base_SetConfig+0x134>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d007      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a24      	ldr	r2, [pc, #144]	; (80082d0 <TIM_Base_SetConfig+0x138>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d003      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a23      	ldr	r2, [pc, #140]	; (80082d4 <TIM_Base_SetConfig+0x13c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d108      	bne.n	800825c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <TIM_Base_SetConfig+0x114>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_Base_SetConfig+0xf8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a0c      	ldr	r2, [pc, #48]	; (80082bc <TIM_Base_SetConfig+0x124>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d103      	bne.n	8008298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	615a      	str	r2, [r3, #20]
}
 800829e:	bf00      	nop
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	40010000 	.word	0x40010000
 80082b0:	40000400 	.word	0x40000400
 80082b4:	40000800 	.word	0x40000800
 80082b8:	40000c00 	.word	0x40000c00
 80082bc:	40010400 	.word	0x40010400
 80082c0:	40014000 	.word	0x40014000
 80082c4:	40014400 	.word	0x40014400
 80082c8:	40014800 	.word	0x40014800
 80082cc:	40001800 	.word	0x40001800
 80082d0:	40001c00 	.word	0x40001c00
 80082d4:	40002000 	.word	0x40002000

080082d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <__itoa>:
 8008300:	1e93      	subs	r3, r2, #2
 8008302:	2b22      	cmp	r3, #34	; 0x22
 8008304:	b510      	push	{r4, lr}
 8008306:	460c      	mov	r4, r1
 8008308:	d904      	bls.n	8008314 <__itoa+0x14>
 800830a:	2300      	movs	r3, #0
 800830c:	700b      	strb	r3, [r1, #0]
 800830e:	461c      	mov	r4, r3
 8008310:	4620      	mov	r0, r4
 8008312:	bd10      	pop	{r4, pc}
 8008314:	2a0a      	cmp	r2, #10
 8008316:	d109      	bne.n	800832c <__itoa+0x2c>
 8008318:	2800      	cmp	r0, #0
 800831a:	da07      	bge.n	800832c <__itoa+0x2c>
 800831c:	232d      	movs	r3, #45	; 0x2d
 800831e:	700b      	strb	r3, [r1, #0]
 8008320:	4240      	negs	r0, r0
 8008322:	2101      	movs	r1, #1
 8008324:	4421      	add	r1, r4
 8008326:	f000 f805 	bl	8008334 <__utoa>
 800832a:	e7f1      	b.n	8008310 <__itoa+0x10>
 800832c:	2100      	movs	r1, #0
 800832e:	e7f9      	b.n	8008324 <__itoa+0x24>

08008330 <itoa>:
 8008330:	f7ff bfe6 	b.w	8008300 <__itoa>

08008334 <__utoa>:
 8008334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008336:	4c1f      	ldr	r4, [pc, #124]	; (80083b4 <__utoa+0x80>)
 8008338:	b08b      	sub	sp, #44	; 0x2c
 800833a:	4605      	mov	r5, r0
 800833c:	460b      	mov	r3, r1
 800833e:	466e      	mov	r6, sp
 8008340:	f104 0c20 	add.w	ip, r4, #32
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	6861      	ldr	r1, [r4, #4]
 8008348:	4637      	mov	r7, r6
 800834a:	c703      	stmia	r7!, {r0, r1}
 800834c:	3408      	adds	r4, #8
 800834e:	4564      	cmp	r4, ip
 8008350:	463e      	mov	r6, r7
 8008352:	d1f7      	bne.n	8008344 <__utoa+0x10>
 8008354:	7921      	ldrb	r1, [r4, #4]
 8008356:	7139      	strb	r1, [r7, #4]
 8008358:	1e91      	subs	r1, r2, #2
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	6038      	str	r0, [r7, #0]
 800835e:	2922      	cmp	r1, #34	; 0x22
 8008360:	f04f 0100 	mov.w	r1, #0
 8008364:	d904      	bls.n	8008370 <__utoa+0x3c>
 8008366:	7019      	strb	r1, [r3, #0]
 8008368:	460b      	mov	r3, r1
 800836a:	4618      	mov	r0, r3
 800836c:	b00b      	add	sp, #44	; 0x2c
 800836e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008370:	1e58      	subs	r0, r3, #1
 8008372:	4684      	mov	ip, r0
 8008374:	fbb5 f7f2 	udiv	r7, r5, r2
 8008378:	fb02 5617 	mls	r6, r2, r7, r5
 800837c:	3628      	adds	r6, #40	; 0x28
 800837e:	446e      	add	r6, sp
 8008380:	460c      	mov	r4, r1
 8008382:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008386:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800838a:	462e      	mov	r6, r5
 800838c:	42b2      	cmp	r2, r6
 800838e:	f101 0101 	add.w	r1, r1, #1
 8008392:	463d      	mov	r5, r7
 8008394:	d9ee      	bls.n	8008374 <__utoa+0x40>
 8008396:	2200      	movs	r2, #0
 8008398:	545a      	strb	r2, [r3, r1]
 800839a:	1919      	adds	r1, r3, r4
 800839c:	1aa5      	subs	r5, r4, r2
 800839e:	42aa      	cmp	r2, r5
 80083a0:	dae3      	bge.n	800836a <__utoa+0x36>
 80083a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80083a6:	780e      	ldrb	r6, [r1, #0]
 80083a8:	7006      	strb	r6, [r0, #0]
 80083aa:	3201      	adds	r2, #1
 80083ac:	f801 5901 	strb.w	r5, [r1], #-1
 80083b0:	e7f4      	b.n	800839c <__utoa+0x68>
 80083b2:	bf00      	nop
 80083b4:	08008f04 	.word	0x08008f04

080083b8 <sniprintf>:
 80083b8:	b40c      	push	{r2, r3}
 80083ba:	b530      	push	{r4, r5, lr}
 80083bc:	4b17      	ldr	r3, [pc, #92]	; (800841c <sniprintf+0x64>)
 80083be:	1e0c      	subs	r4, r1, #0
 80083c0:	681d      	ldr	r5, [r3, #0]
 80083c2:	b09d      	sub	sp, #116	; 0x74
 80083c4:	da08      	bge.n	80083d8 <sniprintf+0x20>
 80083c6:	238b      	movs	r3, #139	; 0x8b
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	f04f 30ff 	mov.w	r0, #4294967295
 80083ce:	b01d      	add	sp, #116	; 0x74
 80083d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083d4:	b002      	add	sp, #8
 80083d6:	4770      	bx	lr
 80083d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80083dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083e0:	bf14      	ite	ne
 80083e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083e6:	4623      	moveq	r3, r4
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	9307      	str	r3, [sp, #28]
 80083ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083f0:	9002      	str	r0, [sp, #8]
 80083f2:	9006      	str	r0, [sp, #24]
 80083f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083fa:	ab21      	add	r3, sp, #132	; 0x84
 80083fc:	a902      	add	r1, sp, #8
 80083fe:	4628      	mov	r0, r5
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	f000 f9ab 	bl	800875c <_svfiprintf_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	bfbc      	itt	lt
 800840a:	238b      	movlt	r3, #139	; 0x8b
 800840c:	602b      	strlt	r3, [r5, #0]
 800840e:	2c00      	cmp	r4, #0
 8008410:	d0dd      	beq.n	80083ce <sniprintf+0x16>
 8008412:	9b02      	ldr	r3, [sp, #8]
 8008414:	2200      	movs	r2, #0
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	e7d9      	b.n	80083ce <sniprintf+0x16>
 800841a:	bf00      	nop
 800841c:	20000068 	.word	0x20000068

08008420 <memcmp>:
 8008420:	b510      	push	{r4, lr}
 8008422:	3901      	subs	r1, #1
 8008424:	4402      	add	r2, r0
 8008426:	4290      	cmp	r0, r2
 8008428:	d101      	bne.n	800842e <memcmp+0xe>
 800842a:	2000      	movs	r0, #0
 800842c:	e005      	b.n	800843a <memcmp+0x1a>
 800842e:	7803      	ldrb	r3, [r0, #0]
 8008430:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008434:	42a3      	cmp	r3, r4
 8008436:	d001      	beq.n	800843c <memcmp+0x1c>
 8008438:	1b18      	subs	r0, r3, r4
 800843a:	bd10      	pop	{r4, pc}
 800843c:	3001      	adds	r0, #1
 800843e:	e7f2      	b.n	8008426 <memcmp+0x6>

08008440 <memset>:
 8008440:	4402      	add	r2, r0
 8008442:	4603      	mov	r3, r0
 8008444:	4293      	cmp	r3, r2
 8008446:	d100      	bne.n	800844a <memset+0xa>
 8008448:	4770      	bx	lr
 800844a:	f803 1b01 	strb.w	r1, [r3], #1
 800844e:	e7f9      	b.n	8008444 <memset+0x4>

08008450 <__libc_init_array>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4d0d      	ldr	r5, [pc, #52]	; (8008488 <__libc_init_array+0x38>)
 8008454:	4c0d      	ldr	r4, [pc, #52]	; (800848c <__libc_init_array+0x3c>)
 8008456:	1b64      	subs	r4, r4, r5
 8008458:	10a4      	asrs	r4, r4, #2
 800845a:	2600      	movs	r6, #0
 800845c:	42a6      	cmp	r6, r4
 800845e:	d109      	bne.n	8008474 <__libc_init_array+0x24>
 8008460:	4d0b      	ldr	r5, [pc, #44]	; (8008490 <__libc_init_array+0x40>)
 8008462:	4c0c      	ldr	r4, [pc, #48]	; (8008494 <__libc_init_array+0x44>)
 8008464:	f000 fc78 	bl	8008d58 <_init>
 8008468:	1b64      	subs	r4, r4, r5
 800846a:	10a4      	asrs	r4, r4, #2
 800846c:	2600      	movs	r6, #0
 800846e:	42a6      	cmp	r6, r4
 8008470:	d105      	bne.n	800847e <__libc_init_array+0x2e>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	f855 3b04 	ldr.w	r3, [r5], #4
 8008478:	4798      	blx	r3
 800847a:	3601      	adds	r6, #1
 800847c:	e7ee      	b.n	800845c <__libc_init_array+0xc>
 800847e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008482:	4798      	blx	r3
 8008484:	3601      	adds	r6, #1
 8008486:	e7f2      	b.n	800846e <__libc_init_array+0x1e>
 8008488:	08008f64 	.word	0x08008f64
 800848c:	08008f64 	.word	0x08008f64
 8008490:	08008f64 	.word	0x08008f64
 8008494:	08008f68 	.word	0x08008f68

08008498 <__retarget_lock_acquire_recursive>:
 8008498:	4770      	bx	lr

0800849a <__retarget_lock_release_recursive>:
 800849a:	4770      	bx	lr

0800849c <memcpy>:
 800849c:	440a      	add	r2, r1
 800849e:	4291      	cmp	r1, r2
 80084a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a4:	d100      	bne.n	80084a8 <memcpy+0xc>
 80084a6:	4770      	bx	lr
 80084a8:	b510      	push	{r4, lr}
 80084aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b2:	4291      	cmp	r1, r2
 80084b4:	d1f9      	bne.n	80084aa <memcpy+0xe>
 80084b6:	bd10      	pop	{r4, pc}

080084b8 <_free_r>:
 80084b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ba:	2900      	cmp	r1, #0
 80084bc:	d044      	beq.n	8008548 <_free_r+0x90>
 80084be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c2:	9001      	str	r0, [sp, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f1a1 0404 	sub.w	r4, r1, #4
 80084ca:	bfb8      	it	lt
 80084cc:	18e4      	addlt	r4, r4, r3
 80084ce:	f000 f8df 	bl	8008690 <__malloc_lock>
 80084d2:	4a1e      	ldr	r2, [pc, #120]	; (800854c <_free_r+0x94>)
 80084d4:	9801      	ldr	r0, [sp, #4]
 80084d6:	6813      	ldr	r3, [r2, #0]
 80084d8:	b933      	cbnz	r3, 80084e8 <_free_r+0x30>
 80084da:	6063      	str	r3, [r4, #4]
 80084dc:	6014      	str	r4, [r2, #0]
 80084de:	b003      	add	sp, #12
 80084e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084e4:	f000 b8da 	b.w	800869c <__malloc_unlock>
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	d908      	bls.n	80084fe <_free_r+0x46>
 80084ec:	6825      	ldr	r5, [r4, #0]
 80084ee:	1961      	adds	r1, r4, r5
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf01      	itttt	eq
 80084f4:	6819      	ldreq	r1, [r3, #0]
 80084f6:	685b      	ldreq	r3, [r3, #4]
 80084f8:	1949      	addeq	r1, r1, r5
 80084fa:	6021      	streq	r1, [r4, #0]
 80084fc:	e7ed      	b.n	80084da <_free_r+0x22>
 80084fe:	461a      	mov	r2, r3
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	b10b      	cbz	r3, 8008508 <_free_r+0x50>
 8008504:	42a3      	cmp	r3, r4
 8008506:	d9fa      	bls.n	80084fe <_free_r+0x46>
 8008508:	6811      	ldr	r1, [r2, #0]
 800850a:	1855      	adds	r5, r2, r1
 800850c:	42a5      	cmp	r5, r4
 800850e:	d10b      	bne.n	8008528 <_free_r+0x70>
 8008510:	6824      	ldr	r4, [r4, #0]
 8008512:	4421      	add	r1, r4
 8008514:	1854      	adds	r4, r2, r1
 8008516:	42a3      	cmp	r3, r4
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	d1e0      	bne.n	80084de <_free_r+0x26>
 800851c:	681c      	ldr	r4, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	6053      	str	r3, [r2, #4]
 8008522:	440c      	add	r4, r1
 8008524:	6014      	str	r4, [r2, #0]
 8008526:	e7da      	b.n	80084de <_free_r+0x26>
 8008528:	d902      	bls.n	8008530 <_free_r+0x78>
 800852a:	230c      	movs	r3, #12
 800852c:	6003      	str	r3, [r0, #0]
 800852e:	e7d6      	b.n	80084de <_free_r+0x26>
 8008530:	6825      	ldr	r5, [r4, #0]
 8008532:	1961      	adds	r1, r4, r5
 8008534:	428b      	cmp	r3, r1
 8008536:	bf04      	itt	eq
 8008538:	6819      	ldreq	r1, [r3, #0]
 800853a:	685b      	ldreq	r3, [r3, #4]
 800853c:	6063      	str	r3, [r4, #4]
 800853e:	bf04      	itt	eq
 8008540:	1949      	addeq	r1, r1, r5
 8008542:	6021      	streq	r1, [r4, #0]
 8008544:	6054      	str	r4, [r2, #4]
 8008546:	e7ca      	b.n	80084de <_free_r+0x26>
 8008548:	b003      	add	sp, #12
 800854a:	bd30      	pop	{r4, r5, pc}
 800854c:	20014650 	.word	0x20014650

08008550 <sbrk_aligned>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4e0e      	ldr	r6, [pc, #56]	; (800858c <sbrk_aligned+0x3c>)
 8008554:	460c      	mov	r4, r1
 8008556:	6831      	ldr	r1, [r6, #0]
 8008558:	4605      	mov	r5, r0
 800855a:	b911      	cbnz	r1, 8008562 <sbrk_aligned+0x12>
 800855c:	f000 fba6 	bl	8008cac <_sbrk_r>
 8008560:	6030      	str	r0, [r6, #0]
 8008562:	4621      	mov	r1, r4
 8008564:	4628      	mov	r0, r5
 8008566:	f000 fba1 	bl	8008cac <_sbrk_r>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d00a      	beq.n	8008584 <sbrk_aligned+0x34>
 800856e:	1cc4      	adds	r4, r0, #3
 8008570:	f024 0403 	bic.w	r4, r4, #3
 8008574:	42a0      	cmp	r0, r4
 8008576:	d007      	beq.n	8008588 <sbrk_aligned+0x38>
 8008578:	1a21      	subs	r1, r4, r0
 800857a:	4628      	mov	r0, r5
 800857c:	f000 fb96 	bl	8008cac <_sbrk_r>
 8008580:	3001      	adds	r0, #1
 8008582:	d101      	bne.n	8008588 <sbrk_aligned+0x38>
 8008584:	f04f 34ff 	mov.w	r4, #4294967295
 8008588:	4620      	mov	r0, r4
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	20014654 	.word	0x20014654

08008590 <_malloc_r>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	1ccd      	adds	r5, r1, #3
 8008596:	f025 0503 	bic.w	r5, r5, #3
 800859a:	3508      	adds	r5, #8
 800859c:	2d0c      	cmp	r5, #12
 800859e:	bf38      	it	cc
 80085a0:	250c      	movcc	r5, #12
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	4607      	mov	r7, r0
 80085a6:	db01      	blt.n	80085ac <_malloc_r+0x1c>
 80085a8:	42a9      	cmp	r1, r5
 80085aa:	d905      	bls.n	80085b8 <_malloc_r+0x28>
 80085ac:	230c      	movs	r3, #12
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	2600      	movs	r6, #0
 80085b2:	4630      	mov	r0, r6
 80085b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800868c <_malloc_r+0xfc>
 80085bc:	f000 f868 	bl	8008690 <__malloc_lock>
 80085c0:	f8d8 3000 	ldr.w	r3, [r8]
 80085c4:	461c      	mov	r4, r3
 80085c6:	bb5c      	cbnz	r4, 8008620 <_malloc_r+0x90>
 80085c8:	4629      	mov	r1, r5
 80085ca:	4638      	mov	r0, r7
 80085cc:	f7ff ffc0 	bl	8008550 <sbrk_aligned>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	4604      	mov	r4, r0
 80085d4:	d155      	bne.n	8008682 <_malloc_r+0xf2>
 80085d6:	f8d8 4000 	ldr.w	r4, [r8]
 80085da:	4626      	mov	r6, r4
 80085dc:	2e00      	cmp	r6, #0
 80085de:	d145      	bne.n	800866c <_malloc_r+0xdc>
 80085e0:	2c00      	cmp	r4, #0
 80085e2:	d048      	beq.n	8008676 <_malloc_r+0xe6>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	4631      	mov	r1, r6
 80085e8:	4638      	mov	r0, r7
 80085ea:	eb04 0903 	add.w	r9, r4, r3
 80085ee:	f000 fb5d 	bl	8008cac <_sbrk_r>
 80085f2:	4581      	cmp	r9, r0
 80085f4:	d13f      	bne.n	8008676 <_malloc_r+0xe6>
 80085f6:	6821      	ldr	r1, [r4, #0]
 80085f8:	1a6d      	subs	r5, r5, r1
 80085fa:	4629      	mov	r1, r5
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7ff ffa7 	bl	8008550 <sbrk_aligned>
 8008602:	3001      	adds	r0, #1
 8008604:	d037      	beq.n	8008676 <_malloc_r+0xe6>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	442b      	add	r3, r5
 800860a:	6023      	str	r3, [r4, #0]
 800860c:	f8d8 3000 	ldr.w	r3, [r8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d038      	beq.n	8008686 <_malloc_r+0xf6>
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	42a2      	cmp	r2, r4
 8008618:	d12b      	bne.n	8008672 <_malloc_r+0xe2>
 800861a:	2200      	movs	r2, #0
 800861c:	605a      	str	r2, [r3, #4]
 800861e:	e00f      	b.n	8008640 <_malloc_r+0xb0>
 8008620:	6822      	ldr	r2, [r4, #0]
 8008622:	1b52      	subs	r2, r2, r5
 8008624:	d41f      	bmi.n	8008666 <_malloc_r+0xd6>
 8008626:	2a0b      	cmp	r2, #11
 8008628:	d917      	bls.n	800865a <_malloc_r+0xca>
 800862a:	1961      	adds	r1, r4, r5
 800862c:	42a3      	cmp	r3, r4
 800862e:	6025      	str	r5, [r4, #0]
 8008630:	bf18      	it	ne
 8008632:	6059      	strne	r1, [r3, #4]
 8008634:	6863      	ldr	r3, [r4, #4]
 8008636:	bf08      	it	eq
 8008638:	f8c8 1000 	streq.w	r1, [r8]
 800863c:	5162      	str	r2, [r4, r5]
 800863e:	604b      	str	r3, [r1, #4]
 8008640:	4638      	mov	r0, r7
 8008642:	f104 060b 	add.w	r6, r4, #11
 8008646:	f000 f829 	bl	800869c <__malloc_unlock>
 800864a:	f026 0607 	bic.w	r6, r6, #7
 800864e:	1d23      	adds	r3, r4, #4
 8008650:	1af2      	subs	r2, r6, r3
 8008652:	d0ae      	beq.n	80085b2 <_malloc_r+0x22>
 8008654:	1b9b      	subs	r3, r3, r6
 8008656:	50a3      	str	r3, [r4, r2]
 8008658:	e7ab      	b.n	80085b2 <_malloc_r+0x22>
 800865a:	42a3      	cmp	r3, r4
 800865c:	6862      	ldr	r2, [r4, #4]
 800865e:	d1dd      	bne.n	800861c <_malloc_r+0x8c>
 8008660:	f8c8 2000 	str.w	r2, [r8]
 8008664:	e7ec      	b.n	8008640 <_malloc_r+0xb0>
 8008666:	4623      	mov	r3, r4
 8008668:	6864      	ldr	r4, [r4, #4]
 800866a:	e7ac      	b.n	80085c6 <_malloc_r+0x36>
 800866c:	4634      	mov	r4, r6
 800866e:	6876      	ldr	r6, [r6, #4]
 8008670:	e7b4      	b.n	80085dc <_malloc_r+0x4c>
 8008672:	4613      	mov	r3, r2
 8008674:	e7cc      	b.n	8008610 <_malloc_r+0x80>
 8008676:	230c      	movs	r3, #12
 8008678:	603b      	str	r3, [r7, #0]
 800867a:	4638      	mov	r0, r7
 800867c:	f000 f80e 	bl	800869c <__malloc_unlock>
 8008680:	e797      	b.n	80085b2 <_malloc_r+0x22>
 8008682:	6025      	str	r5, [r4, #0]
 8008684:	e7dc      	b.n	8008640 <_malloc_r+0xb0>
 8008686:	605b      	str	r3, [r3, #4]
 8008688:	deff      	udf	#255	; 0xff
 800868a:	bf00      	nop
 800868c:	20014650 	.word	0x20014650

08008690 <__malloc_lock>:
 8008690:	4801      	ldr	r0, [pc, #4]	; (8008698 <__malloc_lock+0x8>)
 8008692:	f7ff bf01 	b.w	8008498 <__retarget_lock_acquire_recursive>
 8008696:	bf00      	nop
 8008698:	2001464c 	.word	0x2001464c

0800869c <__malloc_unlock>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__malloc_unlock+0x8>)
 800869e:	f7ff befc 	b.w	800849a <__retarget_lock_release_recursive>
 80086a2:	bf00      	nop
 80086a4:	2001464c 	.word	0x2001464c

080086a8 <__ssputs_r>:
 80086a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	688e      	ldr	r6, [r1, #8]
 80086ae:	461f      	mov	r7, r3
 80086b0:	42be      	cmp	r6, r7
 80086b2:	680b      	ldr	r3, [r1, #0]
 80086b4:	4682      	mov	sl, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	4690      	mov	r8, r2
 80086ba:	d82c      	bhi.n	8008716 <__ssputs_r+0x6e>
 80086bc:	898a      	ldrh	r2, [r1, #12]
 80086be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086c2:	d026      	beq.n	8008712 <__ssputs_r+0x6a>
 80086c4:	6965      	ldr	r5, [r4, #20]
 80086c6:	6909      	ldr	r1, [r1, #16]
 80086c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086cc:	eba3 0901 	sub.w	r9, r3, r1
 80086d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086d4:	1c7b      	adds	r3, r7, #1
 80086d6:	444b      	add	r3, r9
 80086d8:	106d      	asrs	r5, r5, #1
 80086da:	429d      	cmp	r5, r3
 80086dc:	bf38      	it	cc
 80086de:	461d      	movcc	r5, r3
 80086e0:	0553      	lsls	r3, r2, #21
 80086e2:	d527      	bpl.n	8008734 <__ssputs_r+0x8c>
 80086e4:	4629      	mov	r1, r5
 80086e6:	f7ff ff53 	bl	8008590 <_malloc_r>
 80086ea:	4606      	mov	r6, r0
 80086ec:	b360      	cbz	r0, 8008748 <__ssputs_r+0xa0>
 80086ee:	6921      	ldr	r1, [r4, #16]
 80086f0:	464a      	mov	r2, r9
 80086f2:	f7ff fed3 	bl	800849c <memcpy>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	6126      	str	r6, [r4, #16]
 8008704:	6165      	str	r5, [r4, #20]
 8008706:	444e      	add	r6, r9
 8008708:	eba5 0509 	sub.w	r5, r5, r9
 800870c:	6026      	str	r6, [r4, #0]
 800870e:	60a5      	str	r5, [r4, #8]
 8008710:	463e      	mov	r6, r7
 8008712:	42be      	cmp	r6, r7
 8008714:	d900      	bls.n	8008718 <__ssputs_r+0x70>
 8008716:	463e      	mov	r6, r7
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	4632      	mov	r2, r6
 800871c:	4641      	mov	r1, r8
 800871e:	f000 faab 	bl	8008c78 <memmove>
 8008722:	68a3      	ldr	r3, [r4, #8]
 8008724:	1b9b      	subs	r3, r3, r6
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	4433      	add	r3, r6
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	2000      	movs	r0, #0
 8008730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008734:	462a      	mov	r2, r5
 8008736:	f000 fac9 	bl	8008ccc <_realloc_r>
 800873a:	4606      	mov	r6, r0
 800873c:	2800      	cmp	r0, #0
 800873e:	d1e0      	bne.n	8008702 <__ssputs_r+0x5a>
 8008740:	6921      	ldr	r1, [r4, #16]
 8008742:	4650      	mov	r0, sl
 8008744:	f7ff feb8 	bl	80084b8 <_free_r>
 8008748:	230c      	movs	r3, #12
 800874a:	f8ca 3000 	str.w	r3, [sl]
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	f04f 30ff 	mov.w	r0, #4294967295
 800875a:	e7e9      	b.n	8008730 <__ssputs_r+0x88>

0800875c <_svfiprintf_r>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	4698      	mov	r8, r3
 8008762:	898b      	ldrh	r3, [r1, #12]
 8008764:	061b      	lsls	r3, r3, #24
 8008766:	b09d      	sub	sp, #116	; 0x74
 8008768:	4607      	mov	r7, r0
 800876a:	460d      	mov	r5, r1
 800876c:	4614      	mov	r4, r2
 800876e:	d50e      	bpl.n	800878e <_svfiprintf_r+0x32>
 8008770:	690b      	ldr	r3, [r1, #16]
 8008772:	b963      	cbnz	r3, 800878e <_svfiprintf_r+0x32>
 8008774:	2140      	movs	r1, #64	; 0x40
 8008776:	f7ff ff0b 	bl	8008590 <_malloc_r>
 800877a:	6028      	str	r0, [r5, #0]
 800877c:	6128      	str	r0, [r5, #16]
 800877e:	b920      	cbnz	r0, 800878a <_svfiprintf_r+0x2e>
 8008780:	230c      	movs	r3, #12
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	e0d0      	b.n	800892c <_svfiprintf_r+0x1d0>
 800878a:	2340      	movs	r3, #64	; 0x40
 800878c:	616b      	str	r3, [r5, #20]
 800878e:	2300      	movs	r3, #0
 8008790:	9309      	str	r3, [sp, #36]	; 0x24
 8008792:	2320      	movs	r3, #32
 8008794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008798:	f8cd 800c 	str.w	r8, [sp, #12]
 800879c:	2330      	movs	r3, #48	; 0x30
 800879e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008944 <_svfiprintf_r+0x1e8>
 80087a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087a6:	f04f 0901 	mov.w	r9, #1
 80087aa:	4623      	mov	r3, r4
 80087ac:	469a      	mov	sl, r3
 80087ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b2:	b10a      	cbz	r2, 80087b8 <_svfiprintf_r+0x5c>
 80087b4:	2a25      	cmp	r2, #37	; 0x25
 80087b6:	d1f9      	bne.n	80087ac <_svfiprintf_r+0x50>
 80087b8:	ebba 0b04 	subs.w	fp, sl, r4
 80087bc:	d00b      	beq.n	80087d6 <_svfiprintf_r+0x7a>
 80087be:	465b      	mov	r3, fp
 80087c0:	4622      	mov	r2, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff ff6f 	bl	80086a8 <__ssputs_r>
 80087ca:	3001      	adds	r0, #1
 80087cc:	f000 80a9 	beq.w	8008922 <_svfiprintf_r+0x1c6>
 80087d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d2:	445a      	add	r2, fp
 80087d4:	9209      	str	r2, [sp, #36]	; 0x24
 80087d6:	f89a 3000 	ldrb.w	r3, [sl]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80a1 	beq.w	8008922 <_svfiprintf_r+0x1c6>
 80087e0:	2300      	movs	r3, #0
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ea:	f10a 0a01 	add.w	sl, sl, #1
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	9307      	str	r3, [sp, #28]
 80087f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087f6:	931a      	str	r3, [sp, #104]	; 0x68
 80087f8:	4654      	mov	r4, sl
 80087fa:	2205      	movs	r2, #5
 80087fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008800:	4850      	ldr	r0, [pc, #320]	; (8008944 <_svfiprintf_r+0x1e8>)
 8008802:	f7f7 fd55 	bl	80002b0 <memchr>
 8008806:	9a04      	ldr	r2, [sp, #16]
 8008808:	b9d8      	cbnz	r0, 8008842 <_svfiprintf_r+0xe6>
 800880a:	06d0      	lsls	r0, r2, #27
 800880c:	bf44      	itt	mi
 800880e:	2320      	movmi	r3, #32
 8008810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008814:	0711      	lsls	r1, r2, #28
 8008816:	bf44      	itt	mi
 8008818:	232b      	movmi	r3, #43	; 0x2b
 800881a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800881e:	f89a 3000 	ldrb.w	r3, [sl]
 8008822:	2b2a      	cmp	r3, #42	; 0x2a
 8008824:	d015      	beq.n	8008852 <_svfiprintf_r+0xf6>
 8008826:	9a07      	ldr	r2, [sp, #28]
 8008828:	4654      	mov	r4, sl
 800882a:	2000      	movs	r0, #0
 800882c:	f04f 0c0a 	mov.w	ip, #10
 8008830:	4621      	mov	r1, r4
 8008832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008836:	3b30      	subs	r3, #48	; 0x30
 8008838:	2b09      	cmp	r3, #9
 800883a:	d94d      	bls.n	80088d8 <_svfiprintf_r+0x17c>
 800883c:	b1b0      	cbz	r0, 800886c <_svfiprintf_r+0x110>
 800883e:	9207      	str	r2, [sp, #28]
 8008840:	e014      	b.n	800886c <_svfiprintf_r+0x110>
 8008842:	eba0 0308 	sub.w	r3, r0, r8
 8008846:	fa09 f303 	lsl.w	r3, r9, r3
 800884a:	4313      	orrs	r3, r2
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	46a2      	mov	sl, r4
 8008850:	e7d2      	b.n	80087f8 <_svfiprintf_r+0x9c>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	1d19      	adds	r1, r3, #4
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	9103      	str	r1, [sp, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfbb      	ittet	lt
 800885e:	425b      	neglt	r3, r3
 8008860:	f042 0202 	orrlt.w	r2, r2, #2
 8008864:	9307      	strge	r3, [sp, #28]
 8008866:	9307      	strlt	r3, [sp, #28]
 8008868:	bfb8      	it	lt
 800886a:	9204      	strlt	r2, [sp, #16]
 800886c:	7823      	ldrb	r3, [r4, #0]
 800886e:	2b2e      	cmp	r3, #46	; 0x2e
 8008870:	d10c      	bne.n	800888c <_svfiprintf_r+0x130>
 8008872:	7863      	ldrb	r3, [r4, #1]
 8008874:	2b2a      	cmp	r3, #42	; 0x2a
 8008876:	d134      	bne.n	80088e2 <_svfiprintf_r+0x186>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	1d1a      	adds	r2, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9203      	str	r2, [sp, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfb8      	it	lt
 8008884:	f04f 33ff 	movlt.w	r3, #4294967295
 8008888:	3402      	adds	r4, #2
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008954 <_svfiprintf_r+0x1f8>
 8008890:	7821      	ldrb	r1, [r4, #0]
 8008892:	2203      	movs	r2, #3
 8008894:	4650      	mov	r0, sl
 8008896:	f7f7 fd0b 	bl	80002b0 <memchr>
 800889a:	b138      	cbz	r0, 80088ac <_svfiprintf_r+0x150>
 800889c:	9b04      	ldr	r3, [sp, #16]
 800889e:	eba0 000a 	sub.w	r0, r0, sl
 80088a2:	2240      	movs	r2, #64	; 0x40
 80088a4:	4082      	lsls	r2, r0
 80088a6:	4313      	orrs	r3, r2
 80088a8:	3401      	adds	r4, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b0:	4825      	ldr	r0, [pc, #148]	; (8008948 <_svfiprintf_r+0x1ec>)
 80088b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b6:	2206      	movs	r2, #6
 80088b8:	f7f7 fcfa 	bl	80002b0 <memchr>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d038      	beq.n	8008932 <_svfiprintf_r+0x1d6>
 80088c0:	4b22      	ldr	r3, [pc, #136]	; (800894c <_svfiprintf_r+0x1f0>)
 80088c2:	bb1b      	cbnz	r3, 800890c <_svfiprintf_r+0x1b0>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	3307      	adds	r3, #7
 80088c8:	f023 0307 	bic.w	r3, r3, #7
 80088cc:	3308      	adds	r3, #8
 80088ce:	9303      	str	r3, [sp, #12]
 80088d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d2:	4433      	add	r3, r6
 80088d4:	9309      	str	r3, [sp, #36]	; 0x24
 80088d6:	e768      	b.n	80087aa <_svfiprintf_r+0x4e>
 80088d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80088dc:	460c      	mov	r4, r1
 80088de:	2001      	movs	r0, #1
 80088e0:	e7a6      	b.n	8008830 <_svfiprintf_r+0xd4>
 80088e2:	2300      	movs	r3, #0
 80088e4:	3401      	adds	r4, #1
 80088e6:	9305      	str	r3, [sp, #20]
 80088e8:	4619      	mov	r1, r3
 80088ea:	f04f 0c0a 	mov.w	ip, #10
 80088ee:	4620      	mov	r0, r4
 80088f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f4:	3a30      	subs	r2, #48	; 0x30
 80088f6:	2a09      	cmp	r2, #9
 80088f8:	d903      	bls.n	8008902 <_svfiprintf_r+0x1a6>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0c6      	beq.n	800888c <_svfiprintf_r+0x130>
 80088fe:	9105      	str	r1, [sp, #20]
 8008900:	e7c4      	b.n	800888c <_svfiprintf_r+0x130>
 8008902:	fb0c 2101 	mla	r1, ip, r1, r2
 8008906:	4604      	mov	r4, r0
 8008908:	2301      	movs	r3, #1
 800890a:	e7f0      	b.n	80088ee <_svfiprintf_r+0x192>
 800890c:	ab03      	add	r3, sp, #12
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	462a      	mov	r2, r5
 8008912:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <_svfiprintf_r+0x1f4>)
 8008914:	a904      	add	r1, sp, #16
 8008916:	4638      	mov	r0, r7
 8008918:	f3af 8000 	nop.w
 800891c:	1c42      	adds	r2, r0, #1
 800891e:	4606      	mov	r6, r0
 8008920:	d1d6      	bne.n	80088d0 <_svfiprintf_r+0x174>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	065b      	lsls	r3, r3, #25
 8008926:	f53f af2d 	bmi.w	8008784 <_svfiprintf_r+0x28>
 800892a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892c:	b01d      	add	sp, #116	; 0x74
 800892e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008932:	ab03      	add	r3, sp, #12
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	462a      	mov	r2, r5
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <_svfiprintf_r+0x1f4>)
 800893a:	a904      	add	r1, sp, #16
 800893c:	4638      	mov	r0, r7
 800893e:	f000 f879 	bl	8008a34 <_printf_i>
 8008942:	e7eb      	b.n	800891c <_svfiprintf_r+0x1c0>
 8008944:	08008f29 	.word	0x08008f29
 8008948:	08008f33 	.word	0x08008f33
 800894c:	00000000 	.word	0x00000000
 8008950:	080086a9 	.word	0x080086a9
 8008954:	08008f2f 	.word	0x08008f2f

08008958 <_printf_common>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	4616      	mov	r6, r2
 800895e:	4699      	mov	r9, r3
 8008960:	688a      	ldr	r2, [r1, #8]
 8008962:	690b      	ldr	r3, [r1, #16]
 8008964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008968:	4293      	cmp	r3, r2
 800896a:	bfb8      	it	lt
 800896c:	4613      	movlt	r3, r2
 800896e:	6033      	str	r3, [r6, #0]
 8008970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008974:	4607      	mov	r7, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b10a      	cbz	r2, 800897e <_printf_common+0x26>
 800897a:	3301      	adds	r3, #1
 800897c:	6033      	str	r3, [r6, #0]
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	0699      	lsls	r1, r3, #26
 8008982:	bf42      	ittt	mi
 8008984:	6833      	ldrmi	r3, [r6, #0]
 8008986:	3302      	addmi	r3, #2
 8008988:	6033      	strmi	r3, [r6, #0]
 800898a:	6825      	ldr	r5, [r4, #0]
 800898c:	f015 0506 	ands.w	r5, r5, #6
 8008990:	d106      	bne.n	80089a0 <_printf_common+0x48>
 8008992:	f104 0a19 	add.w	sl, r4, #25
 8008996:	68e3      	ldr	r3, [r4, #12]
 8008998:	6832      	ldr	r2, [r6, #0]
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	42ab      	cmp	r3, r5
 800899e:	dc26      	bgt.n	80089ee <_printf_common+0x96>
 80089a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089a4:	1e13      	subs	r3, r2, #0
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	bf18      	it	ne
 80089aa:	2301      	movne	r3, #1
 80089ac:	0692      	lsls	r2, r2, #26
 80089ae:	d42b      	bmi.n	8008a08 <_printf_common+0xb0>
 80089b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089b4:	4649      	mov	r1, r9
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c0      	blx	r8
 80089ba:	3001      	adds	r0, #1
 80089bc:	d01e      	beq.n	80089fc <_printf_common+0xa4>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	6922      	ldr	r2, [r4, #16]
 80089c2:	f003 0306 	and.w	r3, r3, #6
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	bf02      	ittt	eq
 80089ca:	68e5      	ldreq	r5, [r4, #12]
 80089cc:	6833      	ldreq	r3, [r6, #0]
 80089ce:	1aed      	subeq	r5, r5, r3
 80089d0:	68a3      	ldr	r3, [r4, #8]
 80089d2:	bf0c      	ite	eq
 80089d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d8:	2500      	movne	r5, #0
 80089da:	4293      	cmp	r3, r2
 80089dc:	bfc4      	itt	gt
 80089de:	1a9b      	subgt	r3, r3, r2
 80089e0:	18ed      	addgt	r5, r5, r3
 80089e2:	2600      	movs	r6, #0
 80089e4:	341a      	adds	r4, #26
 80089e6:	42b5      	cmp	r5, r6
 80089e8:	d11a      	bne.n	8008a20 <_printf_common+0xc8>
 80089ea:	2000      	movs	r0, #0
 80089ec:	e008      	b.n	8008a00 <_printf_common+0xa8>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4652      	mov	r2, sl
 80089f2:	4649      	mov	r1, r9
 80089f4:	4638      	mov	r0, r7
 80089f6:	47c0      	blx	r8
 80089f8:	3001      	adds	r0, #1
 80089fa:	d103      	bne.n	8008a04 <_printf_common+0xac>
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a04:	3501      	adds	r5, #1
 8008a06:	e7c6      	b.n	8008996 <_printf_common+0x3e>
 8008a08:	18e1      	adds	r1, r4, r3
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	2030      	movs	r0, #48	; 0x30
 8008a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a12:	4422      	add	r2, r4
 8008a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	e7c7      	b.n	80089b0 <_printf_common+0x58>
 8008a20:	2301      	movs	r3, #1
 8008a22:	4622      	mov	r2, r4
 8008a24:	4649      	mov	r1, r9
 8008a26:	4638      	mov	r0, r7
 8008a28:	47c0      	blx	r8
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	d0e6      	beq.n	80089fc <_printf_common+0xa4>
 8008a2e:	3601      	adds	r6, #1
 8008a30:	e7d9      	b.n	80089e6 <_printf_common+0x8e>
	...

08008a34 <_printf_i>:
 8008a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a38:	7e0f      	ldrb	r7, [r1, #24]
 8008a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a3c:	2f78      	cmp	r7, #120	; 0x78
 8008a3e:	4691      	mov	r9, r2
 8008a40:	4680      	mov	r8, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	469a      	mov	sl, r3
 8008a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a4a:	d807      	bhi.n	8008a5c <_printf_i+0x28>
 8008a4c:	2f62      	cmp	r7, #98	; 0x62
 8008a4e:	d80a      	bhi.n	8008a66 <_printf_i+0x32>
 8008a50:	2f00      	cmp	r7, #0
 8008a52:	f000 80d4 	beq.w	8008bfe <_printf_i+0x1ca>
 8008a56:	2f58      	cmp	r7, #88	; 0x58
 8008a58:	f000 80c0 	beq.w	8008bdc <_printf_i+0x1a8>
 8008a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a64:	e03a      	b.n	8008adc <_printf_i+0xa8>
 8008a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a6a:	2b15      	cmp	r3, #21
 8008a6c:	d8f6      	bhi.n	8008a5c <_printf_i+0x28>
 8008a6e:	a101      	add	r1, pc, #4	; (adr r1, 8008a74 <_printf_i+0x40>)
 8008a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a74:	08008acd 	.word	0x08008acd
 8008a78:	08008ae1 	.word	0x08008ae1
 8008a7c:	08008a5d 	.word	0x08008a5d
 8008a80:	08008a5d 	.word	0x08008a5d
 8008a84:	08008a5d 	.word	0x08008a5d
 8008a88:	08008a5d 	.word	0x08008a5d
 8008a8c:	08008ae1 	.word	0x08008ae1
 8008a90:	08008a5d 	.word	0x08008a5d
 8008a94:	08008a5d 	.word	0x08008a5d
 8008a98:	08008a5d 	.word	0x08008a5d
 8008a9c:	08008a5d 	.word	0x08008a5d
 8008aa0:	08008be5 	.word	0x08008be5
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008b9f 	.word	0x08008b9f
 8008aac:	08008a5d 	.word	0x08008a5d
 8008ab0:	08008a5d 	.word	0x08008a5d
 8008ab4:	08008c07 	.word	0x08008c07
 8008ab8:	08008a5d 	.word	0x08008a5d
 8008abc:	08008b0d 	.word	0x08008b0d
 8008ac0:	08008a5d 	.word	0x08008a5d
 8008ac4:	08008a5d 	.word	0x08008a5d
 8008ac8:	08008ba7 	.word	0x08008ba7
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	1d1a      	adds	r2, r3, #4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	602a      	str	r2, [r5, #0]
 8008ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008adc:	2301      	movs	r3, #1
 8008ade:	e09f      	b.n	8008c20 <_printf_i+0x1ec>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	0607      	lsls	r7, r0, #24
 8008ae6:	f103 0104 	add.w	r1, r3, #4
 8008aea:	6029      	str	r1, [r5, #0]
 8008aec:	d501      	bpl.n	8008af2 <_printf_i+0xbe>
 8008aee:	681e      	ldr	r6, [r3, #0]
 8008af0:	e003      	b.n	8008afa <_printf_i+0xc6>
 8008af2:	0646      	lsls	r6, r0, #25
 8008af4:	d5fb      	bpl.n	8008aee <_printf_i+0xba>
 8008af6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	da03      	bge.n	8008b06 <_printf_i+0xd2>
 8008afe:	232d      	movs	r3, #45	; 0x2d
 8008b00:	4276      	negs	r6, r6
 8008b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b06:	485a      	ldr	r0, [pc, #360]	; (8008c70 <_printf_i+0x23c>)
 8008b08:	230a      	movs	r3, #10
 8008b0a:	e012      	b.n	8008b32 <_printf_i+0xfe>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	6820      	ldr	r0, [r4, #0]
 8008b10:	1d19      	adds	r1, r3, #4
 8008b12:	6029      	str	r1, [r5, #0]
 8008b14:	0605      	lsls	r5, r0, #24
 8008b16:	d501      	bpl.n	8008b1c <_printf_i+0xe8>
 8008b18:	681e      	ldr	r6, [r3, #0]
 8008b1a:	e002      	b.n	8008b22 <_printf_i+0xee>
 8008b1c:	0641      	lsls	r1, r0, #25
 8008b1e:	d5fb      	bpl.n	8008b18 <_printf_i+0xe4>
 8008b20:	881e      	ldrh	r6, [r3, #0]
 8008b22:	4853      	ldr	r0, [pc, #332]	; (8008c70 <_printf_i+0x23c>)
 8008b24:	2f6f      	cmp	r7, #111	; 0x6f
 8008b26:	bf0c      	ite	eq
 8008b28:	2308      	moveq	r3, #8
 8008b2a:	230a      	movne	r3, #10
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b32:	6865      	ldr	r5, [r4, #4]
 8008b34:	60a5      	str	r5, [r4, #8]
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	bfa2      	ittt	ge
 8008b3a:	6821      	ldrge	r1, [r4, #0]
 8008b3c:	f021 0104 	bicge.w	r1, r1, #4
 8008b40:	6021      	strge	r1, [r4, #0]
 8008b42:	b90e      	cbnz	r6, 8008b48 <_printf_i+0x114>
 8008b44:	2d00      	cmp	r5, #0
 8008b46:	d04b      	beq.n	8008be0 <_printf_i+0x1ac>
 8008b48:	4615      	mov	r5, r2
 8008b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b52:	5dc7      	ldrb	r7, [r0, r7]
 8008b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b58:	4637      	mov	r7, r6
 8008b5a:	42bb      	cmp	r3, r7
 8008b5c:	460e      	mov	r6, r1
 8008b5e:	d9f4      	bls.n	8008b4a <_printf_i+0x116>
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d10b      	bne.n	8008b7c <_printf_i+0x148>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07de      	lsls	r6, r3, #31
 8008b68:	d508      	bpl.n	8008b7c <_printf_i+0x148>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	6861      	ldr	r1, [r4, #4]
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	bfde      	ittt	le
 8008b72:	2330      	movle	r3, #48	; 0x30
 8008b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b7c:	1b52      	subs	r2, r2, r5
 8008b7e:	6122      	str	r2, [r4, #16]
 8008b80:	f8cd a000 	str.w	sl, [sp]
 8008b84:	464b      	mov	r3, r9
 8008b86:	aa03      	add	r2, sp, #12
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7ff fee4 	bl	8008958 <_printf_common>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d14a      	bne.n	8008c2a <_printf_i+0x1f6>
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	b004      	add	sp, #16
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	f043 0320 	orr.w	r3, r3, #32
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	4833      	ldr	r0, [pc, #204]	; (8008c74 <_printf_i+0x240>)
 8008ba8:	2778      	movs	r7, #120	; 0x78
 8008baa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	6829      	ldr	r1, [r5, #0]
 8008bb2:	061f      	lsls	r7, r3, #24
 8008bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bb8:	d402      	bmi.n	8008bc0 <_printf_i+0x18c>
 8008bba:	065f      	lsls	r7, r3, #25
 8008bbc:	bf48      	it	mi
 8008bbe:	b2b6      	uxthmi	r6, r6
 8008bc0:	07df      	lsls	r7, r3, #31
 8008bc2:	bf48      	it	mi
 8008bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8008bc8:	6029      	str	r1, [r5, #0]
 8008bca:	bf48      	it	mi
 8008bcc:	6023      	strmi	r3, [r4, #0]
 8008bce:	b91e      	cbnz	r6, 8008bd8 <_printf_i+0x1a4>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	f023 0320 	bic.w	r3, r3, #32
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	2310      	movs	r3, #16
 8008bda:	e7a7      	b.n	8008b2c <_printf_i+0xf8>
 8008bdc:	4824      	ldr	r0, [pc, #144]	; (8008c70 <_printf_i+0x23c>)
 8008bde:	e7e4      	b.n	8008baa <_printf_i+0x176>
 8008be0:	4615      	mov	r5, r2
 8008be2:	e7bd      	b.n	8008b60 <_printf_i+0x12c>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	6826      	ldr	r6, [r4, #0]
 8008be8:	6961      	ldr	r1, [r4, #20]
 8008bea:	1d18      	adds	r0, r3, #4
 8008bec:	6028      	str	r0, [r5, #0]
 8008bee:	0635      	lsls	r5, r6, #24
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	d501      	bpl.n	8008bf8 <_printf_i+0x1c4>
 8008bf4:	6019      	str	r1, [r3, #0]
 8008bf6:	e002      	b.n	8008bfe <_printf_i+0x1ca>
 8008bf8:	0670      	lsls	r0, r6, #25
 8008bfa:	d5fb      	bpl.n	8008bf4 <_printf_i+0x1c0>
 8008bfc:	8019      	strh	r1, [r3, #0]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	4615      	mov	r5, r2
 8008c04:	e7bc      	b.n	8008b80 <_printf_i+0x14c>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	602a      	str	r2, [r5, #0]
 8008c0c:	681d      	ldr	r5, [r3, #0]
 8008c0e:	6862      	ldr	r2, [r4, #4]
 8008c10:	2100      	movs	r1, #0
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7f7 fb4c 	bl	80002b0 <memchr>
 8008c18:	b108      	cbz	r0, 8008c1e <_printf_i+0x1ea>
 8008c1a:	1b40      	subs	r0, r0, r5
 8008c1c:	6060      	str	r0, [r4, #4]
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	2300      	movs	r3, #0
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c28:	e7aa      	b.n	8008b80 <_printf_i+0x14c>
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	47d0      	blx	sl
 8008c34:	3001      	adds	r0, #1
 8008c36:	d0ad      	beq.n	8008b94 <_printf_i+0x160>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	079b      	lsls	r3, r3, #30
 8008c3c:	d413      	bmi.n	8008c66 <_printf_i+0x232>
 8008c3e:	68e0      	ldr	r0, [r4, #12]
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	4298      	cmp	r0, r3
 8008c44:	bfb8      	it	lt
 8008c46:	4618      	movlt	r0, r3
 8008c48:	e7a6      	b.n	8008b98 <_printf_i+0x164>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	47d0      	blx	sl
 8008c54:	3001      	adds	r0, #1
 8008c56:	d09d      	beq.n	8008b94 <_printf_i+0x160>
 8008c58:	3501      	adds	r5, #1
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	9903      	ldr	r1, [sp, #12]
 8008c5e:	1a5b      	subs	r3, r3, r1
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dcf2      	bgt.n	8008c4a <_printf_i+0x216>
 8008c64:	e7eb      	b.n	8008c3e <_printf_i+0x20a>
 8008c66:	2500      	movs	r5, #0
 8008c68:	f104 0619 	add.w	r6, r4, #25
 8008c6c:	e7f5      	b.n	8008c5a <_printf_i+0x226>
 8008c6e:	bf00      	nop
 8008c70:	08008f3a 	.word	0x08008f3a
 8008c74:	08008f4b 	.word	0x08008f4b

08008c78 <memmove>:
 8008c78:	4288      	cmp	r0, r1
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	eb01 0402 	add.w	r4, r1, r2
 8008c80:	d902      	bls.n	8008c88 <memmove+0x10>
 8008c82:	4284      	cmp	r4, r0
 8008c84:	4623      	mov	r3, r4
 8008c86:	d807      	bhi.n	8008c98 <memmove+0x20>
 8008c88:	1e43      	subs	r3, r0, #1
 8008c8a:	42a1      	cmp	r1, r4
 8008c8c:	d008      	beq.n	8008ca0 <memmove+0x28>
 8008c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c96:	e7f8      	b.n	8008c8a <memmove+0x12>
 8008c98:	4402      	add	r2, r0
 8008c9a:	4601      	mov	r1, r0
 8008c9c:	428a      	cmp	r2, r1
 8008c9e:	d100      	bne.n	8008ca2 <memmove+0x2a>
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008caa:	e7f7      	b.n	8008c9c <memmove+0x24>

08008cac <_sbrk_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	4d06      	ldr	r5, [pc, #24]	; (8008cc8 <_sbrk_r+0x1c>)
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	602b      	str	r3, [r5, #0]
 8008cb8:	f000 f840 	bl	8008d3c <_sbrk>
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d102      	bne.n	8008cc6 <_sbrk_r+0x1a>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	b103      	cbz	r3, 8008cc6 <_sbrk_r+0x1a>
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	20014648 	.word	0x20014648

08008ccc <_realloc_r>:
 8008ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4614      	mov	r4, r2
 8008cd4:	460e      	mov	r6, r1
 8008cd6:	b921      	cbnz	r1, 8008ce2 <_realloc_r+0x16>
 8008cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cdc:	4611      	mov	r1, r2
 8008cde:	f7ff bc57 	b.w	8008590 <_malloc_r>
 8008ce2:	b92a      	cbnz	r2, 8008cf0 <_realloc_r+0x24>
 8008ce4:	f7ff fbe8 	bl	80084b8 <_free_r>
 8008ce8:	4625      	mov	r5, r4
 8008cea:	4628      	mov	r0, r5
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	f000 f81b 	bl	8008d2a <_malloc_usable_size_r>
 8008cf4:	4284      	cmp	r4, r0
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	d802      	bhi.n	8008d00 <_realloc_r+0x34>
 8008cfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cfe:	d812      	bhi.n	8008d26 <_realloc_r+0x5a>
 8008d00:	4621      	mov	r1, r4
 8008d02:	4640      	mov	r0, r8
 8008d04:	f7ff fc44 	bl	8008590 <_malloc_r>
 8008d08:	4605      	mov	r5, r0
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d0ed      	beq.n	8008cea <_realloc_r+0x1e>
 8008d0e:	42bc      	cmp	r4, r7
 8008d10:	4622      	mov	r2, r4
 8008d12:	4631      	mov	r1, r6
 8008d14:	bf28      	it	cs
 8008d16:	463a      	movcs	r2, r7
 8008d18:	f7ff fbc0 	bl	800849c <memcpy>
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4640      	mov	r0, r8
 8008d20:	f7ff fbca 	bl	80084b8 <_free_r>
 8008d24:	e7e1      	b.n	8008cea <_realloc_r+0x1e>
 8008d26:	4635      	mov	r5, r6
 8008d28:	e7df      	b.n	8008cea <_realloc_r+0x1e>

08008d2a <_malloc_usable_size_r>:
 8008d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d2e:	1f18      	subs	r0, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bfbc      	itt	lt
 8008d34:	580b      	ldrlt	r3, [r1, r0]
 8008d36:	18c0      	addlt	r0, r0, r3
 8008d38:	4770      	bx	lr
	...

08008d3c <_sbrk>:
 8008d3c:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <_sbrk+0x14>)
 8008d3e:	6811      	ldr	r1, [r2, #0]
 8008d40:	4603      	mov	r3, r0
 8008d42:	b909      	cbnz	r1, 8008d48 <_sbrk+0xc>
 8008d44:	4903      	ldr	r1, [pc, #12]	; (8008d54 <_sbrk+0x18>)
 8008d46:	6011      	str	r1, [r2, #0]
 8008d48:	6810      	ldr	r0, [r2, #0]
 8008d4a:	4403      	add	r3, r0
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	4770      	bx	lr
 8008d50:	20014658 	.word	0x20014658
 8008d54:	20014660 	.word	0x20014660

08008d58 <_init>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr

08008d64 <_fini>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr
